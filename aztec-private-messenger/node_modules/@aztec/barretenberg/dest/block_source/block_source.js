import { TxHash } from '../blockchain/index.js';
import { deserializeBufferFromVector, Deserializer, numToUInt32BE, serializeBigInt, serializeBufferArrayToVector, serializeBufferToVector, serializeDate, } from '../serialize/index.js';
import { DefiInteractionEvent } from './defi_interaction_event.js';
export class Block {
    constructor(txHash, mined, rollupId, rollupSize, encodedRollupProofData, offchainTxData, interactionResult, gasUsed, gasPrice, subtreeRoot) {
        this.txHash = txHash;
        this.mined = mined;
        this.rollupId = rollupId;
        this.rollupSize = rollupSize;
        this.encodedRollupProofData = encodedRollupProofData;
        this.offchainTxData = offchainTxData;
        this.interactionResult = interactionResult;
        this.gasUsed = gasUsed;
        this.gasPrice = gasPrice;
        this.subtreeRoot = subtreeRoot;
    }
    static deserialize(buf, offset = 0) {
        const des = new Deserializer(buf, offset);
        const txHash = des.exec(TxHash.deserialize);
        const mined = des.date();
        const rollupId = des.uInt32();
        const rollupSize = des.uInt32();
        const rollupProofData = des.vector();
        const offchainTxData = des.deserializeArray(deserializeBufferFromVector);
        const interactionResult = des.deserializeArray(DefiInteractionEvent.deserialize);
        const gasUsed = des.uInt32();
        const gasPrice = des.bigInt();
        const subtreeRoot = des.vector();
        return {
            elem: new Block(txHash, mined, rollupId, rollupSize, rollupProofData, offchainTxData, interactionResult, gasUsed, gasPrice, subtreeRoot.equals(Buffer.alloc(0)) ? undefined : subtreeRoot),
            adv: des.getOffset() - offset,
        };
    }
    static fromBuffer(buf) {
        return Block.deserialize(buf).elem;
    }
    toBuffer() {
        return Buffer.concat([
            this.txHash.toBuffer(),
            serializeDate(this.mined),
            numToUInt32BE(this.rollupId),
            numToUInt32BE(this.rollupSize),
            serializeBufferToVector(this.encodedRollupProofData),
            serializeBufferArrayToVector(this.offchainTxData.map(b => serializeBufferToVector(b))),
            serializeBufferArrayToVector(this.interactionResult.map(b => b.toBuffer())),
            numToUInt32BE(this.gasUsed),
            serializeBigInt(this.gasPrice),
            serializeBufferToVector(this.subtreeRoot ?? Buffer.alloc(0)),
        ]);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2tfc291cmNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Jsb2NrX3NvdXJjZS9ibG9ja19zb3VyY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ2hELE9BQU8sRUFDTCwyQkFBMkIsRUFDM0IsWUFBWSxFQUNaLGFBQWEsRUFDYixlQUFlLEVBQ2YsNEJBQTRCLEVBQzVCLHVCQUF1QixFQUN2QixhQUFhLEdBQ2QsTUFBTSx1QkFBdUIsQ0FBQztBQUMvQixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUVuRSxNQUFNLE9BQU8sS0FBSztJQUNoQixZQUNTLE1BQWMsRUFDZCxLQUFXLEVBQ1gsUUFBZ0IsRUFDaEIsVUFBa0IsRUFDbEIsc0JBQThCLEVBQzlCLGNBQXdCLEVBQ3hCLGlCQUF5QyxFQUN6QyxPQUFlLEVBQ2YsUUFBZ0IsRUFDaEIsV0FBb0I7UUFUcEIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNkLFVBQUssR0FBTCxLQUFLLENBQU07UUFDWCxhQUFRLEdBQVIsUUFBUSxDQUFRO1FBQ2hCLGVBQVUsR0FBVixVQUFVLENBQVE7UUFDbEIsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUFRO1FBQzlCLG1CQUFjLEdBQWQsY0FBYyxDQUFVO1FBQ3hCLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBd0I7UUFDekMsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUNmLGFBQVEsR0FBUixRQUFRLENBQVE7UUFDaEIsZ0JBQVcsR0FBWCxXQUFXLENBQVM7SUFDMUIsQ0FBQztJQUVKLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBVyxFQUFFLE1BQU0sR0FBRyxDQUFDO1FBQ3hDLE1BQU0sR0FBRyxHQUFHLElBQUksWUFBWSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMxQyxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUM1QyxNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDekIsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQzlCLE1BQU0sVUFBVSxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNoQyxNQUFNLGVBQWUsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDckMsTUFBTSxjQUFjLEdBQUcsR0FBRyxDQUFDLGdCQUFnQixDQUFDLDJCQUEyQixDQUFDLENBQUM7UUFDekUsTUFBTSxpQkFBaUIsR0FBRyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsb0JBQW9CLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDakYsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQzdCLE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUM5QixNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDakMsT0FBTztZQUNMLElBQUksRUFBRSxJQUFJLEtBQUssQ0FDYixNQUFNLEVBQ04sS0FBSyxFQUNMLFFBQVEsRUFDUixVQUFVLEVBQ1YsZUFBZSxFQUNmLGNBQWMsRUFDZCxpQkFBaUIsRUFDakIsT0FBTyxFQUNQLFFBQVEsRUFDUixXQUFXLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQzlEO1lBQ0QsR0FBRyxFQUFFLEdBQUcsQ0FBQyxTQUFTLEVBQUUsR0FBRyxNQUFNO1NBQzlCLENBQUM7SUFDSixDQUFDO0lBRUQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFXO1FBQzNCLE9BQU8sS0FBSyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDckMsQ0FBQztJQUVELFFBQVE7UUFDTixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUM7WUFDbkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUU7WUFDdEIsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDekIsYUFBYSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7WUFDNUIsYUFBYSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7WUFDOUIsdUJBQXVCLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDO1lBQ3BELDRCQUE0QixDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0Riw0QkFBNEIsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7WUFDM0UsYUFBYSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDM0IsZUFBZSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7WUFDOUIsdUJBQXVCLENBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzdELENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRiJ9