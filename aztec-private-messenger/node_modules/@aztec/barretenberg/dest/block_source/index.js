import { deserializeBufferFromVector, Deserializer, numToUInt32BE, serializeBigInt, serializeBufferArrayToVector, serializeBufferToVector, serializeDate, } from '../serialize/index.js';
import { TxHash } from '../blockchain/index.js';
import { DefiInteractionEvent } from './defi_interaction_event.js';
export class Block {
    constructor(txHash, mined, rollupId, rollupSize, encodedRollupProofData, offchainTxData, interactionResult, gasUsed, gasPrice, subtreeRoot) {
        this.txHash = txHash;
        this.mined = mined;
        this.rollupId = rollupId;
        this.rollupSize = rollupSize;
        this.encodedRollupProofData = encodedRollupProofData;
        this.offchainTxData = offchainTxData;
        this.interactionResult = interactionResult;
        this.gasUsed = gasUsed;
        this.gasPrice = gasPrice;
        this.subtreeRoot = subtreeRoot;
    }
    static deserialize(buf, offset = 0) {
        const des = new Deserializer(buf, offset);
        const txHash = des.exec(TxHash.deserialize);
        const mined = des.date();
        const rollupId = des.uInt32();
        const rollupSize = des.uInt32();
        const rollupProofData = des.vector();
        const offchainTxData = des.deserializeArray(deserializeBufferFromVector);
        const interactionResult = des.deserializeArray(DefiInteractionEvent.deserialize);
        const gasUsed = des.uInt32();
        const gasPrice = des.bigInt();
        const subtreeRoot = des.vector();
        return {
            elem: new Block(txHash, mined, rollupId, rollupSize, rollupProofData, offchainTxData, interactionResult, gasUsed, gasPrice, subtreeRoot.equals(Buffer.alloc(0)) ? undefined : subtreeRoot),
            adv: des.getOffset() - offset,
        };
    }
    static fromBuffer(buf) {
        return Block.deserialize(buf).elem;
    }
    toBuffer() {
        return Buffer.concat([
            this.txHash.toBuffer(),
            serializeDate(this.mined),
            numToUInt32BE(this.rollupId),
            numToUInt32BE(this.rollupSize),
            serializeBufferToVector(this.encodedRollupProofData),
            serializeBufferArrayToVector(this.offchainTxData.map(b => serializeBufferToVector(b))),
            serializeBufferArrayToVector(this.interactionResult.map(b => b.toBuffer())),
            numToUInt32BE(this.gasUsed),
            serializeBigInt(this.gasPrice),
            serializeBufferToVector(this.subtreeRoot ?? Buffer.alloc(0)),
        ]);
    }
}
export * from './server_block_source.js';
export * from './defi_interaction_event.js';
export * from './decoded_block.js';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYmxvY2tfc291cmNlL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCwyQkFBMkIsRUFDM0IsWUFBWSxFQUNaLGFBQWEsRUFDYixlQUFlLEVBQ2YsNEJBQTRCLEVBQzVCLHVCQUF1QixFQUN2QixhQUFhLEdBQ2QsTUFBTSx1QkFBdUIsQ0FBQztBQUMvQixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDaEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFHbkUsTUFBTSxPQUFPLEtBQUs7SUFDaEIsWUFDUyxNQUFjLEVBQ2QsS0FBVyxFQUNYLFFBQWdCLEVBQ2hCLFVBQWtCLEVBQ2xCLHNCQUE4QixFQUM5QixjQUF3QixFQUN4QixpQkFBeUMsRUFDekMsT0FBZSxFQUNmLFFBQWdCLEVBQ2hCLFdBQW9CO1FBVHBCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCxVQUFLLEdBQUwsS0FBSyxDQUFNO1FBQ1gsYUFBUSxHQUFSLFFBQVEsQ0FBUTtRQUNoQixlQUFVLEdBQVYsVUFBVSxDQUFRO1FBQ2xCLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBUTtRQUM5QixtQkFBYyxHQUFkLGNBQWMsQ0FBVTtRQUN4QixzQkFBaUIsR0FBakIsaUJBQWlCLENBQXdCO1FBQ3pDLFlBQU8sR0FBUCxPQUFPLENBQVE7UUFDZixhQUFRLEdBQVIsUUFBUSxDQUFRO1FBQ2hCLGdCQUFXLEdBQVgsV0FBVyxDQUFTO0lBQzFCLENBQUM7SUFFSixNQUFNLENBQUMsV0FBVyxDQUFDLEdBQVcsRUFBRSxNQUFNLEdBQUcsQ0FBQztRQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLFlBQVksQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDMUMsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDNUMsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3pCLE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUM5QixNQUFNLFVBQVUsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDaEMsTUFBTSxlQUFlLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ3JDLE1BQU0sY0FBYyxHQUFHLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1FBQ3pFLE1BQU0saUJBQWlCLEdBQUcsR0FBRyxDQUFDLGdCQUFnQixDQUFDLG9CQUFvQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2pGLE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUM3QixNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDOUIsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2pDLE9BQU87WUFDTCxJQUFJLEVBQUUsSUFBSSxLQUFLLENBQ2IsTUFBTSxFQUNOLEtBQUssRUFDTCxRQUFRLEVBQ1IsVUFBVSxFQUNWLGVBQWUsRUFDZixjQUFjLEVBQ2QsaUJBQWlCLEVBQ2pCLE9BQU8sRUFDUCxRQUFRLEVBQ1IsV0FBVyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUM5RDtZQUNELEdBQUcsRUFBRSxHQUFHLENBQUMsU0FBUyxFQUFFLEdBQUcsTUFBTTtTQUM5QixDQUFDO0lBQ0osQ0FBQztJQUVELE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBVztRQUMzQixPQUFPLEtBQUssQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ3JDLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDO1lBQ25CLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFO1lBQ3RCLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQ3pCLGFBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1lBQzVCLGFBQWEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO1lBQzlCLHVCQUF1QixDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQztZQUNwRCw0QkFBNEIsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEYsNEJBQTRCLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1lBQzNFLGFBQWEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQzNCLGVBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1lBQzlCLHVCQUF1QixDQUFDLElBQUksQ0FBQyxXQUFXLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUM3RCxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUEwQkQsY0FBYywwQkFBMEIsQ0FBQztBQUN6QyxjQUFjLDZCQUE2QixDQUFDO0FBQzVDLGNBQWMsb0JBQW9CLENBQUMifQ==