import { numToUInt32BE } from '../serialize/index.js';
import { ViewingKey } from '../viewing_key/index.js';
var DataSizes;
(function (DataSizes) {
    DataSizes[DataSizes["VIEWING_KEY_0"] = ViewingKey.SIZE] = "VIEWING_KEY_0";
    DataSizes[DataSizes["VIEWING_KEY_1"] = ViewingKey.SIZE] = "VIEWING_KEY_1";
    DataSizes[DataSizes["TX_REF_NO"] = 4] = "TX_REF_NO";
})(DataSizes || (DataSizes = {}));
var DataOffsets;
(function (DataOffsets) {
    DataOffsets[DataOffsets["VIEWING_KEY_0"] = 0] = "VIEWING_KEY_0";
    DataOffsets[DataOffsets["VIEWING_KEY_1"] = DataOffsets.VIEWING_KEY_0 + DataSizes.VIEWING_KEY_0] = "VIEWING_KEY_1";
    DataOffsets[DataOffsets["TX_REF_NO"] = DataOffsets.VIEWING_KEY_1 + DataSizes.VIEWING_KEY_1] = "TX_REF_NO";
})(DataOffsets || (DataOffsets = {}));
export class OffchainJoinSplitData {
    constructor(viewingKeys, txRefNo = 0) {
        this.viewingKeys = viewingKeys;
        this.txRefNo = txRefNo;
        if (viewingKeys.length !== 2) {
            throw new Error(`Expect 2 viewing keys. Received ${viewingKeys.length}.`);
        }
        if (viewingKeys.some(vk => vk.isEmpty())) {
            throw new Error('Viewing key cannot be empty.');
        }
    }
    static getViewingKeyBuffers(buf) {
        const viewingKey0 = buf.slice(DataOffsets.VIEWING_KEY_0, DataOffsets.VIEWING_KEY_0 + DataSizes.VIEWING_KEY_0);
        const viewingKey1 = buf.slice(DataOffsets.VIEWING_KEY_1, DataOffsets.VIEWING_KEY_1 + DataSizes.VIEWING_KEY_1);
        return [viewingKey0, viewingKey1];
    }
    static fromBuffer(buf) {
        if (buf.length !== OffchainJoinSplitData.SIZE) {
            throw new Error('Invalid buffer size.');
        }
        const viewingKey0 = new ViewingKey(buf.slice(DataOffsets.VIEWING_KEY_0, DataOffsets.VIEWING_KEY_0 + DataSizes.VIEWING_KEY_0));
        const viewingKey1 = new ViewingKey(buf.slice(DataOffsets.VIEWING_KEY_1, DataOffsets.VIEWING_KEY_1 + DataSizes.VIEWING_KEY_1));
        const txRefNo = buf.readUInt32BE(DataOffsets.TX_REF_NO);
        return new OffchainJoinSplitData([viewingKey0, viewingKey1], txRefNo);
    }
    toBuffer() {
        return Buffer.concat([...this.viewingKeys.map(k => k.toBuffer()), numToUInt32BE(this.txRefNo)]);
    }
}
OffchainJoinSplitData.EMPTY = new OffchainJoinSplitData([
    new ViewingKey(Buffer.alloc(ViewingKey.SIZE)),
    new ViewingKey(Buffer.alloc(ViewingKey.SIZE)),
]);
OffchainJoinSplitData.SIZE = OffchainJoinSplitData.EMPTY.toBuffer().length;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2ZmY2hhaW5fam9pbl9zcGxpdF9kYXRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL29mZmNoYWluX3R4X2RhdGEvb2ZmY2hhaW5fam9pbl9zcGxpdF9kYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFckQsSUFBSyxTQUlKO0FBSkQsV0FBSyxTQUFTO0lBQ1osdUNBQWdCLFVBQVUsQ0FBQyxJQUFJLG1CQUFBLENBQUE7SUFDL0IsdUNBQWdCLFVBQVUsQ0FBQyxJQUFJLG1CQUFBLENBQUE7SUFDL0IsbURBQWEsQ0FBQTtBQUNmLENBQUMsRUFKSSxTQUFTLEtBQVQsU0FBUyxRQUliO0FBRUQsSUFBSyxXQUlKO0FBSkQsV0FBSyxXQUFXO0lBQ2QsK0RBQWlCLENBQUE7SUFDakIsMkNBQWdCLFdBQVcsQ0FBQyxhQUFhLEdBQUcsU0FBUyxDQUFDLGFBQWEsbUJBQUEsQ0FBQTtJQUNuRSx1Q0FBWSxXQUFXLENBQUMsYUFBYSxHQUFHLFNBQVMsQ0FBQyxhQUFhLGVBQUEsQ0FBQTtBQUNqRSxDQUFDLEVBSkksV0FBVyxLQUFYLFdBQVcsUUFJZjtBQUVELE1BQU0sT0FBTyxxQkFBcUI7SUFhaEMsWUFBNEIsV0FBeUIsRUFBa0IsVUFBVSxDQUFDO1FBQXRELGdCQUFXLEdBQVgsV0FBVyxDQUFjO1FBQWtCLFlBQU8sR0FBUCxPQUFPLENBQUk7UUFDaEYsSUFBSSxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUM1QixNQUFNLElBQUksS0FBSyxDQUFDLG1DQUFtQyxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztTQUMzRTtRQUNELElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFO1lBQ3hDLE1BQU0sSUFBSSxLQUFLLENBQUMsOEJBQThCLENBQUMsQ0FBQztTQUNqRDtJQUNILENBQUM7SUFiRCxNQUFNLENBQUMsb0JBQW9CLENBQUMsR0FBVztRQUNyQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsV0FBVyxDQUFDLGFBQWEsR0FBRyxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDOUcsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLFdBQVcsQ0FBQyxhQUFhLEdBQUcsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzlHLE9BQU8sQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQVdELE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBVztRQUMzQixJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUsscUJBQXFCLENBQUMsSUFBSSxFQUFFO1lBQzdDLE1BQU0sSUFBSSxLQUFLLENBQUMsc0JBQXNCLENBQUMsQ0FBQztTQUN6QztRQUVELE1BQU0sV0FBVyxHQUFHLElBQUksVUFBVSxDQUNoQyxHQUFHLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsV0FBVyxDQUFDLGFBQWEsR0FBRyxTQUFTLENBQUMsYUFBYSxDQUFDLENBQzFGLENBQUM7UUFDRixNQUFNLFdBQVcsR0FBRyxJQUFJLFVBQVUsQ0FDaEMsR0FBRyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLFdBQVcsQ0FBQyxhQUFhLEdBQUcsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUMxRixDQUFDO1FBQ0YsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDeEQsT0FBTyxJQUFJLHFCQUFxQixDQUFDLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xHLENBQUM7O0FBdENNLDJCQUFLLEdBQUcsSUFBSSxxQkFBcUIsQ0FBQztJQUN2QyxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QyxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUM5QyxDQUFDLENBQUM7QUFDSSwwQkFBSSxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxNQUFNLENBQUMifQ==