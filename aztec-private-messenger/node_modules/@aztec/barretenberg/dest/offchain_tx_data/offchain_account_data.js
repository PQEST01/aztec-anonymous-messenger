import { AliasHash } from '../account_id/index.js';
import { GrumpkinAddress } from '../address/index.js';
import { numToUInt32BE } from '../serialize/index.js';
var DataSizes;
(function (DataSizes) {
    DataSizes[DataSizes["ACCOUNT_PUBLIC_KEY"] = GrumpkinAddress.SIZE] = "ACCOUNT_PUBLIC_KEY";
    DataSizes[DataSizes["ALIAS_HASH"] = AliasHash.SIZE] = "ALIAS_HASH";
    DataSizes[DataSizes["SPENDING_PUBLIC_KEY_1"] = 32] = "SPENDING_PUBLIC_KEY_1";
    DataSizes[DataSizes["SPENDING_PUBLIC_KEY_2"] = 32] = "SPENDING_PUBLIC_KEY_2";
    DataSizes[DataSizes["TX_REF_NO"] = 4] = "TX_REF_NO";
})(DataSizes || (DataSizes = {}));
var DataOffsets;
(function (DataOffsets) {
    DataOffsets[DataOffsets["ACCOUNT_PUBLIC_KEY"] = 0] = "ACCOUNT_PUBLIC_KEY";
    DataOffsets[DataOffsets["ALIAS_HASH"] = DataOffsets.ACCOUNT_PUBLIC_KEY + DataSizes.ACCOUNT_PUBLIC_KEY] = "ALIAS_HASH";
    DataOffsets[DataOffsets["SPENDING_PUBLIC_KEY_1"] = DataOffsets.ALIAS_HASH + DataSizes.ALIAS_HASH] = "SPENDING_PUBLIC_KEY_1";
    DataOffsets[DataOffsets["SPENDING_PUBLIC_KEY_2"] = DataOffsets.SPENDING_PUBLIC_KEY_1 + DataSizes.SPENDING_PUBLIC_KEY_1] = "SPENDING_PUBLIC_KEY_2";
    DataOffsets[DataOffsets["TX_REF_NO"] = DataOffsets.SPENDING_PUBLIC_KEY_2 + DataSizes.SPENDING_PUBLIC_KEY_2] = "TX_REF_NO";
})(DataOffsets || (DataOffsets = {}));
export class OffchainAccountData {
    constructor(accountPublicKey, aliasHash, spendingPublicKey1 = Buffer.alloc(32), spendingPublicKey2 = Buffer.alloc(32), txRefNo = 0) {
        this.accountPublicKey = accountPublicKey;
        this.aliasHash = aliasHash;
        this.spendingPublicKey1 = spendingPublicKey1;
        this.spendingPublicKey2 = spendingPublicKey2;
        this.txRefNo = txRefNo;
        if (spendingPublicKey1.length !== DataSizes.SPENDING_PUBLIC_KEY_1) {
            throw new Error('Expect spendingPublicKey1 to be 32 bytes.');
        }
        if (spendingPublicKey2.length !== DataSizes.SPENDING_PUBLIC_KEY_2) {
            throw new Error('Expect spendingPublicKey2 to be 32 bytes.');
        }
    }
    static fromBuffer(buf) {
        if (buf.length !== OffchainAccountData.SIZE) {
            throw new Error(`Invalid buffer size: ${buf.length} != ${OffchainAccountData.SIZE}`);
        }
        const accountPublicKey = new GrumpkinAddress(buf.slice(DataOffsets.ACCOUNT_PUBLIC_KEY, DataOffsets.ACCOUNT_PUBLIC_KEY + DataSizes.ACCOUNT_PUBLIC_KEY));
        const aliasHash = new AliasHash(buf.slice(DataOffsets.ALIAS_HASH, DataOffsets.ALIAS_HASH + DataSizes.ALIAS_HASH));
        const spendingPublicKey1 = buf.slice(DataOffsets.SPENDING_PUBLIC_KEY_1, DataOffsets.SPENDING_PUBLIC_KEY_1 + DataSizes.SPENDING_PUBLIC_KEY_1);
        const spendingPublicKey2 = buf.slice(DataOffsets.SPENDING_PUBLIC_KEY_2, DataOffsets.SPENDING_PUBLIC_KEY_2 + DataSizes.SPENDING_PUBLIC_KEY_2);
        const txRefNo = buf.readUInt32BE(DataOffsets.TX_REF_NO);
        return new OffchainAccountData(accountPublicKey, aliasHash, spendingPublicKey1, spendingPublicKey2, txRefNo);
    }
    toBuffer() {
        return Buffer.concat([
            this.accountPublicKey.toBuffer(),
            this.aliasHash.toBuffer(),
            this.spendingPublicKey1,
            this.spendingPublicKey2,
            numToUInt32BE(this.txRefNo),
        ]);
    }
}
OffchainAccountData.EMPTY = new OffchainAccountData(GrumpkinAddress.ZERO, AliasHash.ZERO);
OffchainAccountData.SIZE = OffchainAccountData.EMPTY.toBuffer().length;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2ZmY2hhaW5fYWNjb3VudF9kYXRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL29mZmNoYWluX3R4X2RhdGEvb2ZmY2hhaW5fYWNjb3VudF9kYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRXRELElBQUssU0FNSjtBQU5ELFdBQUssU0FBUztJQUNaLDRDQUFxQixlQUFlLENBQUMsSUFBSSx3QkFBQSxDQUFBO0lBQ3pDLG9DQUFhLFNBQVMsQ0FBQyxJQUFJLGdCQUFBLENBQUE7SUFDM0IsNEVBQTBCLENBQUE7SUFDMUIsNEVBQTBCLENBQUE7SUFDMUIsbURBQWEsQ0FBQTtBQUNmLENBQUMsRUFOSSxTQUFTLEtBQVQsU0FBUyxRQU1iO0FBRUQsSUFBSyxXQU1KO0FBTkQsV0FBSyxXQUFXO0lBQ2QseUVBQXNCLENBQUE7SUFDdEIsd0NBQWEsV0FBVyxDQUFDLGtCQUFrQixHQUFHLFNBQVMsQ0FBQyxrQkFBa0IsZ0JBQUEsQ0FBQTtJQUMxRSxtREFBd0IsV0FBVyxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUMsVUFBVSwyQkFBQSxDQUFBO0lBQ3JFLG1EQUF3QixXQUFXLENBQUMscUJBQXFCLEdBQUcsU0FBUyxDQUFDLHFCQUFxQiwyQkFBQSxDQUFBO0lBQzNGLHVDQUFZLFdBQVcsQ0FBQyxxQkFBcUIsR0FBRyxTQUFTLENBQUMscUJBQXFCLGVBQUEsQ0FBQTtBQUNqRixDQUFDLEVBTkksV0FBVyxLQUFYLFdBQVcsUUFNZjtBQUVELE1BQU0sT0FBTyxtQkFBbUI7SUFJOUIsWUFDa0IsZ0JBQWlDLEVBQ2pDLFNBQW9CLEVBQ3BCLHFCQUFxQixNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxF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