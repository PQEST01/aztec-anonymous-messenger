import { GrumpkinAddress } from '../address/index.js';
import { toBigIntBE, toBufferBE } from '../bigint_buffer/index.js';
import { BridgeCallData } from '../bridge_call_data/index.js';
import { numToUInt32BE } from '../serialize/index.js';
import { ViewingKey } from '../viewing_key/index.js';
var DataSizes;
(function (DataSizes) {
    DataSizes[DataSizes["BRIDGE_CALL_DATA"] = BridgeCallData.SIZE] = "BRIDGE_CALL_DATA";
    DataSizes[DataSizes["PARTIAL_STATE"] = 32] = "PARTIAL_STATE";
    DataSizes[DataSizes["PARTIAL_STATE_SECRET_EPH_PUB_KEY"] = GrumpkinAddress.SIZE] = "PARTIAL_STATE_SECRET_EPH_PUB_KEY";
    DataSizes[DataSizes["DEPOSIT_VALUE"] = 32] = "DEPOSIT_VALUE";
    DataSizes[DataSizes["TX_FEE"] = 32] = "TX_FEE";
    DataSizes[DataSizes["VIEWING_KEY"] = ViewingKey.SIZE] = "VIEWING_KEY";
    DataSizes[DataSizes["TX_REF_NO"] = 4] = "TX_REF_NO";
})(DataSizes || (DataSizes = {}));
var DataOffsets;
(function (DataOffsets) {
    DataOffsets[DataOffsets["BRIDGE_CALL_DATA"] = 0] = "BRIDGE_CALL_DATA";
    DataOffsets[DataOffsets["PARTIAL_STATE"] = DataOffsets.BRIDGE_CALL_DATA + DataSizes.BRIDGE_CALL_DATA] = "PARTIAL_STATE";
    DataOffsets[DataOffsets["PARTIAL_STATE_SECRET_EPH_PUB_KEY"] = DataOffsets.PARTIAL_STATE + DataSizes.PARTIAL_STATE] = "PARTIAL_STATE_SECRET_EPH_PUB_KEY";
    DataOffsets[DataOffsets["DEPOSIT_VALUE"] = DataOffsets.PARTIAL_STATE_SECRET_EPH_PUB_KEY + DataSizes.PARTIAL_STATE_SECRET_EPH_PUB_KEY] = "DEPOSIT_VALUE";
    DataOffsets[DataOffsets["TX_FEE"] = DataOffsets.DEPOSIT_VALUE + DataSizes.DEPOSIT_VALUE] = "TX_FEE";
    DataOffsets[DataOffsets["VIEWING_KEY"] = DataOffsets.TX_FEE + DataSizes.TX_FEE] = "VIEWING_KEY";
    DataOffsets[DataOffsets["TX_REF_NO"] = DataOffsets.VIEWING_KEY + DataSizes.VIEWING_KEY] = "TX_REF_NO";
})(DataOffsets || (DataOffsets = {}));
export class OffchainDefiDepositData {
    constructor(bridgeCallData, partialState, partialStateSecretEphPubKey, // the public key from which the partial state's secret may be derived (when combined with a valid account private key).
    depositValue, txFee, viewingKey, // viewing key for the 'claim' note
    txRefNo = 0) {
        this.bridgeCallData = bridgeCallData;
        this.partialState = partialState;
        this.partialStateSecretEphPubKey = partialStateSecretEphPubKey;
        this.depositValue = depositValue;
        this.txFee = txFee;
        this.viewingKey = viewingKey;
        this.txRefNo = txRefNo;
        if (partialState.length !== DataSizes.PARTIAL_STATE) {
            throw new Error('Expect partialState to be 32 bytes.');
        }
        if (viewingKey.isEmpty()) {
            throw new Error('Viewing key cannot be empty.');
        }
    }
    static getViewingKeyBuffer(buf) {
        return buf.slice(DataOffsets.VIEWING_KEY, DataOffsets.VIEWING_KEY + DataSizes.VIEWING_KEY);
    }
    static fromBuffer(buf) {
        if (buf.length !== OffchainDefiDepositData.SIZE) {
            throw new Error('Invalid buffer size.');
        }
        const bridgeCallData = BridgeCallData.fromBuffer(buf.slice(DataOffsets.BRIDGE_CALL_DATA, DataOffsets.BRIDGE_CALL_DATA + DataSizes.BRIDGE_CALL_DATA));
        const partialState = buf.slice(DataOffsets.PARTIAL_STATE, DataOffsets.PARTIAL_STATE + DataSizes.PARTIAL_STATE);
        const partialStateSecretEphPubKey = new GrumpkinAddress(buf.slice(DataOffsets.PARTIAL_STATE_SECRET_EPH_PUB_KEY, DataOffsets.PARTIAL_STATE_SECRET_EPH_PUB_KEY + DataSizes.PARTIAL_STATE_SECRET_EPH_PUB_KEY));
        const depositValue = toBigIntBE(buf.slice(DataOffsets.DEPOSIT_VALUE, DataOffsets.DEPOSIT_VALUE + DataSizes.DEPOSIT_VALUE));
        const txFee = toBigIntBE(buf.slice(DataOffsets.TX_FEE, DataOffsets.TX_FEE + DataSizes.TX_FEE));
        const viewingKey = new ViewingKey(buf.slice(DataOffsets.VIEWING_KEY, DataOffsets.VIEWING_KEY + DataSizes.VIEWING_KEY));
        const txRefNo = buf.readUInt32BE(DataOffsets.TX_REF_NO);
        return new OffchainDefiDepositData(bridgeCallData, partialState, partialStateSecretEphPubKey, depositValue, txFee, viewingKey, txRefNo);
    }
    toBuffer() {
        return Buffer.concat([
            this.bridgeCallData.toBuffer(),
            this.partialState,
            this.partialStateSecretEphPubKey.toBuffer(),
            toBufferBE(this.depositValue, 32),
            toBufferBE(this.txFee, 32),
            this.viewingKey.toBuffer(),
            numToUInt32BE(this.txRefNo),
        ]);
    }
}
OffchainDefiDepositData.EMPTY = new OffchainDefiDepositData(BridgeCallData.ZERO, Buffer.alloc(32), GrumpkinAddress.ZERO, BigInt(0), BigInt(0), new ViewingKey(Buffer.alloc(ViewingKey.SIZE)));
OffchainDefiDepositData.SIZE = OffchainDefiDepositData.EMPTY.toBuffer().length;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2ZmY2hhaW5fZGVmaV9kZXBvc2l0X2RhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvb2ZmY2hhaW5fdHhfZGF0YS9vZmZjaGFpbl9kZWZpX2RlcG9zaXRfZGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNuRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUVyRCxJQUFLLFNBUUo7QUFSRCxXQUFLLFNBQVM7SUFDWiwwQ0FBbUIsY0FBYyxDQUFDLElBQUksc0JBQUEsQ0FBQTtJQUN0Qyw0REFBa0IsQ0FBQTtJQUNsQiwwREFBbUMsZUFBZSxDQUFDLElBQUksc0NBQUEsQ0FBQTtJQUN2RCw0REFBa0IsQ0FBQTtJQUNsQiw4Q0FBVyxDQUFBO0lBQ1gscUNBQWMsVUFBVSxDQUFDLElBQUksaUJBQUEsQ0FBQTtJQUM3QixtREFBYSxDQUFBO0FBQ2YsQ0FBQyxFQVJJLFNBQVMsS0FBVCxTQUFTLFFBUWI7QUFFRCxJQUFLLFdBUUo7QUFSRCxXQUFLLFdBQVc7SUFDZCxxRUFBb0IsQ0FBQTtJQUNwQiwyQ0FBZ0IsV0FBVyxDQUFDLGdCQUFnQixHQUFHLFNBQVMsQ0FBQyxnQkFBZ0IsbUJBQUEsQ0FBQTtJQUN6RSw4REFBbUMsV0FBVyxDQUFDLGFBQWEsR0FBRyxTQUFTLENBQUMsYUFBYSxzQ0FBQSxDQUFBO0lBQ3RGLDJDQUFnQixXQUFXLENBQUMsZ0NBQWdDLEdBQUcsU0FBUyxDQUFDLGdDQUFnQyxtQkFBQSxDQUFBO0lBQ3pHLG9DQUFTLFdBQVcsQ0FBQyxhQUFhLEdBQUcs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