import { EthAddress } from '../address/index.js';
import { TxId } from '../tx_id/index.js';
export var TxSettlementTime;
(function (TxSettlementTime) {
    TxSettlementTime[TxSettlementTime["NEXT_ROLLUP"] = 0] = "NEXT_ROLLUP";
    TxSettlementTime[TxSettlementTime["INSTANT"] = 1] = "INSTANT";
})(TxSettlementTime = TxSettlementTime || (TxSettlementTime = {}));
export var DefiSettlementTime;
(function (DefiSettlementTime) {
    DefiSettlementTime[DefiSettlementTime["DEADLINE"] = 0] = "DEADLINE";
    DefiSettlementTime[DefiSettlementTime["NEXT_ROLLUP"] = 1] = "NEXT_ROLLUP";
    DefiSettlementTime[DefiSettlementTime["INSTANT"] = 2] = "INSTANT";
})(DefiSettlementTime = DefiSettlementTime || (DefiSettlementTime = {}));
export const txToJson = ({ proofData, offchainTxData, depositSignature }) => ({
    proofData: proofData.toString('hex'),
    offchainTxData: offchainTxData.toString('hex'),
    depositSignature: depositSignature ? depositSignature.toString('hex') : undefined,
});
export const txFromJson = ({ proofData, offchainTxData, depositSignature }) => ({
    proofData: Buffer.from(proofData, 'hex'),
    offchainTxData: Buffer.from(offchainTxData, 'hex'),
    depositSignature: depositSignature ? Buffer.from(depositSignature, 'hex') : undefined,
});
export const pendingTxToJson = ({ txId, noteCommitment1, noteCommitment2 }) => ({
    txId: txId.toString(),
    noteCommitment1: noteCommitment1.toString('hex'),
    noteCommitment2: noteCommitment2.toString('hex'),
});
export const pendingTxFromJson = ({ txId, noteCommitment1, noteCommitment2 }) => ({
    txId: TxId.fromString(txId),
    noteCommitment1: Buffer.from(noteCommitment1, 'hex'),
    noteCommitment2: Buffer.from(noteCommitment2, 'hex'),
});
export const initialWorldStateToBuffer = (initialWorldState) => {
    const accountsSizeBuf = Buffer.alloc(4);
    accountsSizeBuf.writeUInt32BE(initialWorldState.initialAccounts.length);
    return Buffer.concat([accountsSizeBuf, initialWorldState.initialAccounts, ...initialWorldState.initialSubtreeRoots]);
};
export const initialWorldStateFromBuffer = (data) => {
    const accountsSize = data.readUInt32BE(0);
    const subTreeStart = 4 + accountsSize;
    const initialWorldState = {
        initialAccounts: data.slice(4, subTreeStart),
        initialSubtreeRoots: [],
    };
    // each sub tree root is 32 bytes
    for (let i = subTreeStart; i < data.length; i += 32) {
        initialWorldState.initialSubtreeRoots.push(data.slice(i, i + 32));
    }
    return initialWorldState;
};
export const depositTxToJson = ({ assetId, value, publicOwner }) => ({
    assetId,
    value: value.toString(),
    publicOwner: publicOwner.toString(),
});
export const depositTxFromJson = ({ assetId, value, publicOwner }) => ({
    assetId,
    value: BigInt(value),
    publicOwner: EthAddress.fromString(publicOwner),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9sbHVwX3Byb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3JvbGx1cF9wcm92aWRlci9yb2xsdXBfcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBbUIsTUFBTSxxQkFBcUIsQ0FBQztBQUlsRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFJekMsTUFBTSxDQUFOLElBQVksZ0JBR1g7QUFIRCxXQUFZLGdCQUFnQjtJQUMxQixxRUFBVyxDQUFBO0lBQ1gsNkRBQU8sQ0FBQTtBQUNULENBQUMsRUFIVyxnQkFBZ0IsR0FBaEIsZ0JBQWdCLEtBQWhCLGdCQUFnQixRQUczQjtBQUVELE1BQU0sQ0FBTixJQUFZLGtCQUlYO0FBSkQsV0FBWSxrQkFBa0I7SUFDNUIsbUVBQVEsQ0FBQTtJQUNSLHlFQUFXLENBQUE7SUFDWCxpRUFBTyxDQUFBO0FBQ1QsQ0FBQyxFQUpXLGtCQUFrQixHQUFsQixrQkFBa0IsS0FBbEIsa0JBQWtCLFFBSTdCO0FBY0QsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQUMsRUFBRSxTQUFTLEVBQUUsY0FBYyxFQUFFLGdCQUFnQixFQUFNLEVBQVUsRUFBRSxDQUFDLENBQUM7SUFDeEYsU0FBUyxFQUFFLFNBQVMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO0lBQ3BDLGNBQWMsRUFBRSxjQUFjLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztJQUM5QyxnQkFBZ0IsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTO0NBQ2xGLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxDQUFDLEVBQUUsU0FBUyxFQUFFLGNBQWMsRUFBRSxnQkFBZ0IsRUFBVSxFQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQzFGLFNBQVMsRUFB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