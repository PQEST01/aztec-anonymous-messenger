import { EthAddress } from '../address/index.js';
import { BlockchainStatus, BlockchainStatusJson } from '../blockchain/index.js';
import { BridgeConfig } from './bridge_config.js';
import { BridgeStatus, BridgeStatusJson } from './bridge_status.js';
import { PrivacySet, PrivacySetJson } from './privacy_set.js';
export * from './bridge_config.js';
export * from './bridge_status.js';
export * from './privacy_set.js';
export interface RuntimeConfig {
    acceptingTxs: boolean;
    useKeyCache: boolean;
    publishInterval: number;
    flushAfterIdle: number;
    gasLimit: number;
    verificationGas: number;
    maxFeeGasPrice: bigint;
    feeGasPriceMultiplier: number;
    feeRoundUpSignificantFigures: number;
    maxFeePerGas: bigint;
    maxPriorityFeePerGas: bigint;
    maxUnsettledTxs: number;
    defaultDeFiBatchSize: number;
    bridgeConfigs: BridgeConfig[];
    feePayingAssetIds: number[];
    privacySets: {
        [key: number]: PrivacySet[];
    };
    rollupBeneficiary?: EthAddress;
    depositLimit: number;
    blacklist?: EthAddress[];
}
export interface RuntimeConfigJson {
    acceptingTxs: boolean;
    useKeyCache: boolean;
    publishInterval: number;
    flushAfterIdle: number;
    gasLimit: number;
    verificationGas: number;
    maxFeeGasPrice: string;
    feeGasPriceMultiplier: number;
    feeRoundUpSignificantFigures: number;
    maxFeePerGas: string;
    maxPriorityFeePerGas: string;
    maxUnsettledTxs: number;
    defaultDeFiBatchSize: number;
    bridgeConfigs: BridgeConfig[];
    feePayingAssetIds: number[];
    privacySets: {
        [key: string]: PrivacySetJson[];
    };
    rollupBeneficiary?: string;
    depositLimit: number;
    blacklist?: string[];
}
export declare const runtimeConfigToJson: ({ maxFeeGasPrice, maxFeePerGas, maxPriorityFeePerGas, privacySets, rollupBeneficiary, blacklist, ...rest }: RuntimeConfig) => RuntimeConfigJson;
export declare const runtimeConfigFromJson: ({ maxFeeGasPrice, maxFeePerGas, maxPriorityFeePerGas, privacySets, rollupBeneficiary, blacklist, ...rest }: RuntimeConfigJson) => RuntimeConfig;
export declare const partialRuntimeConfigFromJson: ({ maxFeeGasPrice, maxFeePerGas, maxPriorityFeePerGas, privacySets, rollupBeneficiary, blacklist, ...rest }: Partial<RuntimeConfigJson>) => Partial<RuntimeConfig>;
export interface RollupProviderStatus {
    version: string;
    blockchainStatus: BlockchainStatus;
    nextPublishTime: Date;
    nextPublishNumber: number;
    numTxsPerRollup: number;
    numTxsInNextRollup: number;
    numUnsettledTxs: number;
    pendingTxCount: number;
    pendingSecondClassTxCount: number;
    runtimeConfig: RuntimeConfig;
    bridgeStatus: BridgeStatus[];
    proverless: boolean;
    rollupSize: number;
    totalTxs: number;
    totalBlocks: number;
}
export interface RollupProviderStatusJson {
    version: string;
    blockchainStatus: BlockchainStatusJson;
    nextPublishTime: string;
    nextPublishNumber: number;
    numTxsPerRollup: number;
    numTxsInNextRollup: number;
    numUnsettledTxs: number;
    pendingTxCount: number;
    pendingSecondClassTxCount: number;
    runtimeConfig: RuntimeConfigJson;
    bridgeStatus: BridgeStatusJson[];
    proverless: boolean;
    rollupSize: number;
    totalTxs: number;
    totalBlocks: number;
}
export declare const rollupProviderStatusToJson: ({ blockchainStatus, nextPublishTime, runtimeConfig, bridgeStatus, ...rest }: RollupProviderStatus) => RollupProviderStatusJson;
export declare const rollupProviderStatusFromJson: ({ blockchainStatus, nextPublishTime, runtimeConfig, bridgeStatus, ...rest }: RollupProviderStatusJson) => RollupProviderStatus;
//# sourceMappingURL=rollup_provider_status.d.ts.map