/// <reference types="node" resolution-mode="require"/>
import { GrumpkinAddress } from '../address/index.js';
import { ServerBlockSource } from '../block_source/index.js';
import { BridgeCallData } from '../bridge_call_data/index.js';
import { Tx } from '../rollup_provider/index.js';
import { BridgePublishQuery, BridgePublishQueryResult } from './bridge_publish_stats_query.js';
import { RollupProvider } from './rollup_provider.js';
export declare class ClientVersionMismatchError extends Error {
    constructor(message: string);
}
export declare function getRollupProviderStatus(baseUrl: string, clientVersion?: string): Promise<import("./rollup_provider_status.js").RollupProviderStatus>;
export declare class ServerRollupProvider extends ServerBlockSource implements RollupProvider {
    constructor(baseUrl: URL, pollInterval?: number, version?: string);
    sendTxs(txs: Tx[]): Promise<any>;
    getTxFees(assetId: number): Promise<import("../asset/index.js").AssetValue[][]>;
    getDefiFees(bridgeCallData: BridgeCallData): Promise<import("../asset/index.js").AssetValue[]>;
    queryDefiPublishStats(query: BridgePublishQuery): Promise<BridgePublishQueryResult>;
    getStatus(): Promise<import("./rollup_provider_status.js").RollupProviderStatus>;
    getPendingTxs(): Promise<any>;
    getPendingNoteNullifiers(): Promise<Buffer[]>;
    getPendingDepositTxs(): Promise<any>;
    clientLog(log: any): Promise<void>;
    clientConsoleLog(log: any): Promise<void>;
    getInitialWorldState(): Promise<import("./rollup_provider.js").InitialWorldState>;
    isAccountRegistered(accountPublicKey: GrumpkinAddress): Promise<boolean>;
    isAliasRegistered(alias: string): Promise<boolean>;
    isAliasRegisteredToAccount(accountPublicKey: GrumpkinAddress, alias: string): Promise<boolean>;
    getAccountRegistrationRollupId(accountPublicKey: GrumpkinAddress): Promise<number>;
    /**
     * Submits a request to baseUrl at the specified path
     * If data is provided, a POST is sent with that data as the body.
     * The response is checked for errors and handled accordingly.
     * @param path Path to source at baseUrl
     * @param data Data to be submitted in POST request
     * @returns fetch response
     * @throws Error when response is undefined or contains an error status
     */
    private fetch;
}
//# sourceMappingURL=server_rollup_provider.d.ts.map