import { EthAddress } from '../address/index.js';
import { blockchainStatusFromJson, blockchainStatusToJson, } from '../blockchain/index.js';
import { bridgeStatusFromJson, bridgeStatusToJson } from './bridge_status.js';
import { privacySetsFromJson, privacySetsToJson } from './privacy_set.js';
export * from './bridge_config.js';
export * from './bridge_status.js';
export * from './privacy_set.js';
export const runtimeConfigToJson = ({ maxFeeGasPrice, maxFeePerGas, maxPriorityFeePerGas, privacySets, rollupBeneficiary, blacklist, ...rest }) => ({
    ...rest,
    maxFeeGasPrice: maxFeeGasPrice.toString(),
    maxFeePerGas: maxFeePerGas.toString(),
    maxPriorityFeePerGas: maxPriorityFeePerGas.toString(),
    privacySets: privacySetsToJson(privacySets),
    rollupBeneficiary: rollupBeneficiary ? rollupBeneficiary.toLowerCaseAddress() : undefined,
    blacklist: blacklist ? blacklist.map(x => x.toLowerCaseAddress()) : undefined,
});
export const runtimeConfigFromJson = ({ maxFeeGasPrice, maxFeePerGas, maxPriorityFeePerGas, privacySets, rollupBeneficiary, blacklist, ...rest }) => ({
    ...rest,
    maxFeeGasPrice: BigInt(maxFeeGasPrice),
    maxFeePerGas: BigInt(maxFeePerGas),
    maxPriorityFeePerGas: BigInt(maxPriorityFeePerGas),
    privacySets: privacySetsFromJson(privacySets),
    rollupBeneficiary: rollupBeneficiary ? EthAddress.fromString(rollupBeneficiary) : undefined,
    blacklist: blacklist ? blacklist.map(x => EthAddress.fromString(x)) : undefined,
});
export const partialRuntimeConfigFromJson = ({ maxFeeGasPrice, maxFeePerGas, maxPriorityFeePerGas, privacySets, rollupBeneficiary, blacklist, ...rest }) => ({
    ...rest,
    ...(maxFeeGasPrice !== undefined ? { maxFeeGasPrice: BigInt(maxFeeGasPrice) } : {}),
    ...(maxFeePerGas !== undefined ? { maxFeePerGas: BigInt(maxFeePerGas) } : {}),
    ...(maxPriorityFeePerGas !== undefined ? { maxPriorityFeePerGas: BigInt(maxPriorityFeePerGas) } : {}),
    ...(privacySets ? { privacySets: privacySetsFromJson(privacySets) } : {}),
    ...(rollupBeneficiary ? { rollupBeneficiary: EthAddress.fromString(rollupBeneficiary) } : {}),
    ...(blacklist ? { blacklist: blacklist.map(x => EthAddress.fromString(x)) } : {}),
});
export const rollupProviderStatusToJson = ({ blockchainStatus, nextPublishTime, runtimeConfig, bridgeStatus, ...rest }) => ({
    ...rest,
    blockchainStatus: blockchainStatusToJson(blockchainStatus),
    nextPublishTime: nextPublishTime.toISOString(),
    runtimeConfig: runtimeConfigToJson(runtimeConfig),
    bridgeStatus: bridgeStatus.map(bridgeStatusToJson),
});
export const rollupProviderStatusFromJson = ({ blockchainStatus, nextPublishTime, runtimeConfig, bridgeStatus, ...rest }) => ({
    ...rest,
    blockchainStatus: blockchainStatusFromJson(blockchainStatus),
    nextPublishTime: new Date(nextPublishTime),
    runtimeConfig: runtimeConfigFromJson(runtimeConfig),
    bridgeStatus: bridgeStatus.map(bridgeStatusFromJson),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9sbHVwX3Byb3ZpZGVyX3N0YXR1cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yb2xsdXBfcHJvdmlkZXIvcm9sbHVwX3Byb3ZpZGVyX3N0YXR1cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDakQsT0FBTyxFQUVMLHdCQUF3QixFQUV4QixzQkFBc0IsR0FDdkIsTUFBTSx3QkFBd0IsQ0FBQztBQUVoQyxPQUFPLEVBQWdCLG9CQUFvQixFQUFvQixrQkFBa0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzlHLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxpQkFBaUIsRUFBOEIsTUFBTSxrQkFBa0IsQ0FBQztBQUV0RyxjQUFjLG9CQUFvQixDQUFDO0FBQ25DLGNBQWMsb0JBQW9CLENBQUM7QUFDbkMsY0FBYyxrQkFBa0IsQ0FBQztBQWlFakMsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxFQUNsQyxjQUFjLEVBQ2QsWUFBWSxFQUNaLG9CQUFvQixFQUNwQixXQUFXLEVBQ1gsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxHQUFHLElBQUksRUFDTyxFQUFxQixFQUFFLENBQUMsQ0FBQztJQUN2QyxHQUFHLElBQUk7SUFDUCxjQUFjLEVBQUUsY0FBYyxDQUFDLFFBQVEsRUFBRTtJQUN6QyxZQUFZLEVBQUUsWUFBWSxDQUFDLFFBQVEsRUFBRTtJQUNyQyxvQkFBb0IsRUFBRSxvQkFBb0IsQ0FBQyxRQUFRLEVBQUU7SUFDckQsV0FBVyxFQUFFLGlCQUFpQixDQUFDLFdBQVcsQ0FBQztJQUMzQyxpQkFBaUIsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUztJQUN6RixTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FB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