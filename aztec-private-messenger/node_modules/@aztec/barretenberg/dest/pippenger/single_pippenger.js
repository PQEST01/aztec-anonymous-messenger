import { Transfer } from '../transport/index.js';
export class SinglePippenger {
    constructor(wasm) {
        this.wasm = wasm;
    }
    async init(crsData) {
        this.numPoints = crsData.length / 64;
        // The allocation is as per the point_table_size in pippenger.hpp.
        // The crs data does not have the affine_one point at the start.
        // affine_one is filled in at the first position by new_pippenger before building the point table.
        // The last point is discarded, so we still end up with numPoints points.
        const crsPtr = await this.wasm.call('bbmalloc', 64 * (this.numPoints * 2 + 16));
        await this.wasm.transferToHeap(crsData.slice(0, -64), crsPtr + 64);
        this.pippengerPtr = await this.wasm.call('new_pippenger', crsPtr, this.numPoints);
    }
    async destroy() {
        await this.wasm.call('delete_pippenger', this.pippengerPtr);
    }
    async pippengerUnsafe(scalars, from, range) {
        const mem = await this.wasm.call('bbmalloc', scalars.length);
        await this.wasm.transferToHeap(Transfer(scalars, [scalars.buffer]), mem);
        await this.wasm.call('pippenger_unsafe', this.pippengerPtr, mem, from, range, 0);
        await this.wasm.call('bbfree', mem);
        return Buffer.from(await this.wasm.sliceMemory(0, 96));
    }
    async sumElements(buffer) {
        const mem = await this.wasm.call('bbmalloc', buffer.length);
        await this.wasm.transferToHeap(buffer, mem);
        await this.wasm.call('g1_sum', mem, buffer.length / 96, 0);
        await this.wasm.call('bbfree', mem);
        return Buffer.from(await this.wasm.sliceMemory(0, 96));
    }
    getPointer() {
        return this.pippengerPtr;
    }
    getWorker() {
        return this.wasm;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2luZ2xlX3BpcHBlbmdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9waXBwZW5nZXIvc2luZ2xlX3BpcHBlbmdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFakQsTUFBTSxPQUFPLGVBQWU7SUFJMUIsWUFBb0IsSUFBMkM7UUFBM0MsU0FBSSxHQUFKLElBQUksQ0FBdUM7SUFBRyxDQUFDO0lBRTVELEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBbUI7UUFDbkMsSUFBSSxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNyQyxrRUFBa0U7UUFDbEUsZ0VBQWdFO1FBQ2hFLGtHQUFrRztRQUNsRyx5RUFBeUU7UUFDekUsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNoRixNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ25FLElBQUksQ0FBQyxZQUFZLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNwRixDQUFDO0lBRU0sS0FBSyxDQUFDLE9BQU87UUFDbEIsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUVNLEtBQUssQ0FBQyxlQUFlLENBQUMsT0FBbUIsRUFBRSxJQUFZLEVBQUUsS0FBYTtRQUMzRSxNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0QsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDaEYsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2pGLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3BDLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFTSxLQUFLLENBQUMsV0FBVyxDQUFDLE1BQWtCO1FBQ3pDLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1RCxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztRQUM1QyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsTUFBTSxDQUFDLE1BQU0sR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDM0QsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDcEMsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVNLFVBQVU7UUFDZixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDM0IsQ0FBQztJQUVNLFNBQVM7UUFDZCxPQUFPLElBQUksQ0FBQyxJQUEwQixDQUFDO0lBQ3pDLENBQUM7Q0FDRiJ9