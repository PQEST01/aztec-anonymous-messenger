import { toBigIntBE, toBufferBE } from '../bigint_buffer/index.js';
import { randomBytes } from '../crypto/index.js';
import { numToUInt32BE } from '../serialize/index.js';
export class ViewingKeyData {
    constructor(value, assetId, accountRequired, creatorPubKey) {
        this.value = value;
        this.assetId = assetId;
        this.accountRequired = accountRequired;
        this.creatorPubKey = creatorPubKey;
        if (creatorPubKey.length !== 32) {
            throw new Error('Invalid note secret buffer.');
        }
    }
    static fromBuffer(buf) {
        if (buf.length !== ViewingKeyData.SIZE) {
            throw new Error('Invalid data buffer.');
        }
        const value = toBigIntBE(buf.slice(0, 32));
        const assetId = buf.readUInt32BE(32);
        const accountRequired = !!buf.readUInt32BE(36);
        const creatorPubKey = buf.slice(40, 72);
        return new ViewingKeyData(value, assetId, accountRequired, creatorPubKey);
    }
    static random() {
        return ViewingKeyData.fromBuffer(randomBytes(ViewingKeyData.SIZE));
    }
    toBuffer() {
        return Buffer.concat([
            toBufferBE(this.value, 32),
            numToUInt32BE(this.assetId),
            numToUInt32BE(+this.accountRequired),
            this.creatorPubKey,
        ]);
    }
}
ViewingKeyData.SIZE = 72;
ViewingKeyData.DECRYPTED_SIZE = 73; // Decrypted buffer has 1 extra byte to indicate if the decryption was successful or not.
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlld2luZ19rZXlfZGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92aWV3aW5nX2tleS92aWV3aW5nX2tleV9kYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDbkUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUV0RCxNQUFNLE9BQU8sY0FBYztJQW9CekIsWUFDa0IsS0FBYSxFQUNiLE9BQWUsRUFDZixlQUF3QixFQUN4QixhQUFxQjtRQUhyQixVQUFLLEdBQUwsS0FBSyxDQUFRO1FBQ2IsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUNmLG9CQUFlLEdBQWYsZUFBZSxDQUFTO1FBQ3hCLGtCQUFhLEdBQWIsYUFBYSxDQUFRO1FBRXJDLElBQUksYUFBYSxDQUFDLE1BQU0sS0FBSyxFQUFFLEVBQUU7WUFDL0IsTUFBTSxJQUFJLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO1NBQ2hEO0lBQ0gsQ0FBQztJQXpCRCxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQVc7UUFDM0IsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLGNBQWMsQ0FBQyxJQUFJLEVBQUU7WUFDdEMsTUFBTSxJQUFJLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1NBQ3pDO1FBRUQsTUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDM0MsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNyQyxNQUFNLGVBQWUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMvQyxNQUFNLGFBQWEsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN4QyxPQUFPLElBQUksY0FBYyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUFFRCxNQUFNLENBQUMsTUFBTTtRQUNYLE9BQU8sY0FBYyxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDckUsQ0FBQztJQWFNLFFBQVE7UUFDYixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUM7WUFDbkIsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO1lBQzFCLGFBQWEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQzNCLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUM7WUFDcEMsSUFBSSxDQUFDLGFBQWE7U0FDbkIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7QUFyQ00sbUJBQUksR0FBRyxFQUFFLENBQUM7QUFDViw2QkFBYyxHQUFHLEVBQUUsQ0FBQyxDQUFDLHlGQUF5RiJ9