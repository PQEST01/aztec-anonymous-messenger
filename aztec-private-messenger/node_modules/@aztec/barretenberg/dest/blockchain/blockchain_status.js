import { EthAddress } from '../address/index.js';
// TODO: Move to TxType module.
export var TxType;
(function (TxType) {
    TxType[TxType["DEPOSIT"] = 0] = "DEPOSIT";
    TxType[TxType["TRANSFER"] = 1] = "TRANSFER";
    TxType[TxType["WITHDRAW_TO_WALLET"] = 2] = "WITHDRAW_TO_WALLET";
    TxType[TxType["WITHDRAW_HIGH_GAS"] = 3] = "WITHDRAW_HIGH_GAS";
    TxType[TxType["ACCOUNT"] = 4] = "ACCOUNT";
    TxType[TxType["DEFI_DEPOSIT"] = 5] = "DEFI_DEPOSIT";
    TxType[TxType["DEFI_CLAIM"] = 6] = "DEFI_CLAIM";
})(TxType = TxType || (TxType = {}));
export const numTxTypes = 7;
export function isDefiDepositTx(txType) {
    return txType === TxType.DEFI_DEPOSIT;
}
export function isAccountTx(txType) {
    return txType === TxType.ACCOUNT;
}
export const blockchainAssetToJson = ({ address, ...asset }) => ({
    ...asset,
    address: address.toLowerCaseAddress(),
});
export const blockchainAssetFromJson = ({ address, ...asset }) => ({
    ...asset,
    address: EthAddress.fromString(address),
});
export const blockchainBridgeToJson = ({ address, ...bridge }) => ({
    ...bridge,
    address: address.toLowerCaseAddress(),
});
export const blockchainBridgeFromJson = ({ address, ...bridge }) => ({
    ...bridge,
    address: EthAddress.fromString(address),
});
export function blockchainStatusToJson(status) {
    return {
        ...status,
        rollupContractAddress: status.rollupContractAddress.toLowerCaseAddress(),
        permitHelperContractAddress: status.permitHelperContractAddress.toLowerCaseAddress(),
        verifierContractAddress: status.verifierContractAddress.toLowerCaseAddress(),
        bridgeDataProvider: status.bridgeDataProvider.toLowerCaseAddress(),
        dataRoot: status.dataRoot.toString('hex'),
        nullRoot: status.nullRoot.toString('hex'),
        rootRoot: status.rootRoot.toString('hex'),
        defiRoot: status.defiRoot.toString('hex'),
        defiInteractionHashes: status.defiInteractionHashes.map(v => v.toString('hex')),
        assets: status.assets.map(blockchainAssetToJson),
        bridges: status.bridges.map(blockchainBridgeToJson),
    };
}
export function blockchainStatusFromJson(json) {
    return {
        ...json,
        rollupContractAddress: EthAddress.fromString(json.rollupContractAddress),
        permitHelperContractAddress: EthAddress.fromString(json.permitHelperContractAddress),
        verifierContractAddress: EthAddress.fromString(json.verifierContractAddress),
        bridgeDataProvider: EthAddress.fromString(json.bridgeDataProvider),
        dataRoot: Buffer.from(json.dataRoot, 'hex'),
        nullRoot: Buffer.from(json.nullRoot, 'hex'),
        rootRoot: Buffer.from(json.rootRoot, 'hex'),
        defiRoot: Buffer.from(json.defiRoot, 'hex'),
        defiInteractionHashes: json.defiInteractionHashes.map(f => Buffer.from(f, 'hex')),
        assets: json.assets.map(blockchainAssetFromJson),
        bridges: json.bridges.map(blockchainBridgeFromJson),
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2tjaGFpbl9zdGF0dXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYmxvY2tjaGFpbi9ibG9ja2NoYWluX3N0YXR1cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFPakQsK0JBQStCO0FBQy9CLE1BQU0sQ0FBTixJQUFZLE1BUVg7QUFSRCxXQUFZLE1BQU07SUFDaEIseUNBQU8sQ0FBQTtJQUNQLDJDQUFRLENBQUE7SUFDUiwrREFBa0IsQ0FBQTtJQUNsQiw2REFBaUIsQ0FBQTtJQUNqQix5Q0FBTyxDQUFBO0lBQ1AsbURBQVksQ0FBQTtJQUNaLCtDQUFVLENBQUE7QUFDWixDQUFDLEVBUlcsTUFBTSxHQUFOLE1BQU0sS0FBTixNQUFNLFFBUWpCO0FBQ0QsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsQ0FBQztBQUU1QixNQUFNLFVBQVUsZUFBZSxDQUFDLE1BQWM7SUFDNUMsT0FBTyxNQUFNLEtBQUssTUFBTSxDQUFDLFlBQVksQ0FBQztBQUN4QyxDQUFDO0FBRUQsTUFBTSxVQUFVLFdBQVcsQ0FBQyxNQUFjO0lBQ3hDLE9BQU8sTUFBTSxLQUFLLE1BQU0sQ0FBQyxPQUFPLENBQUM7QUFDbkMsQ0FBQztBQVlELE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLENBQUMsRUFBRSxPQUFPLEVBQUUsR0FBRyxLQUFLLEVBQW1CLEVBQXVCLEVBQUUsQ0FBQyxDQUFDO0lBQ3JHLEdBQUcsS0FBSztJQUNSLE9BQU8sRUFBRSxPQUFPLENBQUMsa0JBQWtCLEVBQUU7Q0FDdEMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsQ0FBQyxFQUFFLE9BQU8sRUFBRSxHQUFHLEtBQUssRUFBdUIsRUFBbUIsRUFBRSxDQUFDLENBQUM7SUFDdkcsR0FBRyxLQUFLO0lBQ1IsT0FBTyxFQUFFLFVBQVUsQ0FBQyxVQUFVLENBQUMs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