import { EthAddress } from '../address/index.js';
import { EthereumProvider } from './ethereum_provider.js';
import { TxHash } from './tx_hash.js';
export interface EthereumBlock {
    baseFeePerGas: bigint;
}
export declare class EthereumRpc {
    protected provider: EthereumProvider;
    constructor(provider: EthereumProvider);
    blockNumber(): Promise<number>;
    getChainId(): Promise<number>;
    getAccounts(): Promise<EthAddress[]>;
    getTransactionCount(addr: EthAddress): Promise<number>;
    getBalance(addr: EthAddress): Promise<bigint>;
    /**
     * TODO: Return proper type with converted properties.
     */
    getTransactionByHash(txHash: TxHash): Promise<any>;
    /**
     * TODO: Return proper type with converted properties.
     * For now just baseFeePerGas.
     */
    getBlockByNumber(numberOrTag: number | 'latest' | 'earliest' | 'pending', fullTxs?: boolean): Promise<EthereumBlock>;
}
//# sourceMappingURL=ethereum_rpc.d.ts.map