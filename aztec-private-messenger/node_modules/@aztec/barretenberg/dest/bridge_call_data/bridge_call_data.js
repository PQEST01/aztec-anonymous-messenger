import { isVirtualAsset } from '../asset/index.js';
import { toBigIntBE, toBufferBE } from '../bigint_buffer/index.js';
import { BitConfig } from './bit_config.js';
import { ADDRESS_BIT_LEN, ADDRESS_OFFSET, AUX_DATA_LEN, AUX_DATA_OFFSET, BITCONFIG_LEN, BITCONFIG_OFFSET, INPUT_ASSET_ID_A_LEN, INPUT_ASSET_ID_A_OFFSET, INPUT_ASSET_ID_B_LEN, INPUT_ASSET_ID_B_OFFSET, OUTPUT_ASSET_ID_A_LEN, OUTPUT_ASSET_ID_A_OFFSET, OUTPUT_ASSET_ID_B_LEN, OUTPUT_ASSET_ID_B_OFFSET, } from './bridge_call_data_config.js';
const randomInt = (to = 2 ** 30 - 1) => Math.floor(Math.random() * (to + 1));
const extractBigInt = (val, offset, size) => (val >> BigInt(offset)) & ((BigInt(1) << BigInt(size)) - BigInt(1));
export class BridgeCallData {
    constructor(bridgeAddressId, inputAssetIdA, outputAssetIdA, inputAssetIdB, outputAssetIdB, auxData = BigInt(0)) {
        this.bridgeAddressId = bridgeAddressId;
        this.inputAssetIdA = inputAssetIdA;
        this.outputAssetIdA = outputAssetIdA;
        this.inputAssetIdB = inputAssetIdB;
        this.outputAssetIdB = outputAssetIdB;
        this.auxData = auxData;
        this.bitConfig = new BitConfig(inputAssetIdB !== undefined, outputAssetIdB !== undefined);
    }
    static random() {
        return new BridgeCallData(randomInt(), randomInt(), randomInt(), randomInt(), randomInt(), BigInt(randomInt()));
    }
    static fromBigInt(val) {
        const bridgeAddressId = Number(extractBigInt(val, ADDRESS_OFFSET, ADDRESS_BIT_LEN));
        const inputAssetIdA = Number(extractBigInt(val, INPUT_ASSET_ID_A_OFFSET, INPUT_ASSET_ID_A_LEN));
        const outputAssetIdA = Number(extractBigInt(val, OUTPUT_ASSET_ID_A_OFFSET, OUTPUT_ASSET_ID_A_LEN));
        const inputAssetIdB = Number(extractBigInt(val, INPUT_ASSET_ID_B_OFFSET, INPUT_ASSET_ID_B_LEN));
        const outputAssetIdB = Number(extractBigInt(val, OUTPUT_ASSET_ID_B_OFFSET, OUTPUT_ASSET_ID_B_LEN));
        const auxData = extractBigInt(val, AUX_DATA_OFFSET, AUX_DATA_LEN);
        const bitConfig = BitConfig.fromBigInt(BigInt(extractBigInt(val, BITCONFIG_OFFSET, BITCONFIG_LEN)));
        if (!bitConfig.secondInputInUse && inputAssetIdB) {
            throw new Error('Inconsistent second input.');
        }
        if (!bitConfig.secondOutputInUse && outputAssetIdB) {
            throw new Error('Inconsistent second output.');
        }
        return new BridgeCallData(bridgeAddressId, inputAssetIdA, outputAssetIdA, bitConfig.secondInputInUse ? inputAssetIdB : undefined, bitConfig.secondOutputInUse ? outputAssetIdB : undefined, auxData);
    }
    static fromBuffer(buf) {
        if (buf.length !== 32) {
            throw new Error('Invalid buffer.');
        }
        return BridgeCallData.fromBigInt(toBigIntBE(buf));
    }
    static fromString(str) {
        return BridgeCallData.fromBuffer(Buffer.from(str.replace(/^0x/i, ''), 'hex'));
    }
    get firstInputVirtual() {
        return isVirtualAsset(this.inputAssetIdA);
    }
    get secondInputVirtual() {
        return !!this.inputAssetIdB && isVirtualAsset(this.inputAssetIdB);
    }
    get firstOutputVirtual() {
        return isVirtualAsset(this.outputAssetIdA);
    }
    get secondOutputVirtual() {
        return !!this.outputAssetIdB && isVirtualAsset(this.outputAssetIdB);
    }
    get secondInputInUse() {
        return this.bitConfig.secondInputInUse;
    }
    get secondOutputInUse() {
        return this.bitConfig.secondOutputInUse;
    }
    get numInputAssets() {
        return this.bitConfig.secondInputInUse ? 2 : 1;
    }
    get numOutputAssets() {
        return this.bitConfig.secondOutputInUse ? 2 : 1;
    }
    toBigInt() {
        return (BigInt(this.bridgeAddressId) +
            (BigInt(this.inputAssetIdA) << BigInt(INPUT_ASSET_ID_A_OFFSET)) +
            (BigInt(this.inputAssetIdB || 0) << BigInt(INPUT_ASSET_ID_B_OFFSET)) +
            (BigInt(this.outputAssetIdA) << BigInt(OUTPUT_ASSET_ID_A_OFFSET)) +
            (BigInt(this.outputAssetIdB || 0) << BigInt(OUTPUT_ASSET_ID_B_OFFSET)) +
            (this.bitConfig.toBigInt() << BigInt(BITCONFIG_OFFSET)) +
            (BigInt(this.auxData) << BigInt(AUX_DATA_OFFSET)));
    }
    toBuffer() {
        return toBufferBE(this.toBigInt(), 32);
    }
    toString() {
        return `0x${this.toBuffer().toString('hex')}`;
    }
    equals(id) {
        return id.toBuffer().equals(this.toBuffer());
    }
}
BridgeCallData.ZERO = new BridgeCallData(0, 0, 0);
BridgeCallData.SIZE = 32;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJpZGdlX2NhbGxfZGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9icmlkZ2VfY2FsbF9kYXRhL2JyaWRnZV9jYWxsX2RhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDbkUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzVDLE9BQU8sRUFDTCxlQUFlLEVBQ2YsY0FBYyxFQUNkLFlBQVksRUFDWixlQUFlLEVBQ2YsYUFBYSxFQUNiLGdCQUFnQixFQUNoQixvQkFBb0IsRUFDcEIsdUJBQXVCLEVBQ3ZCLG9CQUFvQixFQUNwQix1QkFBdUIsRUFDdkIscUJBQXFCLEVBQ3JCLHdCQUF3QixFQUN4QixxQkFBcUIsRUFDckIsd0JBQXdCLEdBQ3pCLE1BQU0sOEJBQThCLENBQUM7QUFFdEMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFN0UsTUFBTSxhQUFhLEdBQUcsQ0FBQyxHQUFXLEVBQUUsTUFBYyxFQUFFLElBQVksRUFBRSxFQUFFLENBQ2xFLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFdEUsTUFBTSxPQUFPLGNBQWM7SUFNekIsWUFDa0IsZUFBdUIsRUFDdkIsYUFBcUIsRUFDckIs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