import { GrumpkinAddress } from '../address/index.js';
import { ViewingKey, ViewingKeyData } from '../viewing_key/index.js';
import { DecryptedNote } from './decrypted_note.js';
import { deriveNoteSecret } from './derive_note_secret.js';
export const batchDecryptNotes = async (viewingKeys, privateKey, noteDecryptor, grumpkin) => {
    const dataBufs = await noteDecryptor.batchDecryptNotes(viewingKeys, privateKey);
    const notes = [];
    // For each note in the buffer of decrypted notes.
    for (let i = 0, startIndex = 0; startIndex < dataBufs.length; ++i, startIndex += ViewingKeyData.DECRYPTED_SIZE) {
        // Slice the individual note out the buffer.
        const dataBuf = dataBufs.slice(startIndex, startIndex + ViewingKeyData.DECRYPTED_SIZE);
        // If we sliced some data, and the "successfully decrypted" byte is set...
        if (dataBuf[0]) {
            // Extract the ephemeral public key from the end of viewing key data.
            const ephPubKey = new GrumpkinAddress(viewingKeys.slice((i + 1) * ViewingKey.SIZE - 64, (i + 1) * ViewingKey.SIZE));
            const noteSecret = deriveNoteSecret(ephPubKey, privateKey, grumpkin);
            const data = ViewingKeyData.fromBuffer(dataBuf.slice(1));
            notes[i] = new DecryptedNote(data, ephPubKey, noteSecret);
        }
    }
    return notes;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmF0Y2hfZGVjcnlwdF9ub3Rlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ub3RlX2FsZ29yaXRobXMvYmF0Y2hfZGVjcnlwdF9ub3Rlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFdEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDcEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFHM0QsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsS0FBSyxFQUNwQyxXQUFtQixFQUNuQixVQUFrQixFQUNsQixhQUE0QixFQUM1QixRQUFrQixFQUNsQixFQUFFO0lBQ0YsTUFBTSxRQUFRLEdBQUcsTUFBTSxhQUFhLENBQUMsaUJBQWlCLENBQUMsV0FBVyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ2hGLE1BQU0sS0FBSyxHQUFrQyxFQUFFLENBQUM7SUFFaEQsa0RBQWtEO0lBQ2xELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLFVBQVUsR0FBRyxDQUFDLEVBQUUsVUFBVSxHQUFHLFFBQVEsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUUsVUFBVSxJQUFJLGNBQWMsQ0FBQyxjQUFjLEVBQUU7UUFDOUcsNENBQTRDO1FBQzVDLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLFVBQVUsR0FBRyxjQUFjLENBQUMsY0FBYyxDQUFDLENBQUM7UUFFdkYsMEVBQTBFO1FBQzFFLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ2QscUVBQXFFO1lBQ3JFLE1BQU0sU0FBUyxHQUFHLElBQUksZUFBZSxDQUNuQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxJQUFJLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FDN0UsQ0FBQztZQUNGLE1BQU0sVUFBVSxHQUFHLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDckUsTUFBTSxJQUFJLEdBQUcsY0FBYyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekQsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksYUFBYSxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsVUFBVSxDQUFDLENBQUM7U0FDM0Q7S0FDRjtJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQyxDQUFDIn0=