import { HashPath } from './hash_path.js';
/**
 * An 'in-memory' implementation of an immutable Merkle Tree
 * Is provided a set of values (size must be a power of 2) and hashes them into a tree
 * Will then provide the root, size and hash path on request
 */
export class MemoryMerkleTree {
    constructor(notes, hasher) {
        this.notes = notes;
        this.hasher = hasher;
        this.hashes = [];
        const isPowerOf2 = (v) => v && !(v & (v - 1));
        if (!isPowerOf2(notes.length)) {
            throw new Error('MemoryMerkleTree can only handle powers of 2.');
        }
    }
    getHashPath(index) {
        if (index < 0 || index >= this.notes.length) {
            throw new Error('Index out of bounds');
        }
        if (!Number.isInteger(index)) {
            throw new Error('Index invalid');
        }
        const hashPath = [];
        let layerSize = this.notes.length;
        let offset = 0;
        while (layerSize > 1) {
            const hashIndex = index + offset;
            offset += layerSize;
            const hashes = index % 2
                ? [this.hashes[hashIndex - 1], this.hashes[hashIndex]]
                : [this.hashes[hashIndex], this.hashes[hashIndex + 1]];
            hashPath.push(hashes);
            index >>= 1;
            layerSize >>= 1;
        }
        return new HashPath(hashPath);
    }
    getRoot() {
        return this.hashes[this.hashes.length - 1];
    }
    getSize() {
        return this.notes.length;
    }
    static async new(notes, hasher) {
        const tree = new MemoryMerkleTree(notes, hasher);
        await tree.buildTree();
        return tree;
    }
    async buildTree() {
        this.hashes = await this.hasher.hashToTree(this.notes);
    }
}
MemoryMerkleTree.ZERO_ELEMENT = Buffer.from('0000000000000000000000000000000000000000000000000000000000000000', 'hex');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVtb3J5X21lcmtsZV90cmVlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21lcmtsZV90cmVlL21lbW9yeV9tZXJrbGVfdHJlZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFMUM7Ozs7R0FJRztBQUNILE1BQU0sT0FBTyxnQkFBZ0I7SUFJM0IsWUFBNEIsS0FBZSxFQUFVLE1BQWM7UUFBdkMsVUFBSyxHQUFMLEtBQUssQ0FBVTtRQUFVLFdBQU0sR0FBTixNQUFNLENBQVE7UUFIM0QsV0FBTSxHQUFhLEVBQUUsQ0FBQztRQUk1QixNQUFNLFVBQVUsR0FBRyxDQUFDLENBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUM3QixNQUFNLElBQUksS0FBSyxDQUFDLCtDQUErQyxDQUFDLENBQUM7U0FDbEU7SUFDSCxDQUFDO0lBRU0sV0FBVyxDQUFDLEtBQWE7UUFDOUIsSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUMzQyxNQUFNLElBQUksS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUM7U0FDeEM7UUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUM1QixNQUFNLElBQUksS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1NBQ2xDO1FBQ0QsTUFBTSxRQUFRLEdBQWUsRUFBRSxDQUFDO1FBQ2hDLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO1FBQ2xDLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQztRQUNmLE9BQU8sU0FBUyxHQUFHLENBQUMsRUFBRTtZQUNwQixNQUFNLFNBQVMsR0FBRyxLQUFLLEdBQUcsTUFBTSxDQUFDO1lBQ2pDLE1BQU0sSUFBSSxTQUFTLENBQUM7WUFDcEIsTUFBTSxNQUFNLEdBQ1YsS0FBSyxHQUFHLENBQUM7Z0JBQ1AsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFDdEQsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNELFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDdEIsS0FBSyxLQUFLLENBQUMsQ0FBQztZQUNaLFNBQVMsS0FBSyxDQUFDLENBQUM7U0FDakI7UUFDRCxPQUFPLElBQUksUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFTSxPQUFPO1FBQ1osT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFTSxPQUFPO1FBQ1osT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztJQUMzQixDQUFDO0lBRU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBZSxFQUFFLE1BQWM7UUFDckQsTUFBTSxJQUFJLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDakQsTUFBTSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDdkIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU8sS0FBSyxDQUFDLFNBQVM7UUFDckIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN6RCxDQUFDOztBQWpEYSw2QkFBWSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsa0VBQWtFLEVBQUUsS0FBSyxDQUFDLENBQUMifQ==