import { Transfer } from '../transport/index.js';
export class SingleFft {
    constructor(wasm) {
        this.wasm = wasm;
    }
    async init(circuitSize) {
        this.domainPtr = await this.wasm.call('new_evaluation_domain', circuitSize);
    }
    async destroy() {
        await this.wasm.call('delete_evaluation_domain', this.domainPtr);
    }
    async fft(coefficients, constant) {
        const circuitSize = coefficients.length / 32;
        const newPtr = await this.wasm.call('bbmalloc', coefficients.length);
        await this.wasm.transferToHeap(Transfer(coefficients, [coefficients.buffer]), newPtr);
        await this.wasm.transferToHeap(Transfer(constant, [constant.buffer]), 0);
        await this.wasm.call('coset_fft_with_generator_shift', newPtr, 0, this.domainPtr);
        const result = await this.wasm.sliceMemory(newPtr, newPtr + circuitSize * 32);
        await this.wasm.call('bbfree', newPtr);
        return result;
    }
    async ifft(coefficients) {
        const circuitSize = coefficients.length / 32;
        const newPtr = await this.wasm.call('bbmalloc', coefficients.length);
        await this.wasm.transferToHeap(Transfer(coefficients, [coefficients.buffer]), newPtr);
        await this.wasm.call('ifft', newPtr, this.domainPtr);
        const result = await this.wasm.sliceMemory(newPtr, newPtr + circuitSize * 32);
        await this.wasm.call('bbfree', newPtr);
        return result;
    }
}
export class SingleFftFactory {
    constructor(wasm) {
        this.wasm = wasm;
        this.ffts = {};
    }
    async createFft(circuitSize) {
        if (!this.ffts[circuitSize]) {
            const fft = new SingleFft(this.wasm);
            await fft.init(circuitSize);
            this.ffts[circuitSize] = fft;
        }
        return this.ffts[circuitSize];
    }
    async destroy() { }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2luZ2xlX2ZmdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZnQvc2luZ2xlX2ZmdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFJakQsTUFBTSxPQUFPLFNBQVM7SUFHcEIsWUFBb0IsSUFBMkM7UUFBM0MsU0FBSSxHQUFKLElBQUksQ0FBdUM7SUFBRyxDQUFDO0lBRTVELEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBbUI7UUFDbkMsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLHVCQUF1QixFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQzlFLENBQUM7SUFFTSxLQUFLLENBQUMsT0FBTztRQUNsQixNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLDBCQUEwQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRU0sS0FBSyxDQUFDLEdBQUcsQ0FBQyxZQUF3QixFQUFFLFFBQW9CO1FBQzdELE1BQU0sV0FBVyxHQUFHLFlBQVksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQzdDLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNyRSxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUM3RixNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNoRixNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGdDQUFnQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2xGLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLE1BQU0sR0FBRyxXQUFXLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDOUUsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDdkMsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVNLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBd0I7UUFDeEMsTUFBTSxXQUFXLEdBQUcsWUFBWSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFDN0MsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3JFLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzdGLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDckQsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxHQUFHLFdBQVcsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUM5RSxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN2QyxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sZ0JBQWdCO0lBRzNCLFlBQW9CLElBQTJDO1FBQTNDLFNBQUksR0FBSixJQUFJLENBQXVDO1FBRnZELFNBQUksR0FBbUMsRUFBRSxDQUFDO0lBRWdCLENBQUM7SUFFNUQsS0FBSyxDQUFDLFNBQVMsQ0FBQyxXQUFtQjtRQUN4QyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRTtZQUMzQixNQUFNLEdBQUcsR0FBRyxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDckMsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQzVCLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsR0FBRyxDQUFDO1NBQzlCO1FBQ0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFTSxLQUFLLENBQUMsT0FBTyxLQUFJLENBQUM7Q0FDMUIifQ==