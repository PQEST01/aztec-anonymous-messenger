import { BarretenbergWasm } from './barretenberg_wasm.js';
import { BarretenbergWorker } from './barretenberg_worker.js';
/**
 * Allocates a pool of barretenberg workers.
 * The static new takes a pre-existing BarretenbergWasm which can be reused when recreating the workers, saving on
 * re-parsing the code etc.
 * Worker 0 is allocated MAX_PAGES memory pages. This is because worker 0 will need to hold the proving key
 * (i.e. has state), whereas the others are pure compute (they hold a little crs state).
 */
export declare class WorkerPool {
    static MAX_PAGES: number;
    workers: BarretenbergWorker[];
    static new(barretenberg: BarretenbergWasm, poolSize: number): Promise<WorkerPool>;
    init(module: WebAssembly.Module, poolSize: number, maxMem?: number): Promise<void>;
    destroy(): Promise<void>;
}
//# sourceMappingURL=worker_pool.d.ts.map