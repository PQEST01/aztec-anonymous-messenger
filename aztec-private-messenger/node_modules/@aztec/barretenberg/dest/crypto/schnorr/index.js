import { SchnorrSignature } from './signature.js';
import { GrumpkinAddress } from '../../address/index.js';
import { serializeBufferArrayToVector } from '../../serialize/index.js';
export * from './signature.js';
export class Schnorr {
    constructor(wasm) {
        this.wasm = wasm;
    }
    computePublicKey(pk) {
        this.wasm.transferToHeap(pk, 0);
        this.wasm.call('compute_public_key', 0, 32);
        return Buffer.from(this.wasm.sliceMemory(32, 96));
    }
    // Negate the public key (effectively negating the y-coordinate of the public key) and return the resulting public key.
    negatePublicKey(key) {
        const keyBuffer = key.toBuffer();
        this.wasm.transferToHeap(keyBuffer, 0);
        this.wasm.call('negate_public_key', 0, 0);
        const newKeyBuffer = Buffer.from(this.wasm.sliceMemory(0, keyBuffer.length));
        return new GrumpkinAddress(newKeyBuffer);
    }
    constructSignature(msg, pk) {
        this.wasm.transferToHeap(pk, 64);
        this.wasm.transferToHeap(msg, 96);
        this.wasm.call('construct_signature', 96, msg.length, 64, 0, 32);
        return new SchnorrSignature(Buffer.from(this.wasm.sliceMemory(0, 64)));
    }
    verifySignature(msg, pubKey, sig) {
        this.wasm.transferToHeap(pubKey, 0);
        this.wasm.transferToHeap(sig.s(), 64);
        this.wasm.transferToHeap(sig.e(), 96);
        this.wasm.transferToHeap(msg, 128);
        return this.wasm.call('verify_signature', 128, msg.length, 0, 64, 96) ? true : false;
    }
    // upon input a private key pk, generate a 'multisig publickey' which is the same public key
    // augmented with a proof of possession
    multiSigComputePublicKey(pk) {
        this.wasm.transferToHeap(pk, 128);
        this.wasm.call('multisig_create_multisig_public_key', 128, 0);
        return Buffer.from(this.wasm.sliceMemory(0, 128));
    }
    // upon input an array of 'multisig publickey's, return the aggregated public key
    // that the group of signers can create a signature for.
    // If any of these keys are invalid, returns an invalid public key. The caller should
    // always check if this key is valid before proceeding.
    multiSigValidateAndCombinePublicKeys(pubKeys) {
        const buffer = serializeBufferArrayToVector(pubKeys);
        this.wasm.transferToHeap(buffer, 64);
        const success = this.wasm.call('multisig_validate_and_combine_signer_pubkeys', 64, 0);
        return success ? Buffer.from(this.wasm.sliceMemory(0, 64)) : Buffer.alloc(64);
    }
    // generate the nonces as a public/private pair ({R,S}, {r,s}). This round can be run in advance
    // as a form of preprocessing, as it does not depend on the message being signed.
    // the private output should be safely stored by the user, while the public inputs can be shared
    // with a coordinator who will be in charge of initiating round 2 with the desired message.
    multiSigRoundOne() {
        this.wasm.call('multisig_construct_signature_round_1', 0, 128);
        return {
            publicOutput: Buffer.from(this.wasm.sliceMemory(0, 128)),
            privateOutput: Buffer.from(this.wasm.sliceMemory(128, 192)),
        };
    }
    // once all users have uploaded their public input from round 1, they are given the message
    // as well as all public outputs from the other participants in this session.
    // At the end of this round, each user returns their share of the final signature,
    // which can either be sent to all other participants to create the signature,
    // or to the coordinator.
    multiSigRoundTwo(msg, pk, signerrRoundOnePrivateOutput, pubKeys, roundOnePublicOutputs) {
        const pubKeysBuffer = serializeBufferArrayToVector(pubKeys);
        const roundOneOutputsBuffer = serializeBufferArrayToVector(roundOnePublicOutputs);
        const msgPtr = 32;
        this.wasm.transferToHeap(msg, msgPtr);
        const pkPtr = msgPtr + msg.length;
        this.wasm.transferToHeap(pk, pkPtr);
        const roundOnePrivatePtr = pkPtr + 32;
        this.wasm.transferToHeap(signerrRoundOnePrivateOutput, roundOnePrivatePtr);
        const pubKeysPtr = roundOnePrivatePtr + 64;
        this.wasm.transferToHeap(pubKeysBuffer, pubKeysPtr);
        const roundOnePtr = pubKeysPtr + pubKeysBuffer.length;
        this.wasm.transferToHeap(roundOneOutputsBuffer, roundOnePtr);
        const success = this.wasm.call('multisig_construct_signature_round_2', msgPtr, msg.length, pkPtr, roundOnePrivatePtr, pubKeysPtr, roundOnePtr, 0);
        return success ? Buffer.from(this.wasm.sliceMemory(0, 32)) : Buffer.alloc(32);
    }
    // given the outputs of both rounds, this party (either a signer or coordinator)
    // will validate all outputs and attempt to reconstruct a signature for the given message
    // which would be valid for the aggregated public key of the signers.
    multiSigCombineSignatures(msg, pubKeys, roundOneOutputs, roundTwoOutputs) {
        const pubKeysBuffer = serializeBufferArrayToVector(pubKeys);
        const roundOneOutputsBuffer = serializeBufferArrayToVector(roundOneOutputs);
        const roundTwoOutputsBuffer = serializeBufferArrayToVector(roundTwoOutputs);
        const msgPtr = 64;
        this.wasm.transferToHeap(msg, msgPtr);
        const pubKeysPtr = msgPtr + msg.length;
        this.wasm.transferToHeap(pubKeysBuffer, pubKeysPtr);
        const roundOnePtr = pubKeysPtr + pubKeysBuffer.length;
        this.wasm.transferToHeap(roundOneOutputsBuffer, roundOnePtr);
        const roundTwoPtr = roundOnePtr + roundOneOutputsBuffer.length;
        this.wasm.transferToHeap(roundTwoOutputsBuffer, roundTwoPtr);
        const success = this.wasm.call('multisig_combine_signatures', msgPtr, msg.length, pubKeysPtr, roundOnePtr, roundTwoPtr, 0, 32);
        return success ? new SchnorrSignature(Buffer.from(this.wasm.sliceMemory(0, 64))) : undefined;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY3J5cHRvL3NjaG5vcnIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3pELE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRXhFLGNBQWMsZ0JBQWdCLENBQUM7QUFFL0IsTUFBTSxPQUFPLE9BQU87SUFDbEIsWUFBb0IsSUFBc0I7UUFBdEIsU0FBSSxHQUFKLElBQUksQ0FBa0I7SUFBRyxDQUFDO0lBRXZDLGdCQUFnQixDQUFDLEVBQWM7UUFDcEMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM1QyxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVELHVIQUF1SDtJQUNoSCxlQUFlLENBQUMsR0FBb0I7UUFDekMsTUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDMUMsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFD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