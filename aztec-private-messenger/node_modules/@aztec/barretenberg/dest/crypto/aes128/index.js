export class Aes128 {
    constructor(wasm) {
        this.wasm = wasm;
    }
    encryptBufferCBC(data, iv, key) {
        const rawLength = data.length;
        const numPaddingBytes = rawLength % 16 != 0 ? 16 - (rawLength % 16) : 0;
        const paddingBuffer = Buffer.alloc(numPaddingBytes);
        // input num bytes needs to be a multiple of 16
        // node uses PKCS#7-Padding scheme, where padding byte value = the number of padding bytes
        if (numPaddingBytes != 0) {
            paddingBuffer.fill(numPaddingBytes);
        }
        const input = Buffer.concat([data, paddingBuffer]);
        const mem = this.wasm.call('bbmalloc', input.length + key.length + iv.length + input.length);
        this.wasm.transferToHeap(input, mem);
        this.wasm.transferToHeap(iv, mem + input.length);
        this.wasm.transferToHeap(key, mem + input.length + iv.length);
        this.wasm.call('aes__encrypt_buffer_cbc', mem, mem + input.length, mem + input.length + iv.length, input.length, mem + input.length + iv.length + key.length);
        const result = Buffer.from(this.wasm.sliceMemory(mem + input.length + key.length + iv.length, mem + input.length + key.length + iv.length + input.length));
        this.wasm.call('bbfree', mem);
        return result;
    }
    decryptBufferCBC(data, iv, key) {
        const mem = this.wasm.call('bbmalloc', data.length + key.length + iv.length + data.length);
        this.wasm.transferToHeap(data, mem);
        this.wasm.transferToHeap(iv, mem + data.length);
        this.wasm.transferToHeap(key, mem + data.length + iv.length);
        this.wasm.call('aes__decrypt_buffer_cbc', mem, mem + data.length, mem + data.length + iv.length, data.length, mem + data.length + iv.length + key.length);
        const result = Buffer.from(this.wasm.sliceMemory(mem + data.length + key.length + iv.length, mem + data.length + key.length + iv.length + data.length));
        this.wasm.call('bbfree', mem);
        return result;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY3J5cHRvL2FlczEyOC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLE9BQU8sTUFBTTtJQUNqQixZQUFvQixJQUFzQjtRQUF0QixTQUFJLEdBQUosSUFBSSxDQUFrQjtJQUFHLENBQUM7SUFFdkMsZ0JBQWdCLENBQUMsSUFBZ0IsRUFBRSxFQUFjLEVBQUUsR0FBZTtRQUN2RSxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQzlCLE1BQU0sZUFBZSxHQUFHLFNBQVMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4RSxNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3BELCtDQUErQztRQUMvQywwRkFBMEY7UUFDMUYsSUFBSSxlQUFlLElBQUksQ0FBQyxFQUFFO1lBQ3hCLGFBQWEsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7U0FDckM7UUFDRCxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUM7UUFDbkQsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3RixJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLEdBQUcsR0FBRyxL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