import { createTxId, ProofId } from '../client_proofs/index.js';
import { numToUInt32BE } from '../serialize/index.js';
export class InnerProofData {
    constructor(proofId, noteCommitment1, noteCommitment2, nullifier1, nullifier2, publicValue, publicOwner, publicAssetId) {
        this.proofId = proofId;
        this.noteCommitment1 = noteCommitment1;
        this.noteCommitment2 = noteCommitment2;
        this.nullifier1 = nullifier1;
        this.nullifier2 = nullifier2;
        this.publicValue = publicValue;
        this.publicOwner = publicOwner;
        this.publicAssetId = publicAssetId;
    }
    get txId() {
        if (!this.txId_) {
            this.txId_ = createTxId(this.toBuffer());
        }
        return this.txId_;
    }
    getDepositSigningData() {
        return this.toBuffer();
    }
    toBuffer() {
        return Buffer.concat([
            numToUInt32BE(this.proofId, 32),
            this.noteCommitment1,
            this.noteCommitment2,
            this.nullifier1,
            this.nullifier2,
            this.publicValue,
            this.publicOwner,
            this.publicAssetId,
        ]);
    }
    isPadding() {
        return this.proofId === ProofId.PADDING;
    }
    static fromBuffer(innerPublicInputs) {
        let dataStart = 0;
        const proofId = innerPublicInputs.readUInt32BE(dataStart + 28);
        dataStart += 32;
        const noteCommitment1 = innerPublicInputs.slice(dataStart, dataStart + 32);
        dataStart += 32;
        const noteCommitment2 = innerPublicInputs.slice(dataStart, dataStart + 32);
        dataStart += 32;
        const nullifier1 = innerPublicInputs.slice(dataStart, dataStart + 32);
        dataStart += 32;
        const nullifier2 = innerPublicInputs.slice(dataStart, dataStart + 32);
        dataStart += 32;
        const publicValue = innerPublicInputs.slice(dataStart, dataStart + 32);
        dataStart += 32;
        const publicOwner = innerPublicInputs.slice(dataStart, dataStart + 32);
        dataStart += 32;
        const publicAssetId = innerPublicInputs.slice(dataStart, dataStart + 32);
        dataStart += 32;
        return new InnerProofData(proofId, noteCommitment1, noteCommitment2, nullifier1, nullifier2, publicValue, publicOwner, publicAssetId);
    }
}
InnerProofData.NUM_PUBLIC_INPUTS = 8;
InnerProofData.LENGTH = InnerProofData.NUM_PUBLIC_INPUTS * 32;
InnerProofData.PADDING = InnerProofData.fromBuffer(Buffer.alloc(InnerProofData.LENGTH));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5uZXJfcHJvb2YuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcm9sbHVwX3Byb29mL2lubmVyX3Byb29mLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDaEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRXRELE1BQU0sT0FBTyxjQUFjO0lBT3pCLFlBQ1MsT0FBZ0IsRUFDaEIsZUFBdUIsRUFDdkIsZUFBdUIsRUFDdkIsVUFBa0IsRUFDbEIsVUFBa0IsRUFDbEIsV0FBbUIsRUFDbkIsV0FBbUIsRUFDbkIsYUFBcUI7UUFQckIsWUFBTyxHQUFQLE9BQU8sQ0FBUztRQUNoQixvQkFBZSxHQUFmLGVBQWUsQ0FBUTtRQUN2QixvQkFBZSxHQUFmLGVBQWUsQ0FBUTtRQUN2QixlQUFVLEdBQVYsVUFBVSxDQUFRO1FBQ2xCLGVBQVUsR0FBVixVQUFVLENBQVE7UUFDbEIsZ0JBQVcsR0FBWCxXQUFXLENBQVE7UUFDbkIsZ0JBQVcsR0FBWCxXQUFXLENBQVE7UUFDbkIsa0JBQWEsR0FBYixhQUFhLENBQVE7SUFDM0IsQ0FBQztJQUVKLElBQVcsSUFBSTtRQUNiLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2YsSUFBSSxDQUFDLEtBQUssR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7U0FDMUM7UUFDRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDcEIsQ0FBQztJQUVELHFCQUFxQjtRQUNuQixPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQztZQUNuQixhQUFhLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUM7WUFDL0IsSUFBSSxDQUFDLGVBQWU7WUFDcEIsSUFBSSxDQUFDLGVBQWU7WUFDcEIsSUFBSSxDQUFDLFVBQVU7WUFDZixJQUFJLENBQUMsVUFBVTtZQUNmLElBQUksQ0FBQyxXQUFXO1lBQ2hCLElBQUksQ0FBQyxXQUFXO1lBQ2hCLElBQUksQ0FBQyxhQUFhO1NBQ25CLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxTQUFTO1FBQ1AsT0FBTyxJQUFJLENBQUMsT0FBTyxLQUFLLE9BQU8sQ0FBQyxPQUFPLENBQUM7SUFDMUMsQ0FBQztJQUVELE1BQU0sQ0FBQyxVQUFVLENBQUMsaUJBQXlCO1FBQ3pDLElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQztRQUNsQixNQUFNLE9BQU8sR0FBRyxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQy9ELFNBQVMsSUFBSSxFQUFFLENBQUM7UUFDaEIsTUFBTSxlQUFlLEdBQUcsaUJBQWlCLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxTQUFTLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDM0UsU0FBUyxJQUFJLEVBQUUsQ0FBQztRQUNoQixNQUFNLGVBQWUsR0FBRyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLFNBQVMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUMzRSxTQUFTLElBQUksRUFBRSxDQUFDO1FBQ2hCLE1BQU0sVUFBVSxHQUFHLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsU0FBUyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ3RFLFNBQVMsSUFBSSxFQUFFLENBQUM7UUFDaEIsTUFBTSxVQUFVLEdBQUcsaUJBQWlCLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxTQUFTLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDdEUsU0FBUyxJQUFJLEVBQUUsQ0FBQztRQUNoQixNQUFNLFdBQVcsR0FBRyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLFNBQVMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUN2RSxTQUFTLElBQUksRUFBRSxDQUFDO1FBQ2hCLE1BQU0sV0FBVyxHQUFHLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsU0FBUyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZFLFNBQVMsSUFBSSxFQUFFLENBQUM7UUFDaEIsTUFBTSxhQUFhLEdBQUcsaUJBQWlCLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxTQUFTLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDekUsU0FBUyxJQUFJLEVBQUUsQ0FBQztRQUVoQixPQUFPLElBQUksY0FBYyxDQUN2QixPQUFPLEVBQ1AsZUFBZSxFQUNmLGVBQWUsRUFDZixVQUFVLEVBQ1YsVUFBVSxFQUNWLFdBQVcsRUFDWCxXQUFXLEVBQ1gsYUFBYSxDQUNkLENBQUM7SUFDSixDQUFDOztBQTFFTSxnQ0FBaUIsR0FBRyxDQUFDLENBQUM7QUFDdEIscUJBQU0sR0FBRyxjQUFjLENBQUMsaUJBQWlCLEdBQUcsRUFBRSxDQUFDO0FBQy9DLHNCQUFPLEdBQUcsY0FBYyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDIn0=