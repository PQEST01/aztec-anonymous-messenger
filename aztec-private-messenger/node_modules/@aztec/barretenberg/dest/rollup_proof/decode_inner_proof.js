import { ProofId } from '../client_proofs/index.js';
import { RollupAccountProofData } from './rollup_account_proof_data.js';
import { RollupDefiClaimProofData } from './rollup_defi_claim_proof_data.js';
import { RollupDefiDepositProofData } from './rollup_defi_deposit_proof_data.js';
import { RollupDepositProofData } from './rollup_deposit_proof_data.js';
import { RollupPaddingProofData } from './rollup_padding_proof_data.js';
import { RollupSendProofData } from './rollup_send_proof_data.js';
import { RollupWithdrawProofData } from './rollup_withdraw_proof_data.js';
export const decodeProofId = (encoded) => encoded.readUInt8(0);
const recoverProof = (encoded) => {
    const proofId = decodeProofId(encoded);
    switch (proofId) {
        case ProofId.DEPOSIT:
            return RollupDepositProofData.decode(encoded);
        case ProofId.WITHDRAW:
            return RollupWithdrawProofData.decode(encoded);
        case ProofId.SEND:
            return RollupSendProofData.decode(encoded);
        case ProofId.ACCOUNT:
            return RollupAccountProofData.decode(encoded);
        case ProofId.DEFI_DEPOSIT:
            return RollupDefiDepositProofData.decode(encoded);
        case ProofId.DEFI_CLAIM:
            return RollupDefiClaimProofData.decode(encoded);
        case ProofId.PADDING:
            return RollupPaddingProofData.decode(encoded);
    }
};
export const getEncodedProofSizeForId = (proofId) => {
    switch (proofId) {
        case ProofId.DEPOSIT:
            return RollupDepositProofData.ENCODED_LENGTH;
        case ProofId.WITHDRAW:
            return RollupWithdrawProofData.ENCODED_LENGTH;
        case ProofId.SEND:
            return RollupSendProofData.ENCODED_LENGTH;
        case ProofId.ACCOUNT:
            return RollupAccountProofData.ENCODED_LENGTH;
        case ProofId.DEFI_DEPOSIT:
            return RollupDefiDepositProofData.ENCODED_LENGTH;
        case ProofId.DEFI_CLAIM:
            return RollupDefiClaimProofData.ENCODED_LENGTH;
        case ProofId.PADDING:
            return RollupPaddingProofData.ENCODED_LENGTH;
    }
};
export const decodeInnerProof = (encoded) => recoverProof(encoded);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb2RlX2lubmVyX3Byb29mLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3JvbGx1cF9wcm9vZi9kZWNvZGVfaW5uZXJfcHJvb2YudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3hFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQzdFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ2pGLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ2xFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBRTFFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLE9BQWUsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUV2RSxNQUFNLFlBQVksR0FBRyxDQUFDLE9BQWUsRUFBRSxFQUFFO0lBQ3ZDLE1BQU0sT0FBTyxHQUFHLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN2QyxRQUFRLE9BQU8sRUFBRTtRQUNmLEtBQUssT0FBTyxDQUFDLE9BQU87WUFDbEIsT0FBTyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDaEQsS0FBSyxPQUFPLENBQUMsUUFBUTtZQUNuQixPQUFPLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNqRCxLQUFLLE9BQU8sQ0FBQyxJQUFJO1lBQ2YsT0FBTyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDN0MsS0FBSyxPQUFPLENBQUMsT0FBTztZQUNsQixPQUFPLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNoRCxLQUFLLE9BQU8sQ0FBQyxZQUFZO1lBQ3ZCLE9BQU8sMEJBQTBCLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3BELEtBQUssT0FBTyxDQUFDLFVBQVU7WUFDckIsT0FBTyx3QkFBd0IsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbEQsS0FBSyxPQUFPLENBQUMsT0FBTztZQUNsQixPQUFPLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUNqRDtBQUNILENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUFHLENBQUMsT0FBZ0IsRUFBRSxFQUFFO0lBQzNELFFBQVEsT0FBTyxFQUFFO1FBQ2YsS0FBSyxPQUFPLENBQUMsT0FBTztZQUNsQixPQUFPLHNCQUFzQixDQUFDLGNBQWMsQ0FBQztRQUMvQyxLQUFLLE9BQU8sQ0FBQyxRQUFRO1lBQ25CLE9BQU8sdUJBQXVCLENBQUMsY0FBYyxDQUFDO1FBQ2hELEtBQUssT0FBTyxDQUFDLElBQUk7WUFDZixPQUFPLG1CQUFtQixDQUFDLGNBQWMsQ0FBQztRQUM1QyxLQUFLLE9BQU8sQ0FBQyxPQUFPO1lBQ2xCLE9BQU8sc0JBQXNCLENBQUMsY0FBYyxDQUFDO1FBQy9DLEtBQUssT0FBTyxDQUFDLFlBQVk7WUFDdkIsT0FBTywwQkFBMEIsQ0FBQyxjQUFjLENBQUM7UUFDbkQsS0FBSyxPQUFPLENBQUMsVUFBVTtZQUNyQixPQUFPLHdCQUF3QixDQUFDLGNBQWMsQ0FBQztRQUNqRCxLQUFLLE9BQU8sQ0FBQyxPQUFPO1lBQ2xCLE9BQU8sc0JBQXNCLENBQUMsY0FBYyxDQUFDO0tBQ2hEO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxPQUFlLEVBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUUsQ0FBQyJ9