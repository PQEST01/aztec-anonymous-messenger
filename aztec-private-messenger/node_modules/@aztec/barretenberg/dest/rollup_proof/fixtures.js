import { randomBytes } from '../crypto/index.js';
import { EthAddress } from '../address/index.js';
import { ProofId } from '../client_proofs/index.js';
import { InnerProofData, RollupProofData } from './index.js';
const randomCommitment = () => randomBytes(32);
const randomNullifier = () => randomBytes(32);
const randomInt = () => Buffer.concat([Buffer.alloc(28), randomBytes(4)]);
export const randomDepositProofData = () => new InnerProofData(ProofId.DEPOSIT, randomCommitment(), randomCommitment(), randomNullifier(), randomNullifier(), randomInt(), EthAddress.random().toBuffer32(), Buffer.alloc(32));
export const randomSendProofData = () => new InnerProofData(ProofId.SEND, randomCommitment(), randomCommitment(), randomNullifier(), randomNullifier(), Buffer.alloc(32), Buffer.alloc(32), Buffer.alloc(32));
export const randomWithdrawProofData = () => new InnerProofData(ProofId.WITHDRAW, randomCommitment(), randomCommitment(), randomNullifier(), randomNullifier(), randomInt(), EthAddress.random().toBuffer32(), randomInt());
export const randomInnerProofData = (proofId = ProofId.SEND) => {
    switch (proofId) {
        case ProofId.DEPOSIT:
            return randomDepositProofData();
        case ProofId.WITHDRAW:
            return randomWithdrawProofData();
        case ProofId.SEND:
            return randomSendProofData();
        default:
            return new InnerProofData(proofId, randomCommitment(), randomCommitment(), randomNullifier(), [ProofId.ACCOUNT, ProofId.DEFI_DEPOSIT].includes(proofId) ? randomNullifier() : Buffer.alloc(32), Buffer.alloc(32), Buffer.alloc(32), Buffer.alloc(32));
    }
};
export const createRollupProofData = (innerProofs) => {
    const bridgeCallDatas = [...Array(RollupProofData.NUM_BRIDGE_CALLS_PER_BLOCK)].map(() => randomBytes(32));
    const defiDepositSums = [...Array(RollupProofData.NUM_BRIDGE_CALLS_PER_BLOCK)].map(() => BigInt(0));
    const defiInteractionNotes = [...Array(RollupProofData.NUM_BRIDGE_CALLS_PER_BLOCK)].map(() => randomBytes(32));
    const assetIds = [...Array(RollupProofData.NUMBER_OF_ASSETS)].map(() => 0);
    const totalTxFees = [...Array(RollupProofData.NUMBER_OF_ASSETS)].map(() => BigInt(0));
    return new RollupProofData(randomBytes(4).readUInt32BE(0), innerProofs.length, randomBytes(4).readUInt32BE(0), randomBytes(32), randomBytes(32), randomBytes(32), randomBytes(32), randomBytes(32), randomBytes(32), randomBytes(32), randomBytes(32), bridgeCallDatas, defiDepositSums, assetIds, totalTxFees, defiInteractionNotes, randomBytes(32), randomBytes(32), innerProofs.length, innerProofs);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZml4dHVyZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcm9sbHVwX3Byb29mL2ZpeHR1cmVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDakQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxjQUFjLEVBQUUsZUFBZSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRTdELE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQy9DLE1BQU0sZUFBZSxHQUFHLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUM5QyxNQUFNLFNBQVMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRTFFLE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLEdBQUcsRUFBRSxDQUN6QyxJQUFJLGNBQWMsQ0FDaEIsT0FBTyxDQUFDLE9BQU8sRUFDZixnQkFBZ0IsRUFBRSxFQUNsQixnQkFBZ0IsRUFBRSxFQUNsQixlQUFlLEVBQUUsRUFDakIsZUFBZSxFQUFFLEVBQ2pCLFNBQVMsRUFBRSxFQUNYLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxVQUFVLEVBQUUsRUFDaEMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FDakIsQ0FBQztBQUVKLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLEdBQUcsRUFBRSxDQUN0QyxJQUFJLGNBQWMsQ0FDaEIsT0FBTyxDQUFDLElBQUksRUFDWixnQkFBZ0IsRUFB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