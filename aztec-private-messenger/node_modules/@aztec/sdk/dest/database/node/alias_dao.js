import { __decorate, __metadata } from "tslib";
import { AliasHash } from '@aztec/barretenberg/account_id';
import { GrumpkinAddress } from '@aztec/barretenberg/address';
import { AfterLoad, Column, Entity, Index, PrimaryColumn } from 'typeorm';
import { Alias } from '../database.js';
import { aliasHashTransformer, grumpkinAddressTransformer } from './transformer.js';
let AliasDao = class AliasDao {
    constructor(init) {
        Object.assign(this, init);
    }
    afterLoad() {
        if (this.noteCommitment1 === null) {
            delete this.noteCommitment1;
        }
        if (this.spendingPublicKeyX === null) {
            delete this.spendingPublicKeyX;
        }
    }
};
__decorate([
    PrimaryColumn('blob', { transformer: [aliasHashTransformer] }),
    __metadata("design:type", AliasHash)
], AliasDao.prototype, "aliasHash", void 0);
__decorate([
    Column('blob', { transformer: [grumpkinAddressTransformer] }),
    Index(),
    __metadata("design:type", GrumpkinAddress)
], AliasDao.prototype, "accountPublicKey", void 0);
__decorate([
    Column(),
    __metadata("design:type", Number)
], AliasDao.prototype, "index", void 0);
__decorate([
    Column({ nullable: true }),
    __metadata("design:type", Buffer)
], AliasDao.prototype, "noteCommitment1", void 0);
__decorate([
    Column({ nullable: true }),
    __metadata("design:type", Buffer)
], AliasDao.prototype, "spendingPublicKeyX", void 0);
__decorate([
    AfterLoad(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], AliasDao.prototype, "afterLoad", null);
AliasDao = __decorate([
    Entity({ name: 'alias' }),
    __metadata("design:paramtypes", [Alias])
], AliasDao);
export { AliasDao };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxpYXNfZGFvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2RhdGFiYXNlL25vZGUvYWxpYXNfZGFvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDM0QsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzlELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQzFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN2QyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUdwRixJQUFhLFFBQVEsR0FBckIsTUFBYSxRQUFRO0lBQ25CLFlBQVksSUFBWTtRQUN0QixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBbUJELFNBQVM7UUFDUCxJQUFJLElBQUksQ0FBQyxlQUFlLEtBQUssSUFBSSxFQUFFO1lBQ2pDLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztTQUM3QjtRQUNELElBQUksSUFBSSxDQUFDLGtCQUFrQixLQUFLLElBQUksRUFBRTtZQUNwQyxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztTQUNoQztJQUNILENBQUM7Q0FDRixDQUFBO0FBeEJDO0lBREMsYUFBYSxDQUFDLE1BQU0sRUFBRSxFQUFFLFdBQVcsRUFBRSxDQUFDLG9CQUFvQixDQUFDLEVBQUUsQ0FBQzs4QkFDNUMsU0FBUzsyQ0FBQztBQUk3QjtJQUZDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxXQUFXLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQyxFQUFFLENBQUM7SUFDN0QsS0FBSyxFQUFFOzhCQUNrQixlQUFlO2tEQUFDO0FBRzFDO0lBREMsTUFBTSxFQUFFOzt1Q0FDYTtBQUd0QjtJQURDLE1BQU0sQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQzs4QkFDRixNQUFNO2lEQUFDO0FBR2hDO0lBREMsTUFBTSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDOzhCQUNDLE1BQU07b0RBQUM7QUFHbkM7SUFEQyxTQUFTLEVBQUU7Ozs7eUNBUVg7QUE3QlUsUUFBUTtJQURwQixNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUM7cUNBRUwsS0FBSztHQURiLFFBQVEsQ0E4QnBCO1NBOUJZLFFBQVEifQ==