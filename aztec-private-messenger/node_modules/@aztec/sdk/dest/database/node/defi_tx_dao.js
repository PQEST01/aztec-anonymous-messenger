import { __decorate, __metadata } from "tslib";
import { GrumpkinAddress } from '@aztec/barretenberg/address';
import { BridgeCallData } from '@aztec/barretenberg/bridge_call_data';
import { TxId } from '@aztec/barretenberg/tx_id';
import { AfterInsert, AfterLoad, AfterUpdate, Column, Entity, Index, PrimaryColumn } from 'typeorm';
import { bigintTransformer, bridgeCallDataTransformer, grumpkinAddressTransformer, txIdTransformer, } from './transformer.js';
let DefiTxDao = class DefiTxDao {
    constructor(init) {
        Object.assign(this, init);
    }
    afterLoad() {
        if (this.settled === null) {
            delete this.settled;
        }
        if (this.interactionNonce === null) {
            delete this.interactionNonce;
        }
        if (this.isAsync === null) {
            delete this.isAsync;
        }
        if (this.success === null) {
            delete this.success;
        }
        if (this.outputValueA === null) {
            delete this.outputValueA;
        }
        if (this.outputValueB === null) {
            delete this.outputValueB;
        }
        if (this.finalised === null) {
            delete this.finalised;
        }
        if (this.claimSettled === null) {
            delete this.claimSettled;
        }
        if (this.claimTxId === null) {
            delete this.claimTxId;
        }
    }
};
__decorate([
    PrimaryColumn('blob', { transformer: [txIdTransformer] }),
    __metadata("design:type", TxId)
], DefiTxDao.prototype, "txId", void 0);
__decorate([
    Index({ unique: false }),
    Column('blob', { transformer: [grumpkinAddressTransformer] }),
    __metadata("design:type", GrumpkinAddress)
], DefiTxDao.prototype, "userId", void 0);
__decorate([
    Column('blob', { transformer: [bridgeCallDataTransformer] }),
    __metadata("design:type", BridgeCallData)
], DefiTxDao.prototype, "bridgeCallData", void 0);
__decorate([
    Column('text', { transformer: [bigintTransformer] }),
    __metadata("design:type", typeof BigInt === "function" ? BigInt : Object)
], DefiTxDao.prototype, "depositValue", void 0);
__decorate([
    Column('text', { transformer: [bigintTransformer] }),
    __metadata("design:type", typeof BigInt === "function" ? BigInt : Object)
], DefiTxDao.prototype, "txFee", void 0);
__decorate([
    Column(),
    __metadata("design:type", Number)
], DefiTxDao.prototype, "txRefNo", void 0);
__decorate([
    Column(),
    __metadata("design:type", Date)
], DefiTxDao.prototype, "created", void 0);
__decorate([
    Column(),
    __metadata("design:type", Buffer)
], DefiTxDao.prototype, "partialState", void 0);
__decorate([
    Column(),
    __metadata("design:type", Buffer)
], DefiTxDao.prototype, "partialStateSecret", void 0);
__decorate([
    Column({ nullable: true }),
    Index(),
    __metadata("design:type", Buffer)
], DefiTxDao.prototype, "nullifier", void 0);
__decorate([
    Column({ nullable: true }),
    __metadata("design:type", Date)
], DefiTxDao.prototype, "settled", void 0);
__decorate([
    Index({ unique: false }),
    Column({ nullable: true }),
    __metadata("design:type", Number)
], DefiTxDao.prototype, "interactionNonce", void 0);
__decorate([
    Column({ nullable: true }),
    __metadata("design:type", Boolean)
], DefiTxDao.prototype, "isAsync", void 0);
__decorate([
    Column({ nullable: true }),
    __metadata("design:type", Boolean)
], DefiTxDao.prototype, "success", void 0);
__decorate([
    Column('text', { transformer: [bigintTransformer], nullable: true }),
    __metadata("design:type", typeof BigInt === "function" ? BigInt : Object)
], DefiTxDao.prototype, "outputValueA", void 0);
__decorate([
    Column('text', { transformer: [bigintTransformer], nullable: true }),
    __metadata("design:type", typeof BigInt === "function" ? BigInt : Object)
], DefiTxDao.prototype, "outputValueB", void 0);
__decorate([
    Column({ nullable: true }),
    __metadata("design:type", Date)
], DefiTxDao.prototype, "finalised", void 0);
__decorate([
    Column({ nullable: true }),
    __metadata("design:type", Date)
], DefiTxDao.prototype, "claimSettled", void 0);
__decorate([
    Column('blob', { nullable: true, transformer: [txIdTransformer] }),
    __metadata("design:type", TxId)
], DefiTxDao.prototype, "claimTxId", void 0);
__decorate([
    AfterLoad(),
    AfterInsert(),
    AfterUpdate(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], DefiTxDao.prototype, "afterLoad", null);
DefiTxDao = __decorate([
    Entity({ name: 'defiTx' }),
    __metadata("design:paramtypes", [Object])
], DefiTxDao);
export { DefiTxDao };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmaV90eF9kYW8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZGF0YWJhc2Uvbm9kZS9kZWZpX3R4X2Rhby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzlELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUN0RSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDakQsT0FBTyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLGFBQWEsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNwRyxPQUFPLEVBQ0wsaUJBQWlCLEVBQ2pCLHlCQUF5QixFQUN6QiwwQkFBMEIsRUFDMUIsZUFBZSxHQUNoQixNQUFNLGtCQUFrQixDQUFDO0FBRzFCLElBQWEsU0FBUyxHQUF0QixNQUFhLFNBQVM7SUFDcEIsWUFBbUIsSUFBeUI7UUFDMUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQWlFRCxTQUFTO1FBQ1AsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLElBQUksRUFBRTtZQUN6QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7U0FDckI7UUFDRCxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsS0FBSyxJQUFJLEVBQUU7WUFDbEMsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7U0FDOUI7UUFDRCxJQUFJLElBQUksQ0FBQyxPQUFPLEtBQUssSUFBSSxFQUFFO1lBQ3pCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztTQUNyQjtRQUNELElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxJQUFJLEVBQUU7WUFDekIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1NBQ3JCO1FBQ0QsSUFBSSxJQUFJLENBQUMs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