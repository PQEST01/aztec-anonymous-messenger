import { __decorate, __metadata } from "tslib";
import { GrumpkinAddress } from '@aztec/barretenberg/address';
import { TreeNote } from '@aztec/barretenberg/note_algorithms';
import { AfterInsert, AfterLoad, AfterUpdate, Column, Entity, Index, PrimaryColumn } from 'typeorm';
import { Note } from '../../note/index.js';
import { bigintTransformer, grumpkinAddressTransformer } from './transformer.js';
let NoteDao = class NoteDao {
    afterLoad() {
        if (!this.hashPath) {
            delete this.hashPath;
        }
        if (this.index === null) {
            delete this.index;
        }
    }
};
__decorate([
    PrimaryColumn(),
    __metadata("design:type", Buffer)
], NoteDao.prototype, "commitment", void 0);
__decorate([
    Index({ unique: true }),
    Column(),
    __metadata("design:type", Buffer)
], NoteDao.prototype, "nullifier", void 0);
__decorate([
    Column(),
    __metadata("design:type", Buffer)
], NoteDao.prototype, "noteSecret", void 0);
__decorate([
    Column('blob', { transformer: [grumpkinAddressTransformer] }),
    __metadata("design:type", GrumpkinAddress)
], NoteDao.prototype, "owner", void 0);
__decorate([
    Column(),
    __metadata("design:type", Boolean)
], NoteDao.prototype, "accountRequired", void 0);
__decorate([
    Column(),
    __metadata("design:type", Buffer)
], NoteDao.prototype, "creatorPubKey", void 0);
__decorate([
    Column(),
    __metadata("design:type", Buffer)
], NoteDao.prototype, "inputNullifier", void 0);
__decorate([
    Column(),
    __metadata("design:type", Number)
], NoteDao.prototype, "assetId", void 0);
__decorate([
    Column('text', { transformer: [bigintTransformer] }),
    __metadata("design:type", typeof BigInt === "function" ? BigInt : Object)
], NoteDao.prototype, "value", void 0);
__decorate([
    Column(),
    __metadata("design:type", Boolean)
], NoteDao.prototype, "allowChain", void 0);
__decorate([
    Index({ unique: false }),
    Column({ nullable: true }),
    __metadata("design:type", Number)
], NoteDao.prototype, "index", void 0);
__decorate([
    Index({ unique: false }),
    Column(),
    __metadata("design:type", Boolean)
], NoteDao.prototype, "nullified", void 0);
__decorate([
    Column({ nullable: true }),
    __metadata("design:type", Buffer)
], NoteDao.prototype, "hashPath", void 0);
__decorate([
    AfterLoad(),
    AfterInsert(),
    AfterUpdate(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NoteDao.prototype, "afterLoad", null);
NoteDao = __decorate([
    Entity({ name: 'note' })
], NoteDao);
export { NoteDao };
export const noteToNoteDao = ({ treeNote: { noteSecret, ownerPubKey, accountRequired, creatorPubKey, inputNullifier, assetId }, commitment, nullifier, value, allowChain, index, nullified, hashPath, }) => ({
    commitment,
    nullifier,
    noteSecret,
    owner: ownerPubKey,
    accountRequired,
    creatorPubKey,
    inputNullifier,
    assetId,
    value,
    allowChain,
    nullified,
    index,
    hashPath,
});
export const noteDaoToNote = ({ commitment, nullifier, noteSecret, owner, accountRequired, creatorPubKey, inputNullifier, assetId, value, allowChain, index, nullified, hashPath, }) => new Note(new TreeNote(owner, value, assetId, accountRequired, noteSecret, creatorPubKey, inputNullifier), commitment, nullifier, allowChain, nullified, index, hashPath);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90ZV9kYW8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZGF0YWJhc2Uvbm9kZS9ub3RlX2Rhby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzlELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUMvRCxPQUFPLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3BHLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUdqRixJQUFhLE9BQU8sR0FBcEIsTUFBYSxPQUFPO0lBOENsQixTQUFTO1FBQ1AsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO1NBQ3RCO1FBQ0QsSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLElBQUksRUFBRTtZQUN2QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7U0FDbkI7SUFDSCxDQUFDO0NBQ0YsQ0FBQTtBQXBEQztJQURDLGFBQWEsRUFBRTs4QkFDSSxNQUFNOzJDQUFDO0FBSTNCO0lBRkMsS0FBSyxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDO0lBQ3ZCLE1BQU0sRUFBRTs4QkFDVSxNQUFNOzBDQUFDO0FBRzFCO0lBREMsTUFBTSxFQUFFOzhCQUNXLE1BQU07MkNBQUM7QUFHM0I7SUFEQyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsV0FBVyxFQUFFLENBQUMsMEJBQTBCLENBQUMsRUFBRSxDQUFDOzhCQUMvQyxlQUFlO3NDQUFDO0FBRy9CO0lBREMsTUFBTSxFQUFFOztnREFDd0I7QUFHakM7SUFEQyxNQUFNLEVBQUU7OEJBQ2MsTUFBTTs4Q0FBQztBQUc5QjtJQURDLE1BQU0sRUFBRTs4QkFDZSxNQUFNOytDQUFDO0FBRy9CO0lBREMsTUFBTSxFQUFFOzt3Q0FDZTtBQUd4QjtJQURDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxXQUFXLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUM7O3NDQUMvQjtBQUd0QjtJQURDLE1BQU0sRUFBRTs7MkNBQ21CO0FBSTVCO0lBRkMsS0FBSyxDQUFDLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDO0lBQ3hCLE1BQU0sQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQzs7c0NBQ0w7QUFJdEI7SUFGQyxLQUFLLENBQUMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUM7SUFDeEIsTUFBTSxFQUFFOzswQ0FDa0I7QUFHM0I7SUFEQyxNQUFNLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUM7OEJBQ1QsTUFBTTt5Q0FBQztBQUt6QjtJQUhDLFNBQVMsRUFBRTtJQUNYLFdBQVcsRUFBRTtJQUNiLFdBQVcsRUFBRTs7Ozt3Q0FRYjtBQXJEVSxPQUFPO0lBRG5CLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQztHQUNaLE9BQU8sQ0FzRG5CO1NBdERZLE9BQU87QUF3RHBCLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLEVBQzVCLFFBQVEsRUFBRSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBRSxjQUFjLEVBQUUsT0FBTyxFQUFFLEVBQzlGLFVBQVUsRUFDVixTQUFTLEVBQ1QsS0FBSyxFQUNMLFVBQVUsRUFDVixLQUFLLEVBQ0wsU0FBUyxFQUNULFFBQVEsR0FDSCxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsS0FBSyxFQUFFLFdBQVc7SUFDbEIsZUFBZTtJQUNmLGFBQWE7SUFDYixjQUFjO0lBQ2QsT0FBTztJQUNQLEtBQUs7SUFDTCxVQUFVO0lBQ1YsU0FBUztJQUNULEtBQUs7SUFDTCxRQUFRO0NBQ1QsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQUMsRUFDNUIsVUFBVSxFQUNWLFNBQVMsRUFDVCxVQUFVLEVBQ1YsS0FBSyxFQUNMLGVBQWUsRUFDZixhQUFhLEVBQ2IsY0FBYyxFQUNkLE9BQU8sRUFDUCxLQUFLLEVBQ0wsVUFBVSxFQUNWLEtBQUssRUFDTCxTQUFTLEVBQ1QsUUFBUSxHQUNBLEVBQUUsRUFBRSxDQUNaLElBQUksSUFBSSxDQUNOLElBQUksUUFBUSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLGNBQWMsQ0FBQyxFQUMvRixVQUFVLEVBQ1YsU0FBUyxFQUNULFVBQVUsRUFDVixTQUFTLEVBQ1QsS0FBSyxFQUNMLFFBQVEsQ0FDVCxDQUFDIn0=