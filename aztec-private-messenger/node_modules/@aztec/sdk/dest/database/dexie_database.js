import { AliasHash } from '@aztec/barretenberg/account_id';
import { EthAddress, GrumpkinAddress } from '@aztec/barretenberg/address';
import { BridgeCallData } from '@aztec/barretenberg/bridge_call_data';
import { ProofId } from '@aztec/barretenberg/client_proofs';
import { createDebugLogger } from '@aztec/barretenberg/log';
import { TreeNote } from '@aztec/barretenberg/note_algorithms';
import { TxId } from '@aztec/barretenberg/tx_id';
import { default as Dexie } from 'dexie';
import { CoreAccountTx, CoreDefiTx, CorePaymentTx } from '../core_tx/index.js';
import { Note } from '../note/index.js';
import { sortTxs } from './sort_txs.js';
const toSubKeyName = (name, index) => `${name}__${index}`;
class DexieNote {
    constructor(owner, assetId, value, accountRequired, noteSecret, creatorPubKey, inputNullifier, commitment, nullifier, allowChain, index, nullified, pending, hashPath) {
        this.owner = owner;
        this.assetId = assetId;
        this.value = value;
        this.accountRequired = accountRequired;
        this.noteSecret = noteSecret;
        this.creatorPubKey = creatorPubKey;
        this.inputNullifier = inputNullifier;
        this.commitment = commitment;
        this.nullifier = nullifier;
        this.allowChain = allowChain;
        this.index = index;
        this.nullified = nullified;
        this.pending = pending;
        this.hashPath = hashPath;
    }
}
const toDexieNote = (note) => new DexieNote(new Uint8Array(note.owner.toBuffer()), note.assetId, note.value.toString(), note.treeNote.accountRequired, new Uint8Array(note.treeNote.noteSecret), new Uint8Array(note.treeNote.creatorPubKey), new Uint8Array(note.treeNote.inputNullifier), note.commitment, note.nullifier, note.allowChain, note.index || 0, note.nullified ? 1 : 0, note.index === undefined ? 1 : 0, note.hashPath ? new Uint8Array(note.hashPath) : undefined);
const fromDexieNote = ({ owner, assetId, value, accountRequired, noteSecret, creatorPubKey, inputNullifier, commitment, nullifier, allowChain, nullified, index, pending, hashPath, }) => new Note(new TreeNote(new GrumpkinAddress(Buffer.from(owner)), BigInt(value), assetId, accountRequired, Buffer.from(noteSecret), Buffer.from(creatorPubKey), Buffer.from(inputNullifier)), Buffer.from(commitment), Buffer.from(nullifier), allowChain, !!nullified, !pending ? index : undefined, hashPath ? Buffer.from(hashPath) : undefined);
class DexieUser {
    constructor(accountPublicKey, accountPrivateKey, syncedToRollup) {
        this.accountPublicKey = accountPublicKey;
        this.accountPrivateKey = accountPrivateKey;
        this.syncedToRollup = syncedToRollup;
    }
}
const toDexieUser = ({ accountPublicKey, accountPrivateKey, syncedToRollup }) => new DexieUser(new Uint8Array(accountPublicKey.toBuffer()), new Uint8Array(accountPrivateKey), syncedToRollup);
const fromDexieUser = ({ accountPublicKey, accountPrivateKey, syncedToRollup }) => ({
    accountPublicKey: new GrumpkinAddress(Buffer.from(accountPublicKey)),
    accountPrivateKey: Buffer.from(accountPrivateKey),
    syncedToRollup,
});
class DexieUserTx {
    constructor(txId, userId, proofId, created, settled) {
        this.txId = txId;
        this.userId = userId;
        this.proofId = proofId;
        this.created = created;
        this.settled = settled;
    }
}
const fromDexieUserTx = (tx) => {
    switch (tx.proofId) {
        case ProofId.ACCOUNT:
            return fromDexieAccountTx(tx);
        case ProofId.DEFI_DEPOSIT:
            return fromDexieDefiTx(tx);
        default:
            return fromDexiePaymentTx(tx);
    }
};
class DexiePaymentTx {
    constructor(txId, userId, proofId, assetId, publicValue, privateInput, recipientPrivateOutput, senderPrivateOutput, isRecipient, isSender, txRefNo, created, settled, // dexie does not sort a column correctly if some values are undefined
    publicOwner) {
        this.txId = txId;
        this.userId = userId;
        this.proofId = proofId;
        this.assetId = assetId;
        this.publicValue = publicValue;
        this.privateInput = privateInput;
        this.recipientPrivateOutput = recipientPrivateOutput;
        this.senderPrivateOutput = senderPrivateOutput;
        this.isRecipient = isRecipient;
        this.isSender = isSender;
        this.txRefNo = txRefNo;
        this.created = created;
        this.settled = settled;
        this.publicOwner = publicOwner;
    }
}
const toDexiePaymentTx = (tx) => new DexiePaymentTx(new Uint8Array(tx.txId.toBuffer()), new Uint8Array(tx.userId.toBuffer()), tx.proofId, tx.assetId, tx.publicValue.toString(), tx.privateInput.toString(), tx.recipientPrivateOutput.toString(), tx.senderPrivateOutput.toString(), tx.isRecipient, tx.isSender, tx.txRefNo, tx.created, tx.settled ? tx.settled.getTime() : 0, tx.publicOwner ? new Uint8Array(tx.publicOwner.toBuffer()) : undefined);
const fromDexiePaymentTx = ({ txId, userId, proofId, assetId, publicValue, publicOwner, privateInput, recipientPrivateOutput, senderPrivateOutput, isRecipient, isSender, txRefNo, created, settled, }) => new CorePaymentTx(new TxId(Buffer.from(txId)), new GrumpkinAddress(Buffer.from(userId)), proofId, assetId, BigInt(publicValue), publicOwner ? new EthAddress(Buffer.from(publicOwner)) : undefined, BigInt(privateInput), BigInt(recipientPrivateOutput), BigInt(senderPrivateOutput), isRecipient, isSender, txRefNo, created, settled ? new Date(settled) : undefined);
class DexieAccountTx {
    constructor(txId, userId, proofId, aliasHash, migrated, txRefNo, created, settled, newSpendingPublicKey1, newSpendingPublicKey2) {
        this.txId = txId;
        this.userId = userId;
        this.proofId = proofId;
        this.aliasHash = aliasHash;
        this.migrated = migrated;
        this.txRefNo = txRefNo;
        this.created = created;
        this.settled = settled;
        this.newSpendingPublicKey1 = newSpendingPublicKey1;
        this.newSpendingPublicKey2 = newSpendingPublicKey2;
    }
}
const toDexieAccountTx = (tx) => new DexieAccountTx(new Uint8Array(tx.txId.toBuffer()), new Uint8Array(tx.userId.toBuffer()), ProofId.ACCOUNT, new Uint8Array(tx.aliasHash.toBuffer()), tx.migrated, tx.txRefNo, tx.created, tx.settled ? tx.settled.getTime() : 0, tx.newSpendingPublicKey1 ? new Uint8Array(tx.newSpendingPublicKey1) : undefined, tx.newSpendingPublicKey2 ? new Uint8Array(tx.newSpendingPublicKey2) : undefined);
const fromDexieAccountTx = ({ txId, userId, aliasHash, newSpendingPublicKey1, newSpendingPublicKey2, migrated, txRefNo, created, settled, }) => new CoreAccountTx(new TxId(Buffer.from(txId)), new GrumpkinAddress(Buffer.from(userId)), new AliasHash(Buffer.from(aliasHash)), newSpendingPublicKey1 ? Buffer.from(newSpendingPublicKey1) : undefined, newSpendingPublicKey2 ? Buffer.from(newSpendingPublicKey2) : undefined, migrated, txRefNo, created, settled ? new Date(settled) : undefined);
// @dev Note: `bridgeId` as is used here is called `bridgeCallData` everywhere else. We kept the old name here in order
//            to not cause inconsistencies in the database on frontend.
class DexieDefiTx {
    constructor(txId, userId, proofId, bridgeId, depositValue, txFee, txRefNo, created, partialState, partialStateSecret, settled, claimSettled, nullifier, interactionNonce, isAsync, success, outputValueA, outputValueB, finalised, claimTxId) {
        this.txId = txId;
        this.userId = userId;
        this.proofId = proofId;
        this.bridgeId = bridgeId;
        this.depositValue = depositValue;
        this.txFee = txFee;
        this.txRefNo = txRefNo;
        this.created = created;
        this.partialState = partialState;
        this.partialStateSecret = partialStateSecret;
        this.settled = settled;
        this.claimSettled = claimSettled;
        this.nullifier = nullifier;
        this.interactionNonce = interactionNonce;
        this.isAsync = isAsync;
        this.success = success;
        this.outputValueA = outputValueA;
        this.outputValueB = outputValueB;
        this.finalised = finalised;
        this.claimTxId = claimTxId;
    }
}
const toDexieDefiTx = (tx) => new DexieDefiTx(new Uint8Array(tx.txId.toBuffer()), new Uint8Array(tx.userId.toBuffer()), ProofId.DEFI_DEPOSIT, new Uint8Array(tx.bridgeCallData.toBuffer()), tx.depositValue.toString(), tx.txFee.toString(), tx.txRefNo, tx.created, new Uint8Array(tx.partialState), new Uint8Array(tx.partialStateSecret), tx.settled ? tx.settled.getTime() : 0, tx.claimSettled ? tx.claimSettled.getTime() : 0, tx.nullifier ? new Uint8Array(tx.nullifier) : undefined, tx.interactionNonce, tx.isAsync, tx.success, tx.outputValueA?.toString(), tx.outputValueB?.toString(), tx.finalised, tx.claimTxId ? new Uint8Array(tx.claimTxId.toBuffer()) : undefined);
const fromDexieDefiTx = ({ txId, userId, bridgeId, depositValue, txFee, txRefNo, created, nullifier, partialState, partialStateSecret, settled, interactionNonce, isAsync, success, outputValueA, outputValueB, finalised, claimSettled, claimTxId, }) => new CoreDefiTx(new TxId(Buffer.from(txId)), new GrumpkinAddress(Buffer.from(userId)), BridgeCallData.fromBuffer(Buffer.from(bridgeId)), BigInt(depositValue), BigInt(txFee), txRefNo, created, Buffer.from(partialState), Buffer.from(partialStateSecret), nullifier ? Buffer.from(nullifier) : undefined, settled ? new Date(settled) : undefined, interactionNonce, isAsync, success, outputValueA ? BigInt(outputValueA) : undefined, outputValueB ? BigInt(outputValueB) : undefined, finalised, claimSettled ? new Date(claimSettled) : undefined, claimTxId ? new TxId(Buffer.from(claimTxId)) : undefined);
class DexieSpendingKey {
    constructor(userId, key, treeIndex, hashPath) {
        this.userId = userId;
        this.key = key;
        this.treeIndex = treeIndex;
        this.hashPath = hashPath;
    }
}
const toDexieSpendingKey = ({ userId, key, treeIndex, hashPath }) => new DexieSpendingKey(new Uint8Array(userId.toBuffer()), new Uint8Array(key), treeIndex, new Uint8Array(hashPath));
const fromDexieSpendingKey = ({ userId, key, hashPath, ...rest }) => ({
    ...rest,
    userId: new GrumpkinAddress(Buffer.from(userId)),
    key: Buffer.from(key),
    hashPath: Buffer.from(hashPath),
});
class DexieAlias {
    constructor(accountPublicKey, aliasHash, index, noteCommitment1, spendingPublicKeyX) {
        this.accountPublicKey = accountPublicKey;
        this.aliasHash = aliasHash;
        this.index = index;
        this.noteCommitment1 = noteCommitment1;
        this.spendingPublicKeyX = spendingPublicKeyX;
    }
}
const toDexieAlias = ({ accountPublicKey, aliasHash, index, noteCommitment1, spendingPublicKeyX }) => new DexieAlias(new Uint8Array(accountPublicKey.toBuffer()), new Uint8Array(aliasHash.toBuffer()), index, noteCommitment1 ? new Uint8Array(noteCommitment1) : undefined, spendingPublicKeyX ? new Uint8Array(spendingPublicKeyX) : undefined);
const fromDexieAlias = ({ accountPublicKey, aliasHash, index, noteCommitment1, spendingPublicKeyX, }) => ({
    accountPublicKey: new GrumpkinAddress(Buffer.from(accountPublicKey)),
    aliasHash: new AliasHash(Buffer.from(aliasHash)),
    index,
    noteCommitment1: noteCommitment1 ? Buffer.from(noteCommitment1) : undefined,
    spendingPublicKeyX: spendingPublicKeyX ? Buffer.from(spendingPublicKeyX) : undefined,
});
class DexieKey {
    constructor(name, value, size, count) {
        this.name = name;
        this.value = value;
        this.size = size;
        this.count = count;
    }
}
export class DexieDatabase {
    constructor(dbName = 'hummus', version = 8) {
        this.dbName = dbName;
        this.version = version;
        this.debug = createDebugLogger('bb:dexie_database');
    }
    async open() {
        if (await Dexie.exists(this.dbName)) {
            const db = await new Dexie(this.dbName).open();
            if (db.verno < 8) {
                this.debug(`Upgrade db from version ${db.verno} to ${this.version}. Deleting all tables...`);
                // Breaking changes in version 8:
                // - Change the primary key of alias table from `accountPublicKey` to `aliasHash`.
                // - Remove claimTx table and store the data in userTx table.
                // Dexie does not support changing primary key for an existing table. We have to delete the alias table and
                // recreate it.
                // Data in claimTx would have to be copied to the associated defiTx in userTx table.
                // Easier to delete all tables before upgrading to version 8, and make the users resync and reconstruct everthing.
                await db.delete();
            }
        }
        this.createTables();
    }
    close() {
        this.dexie.close();
        return Promise.resolve();
    }
    async clear() {
        await this.dexie.delete();
        this.createTables();
    }
    async addNote(note) {
        await this.note.put(toDexieNote(note));
    }
    async getNote(commitment) {
        const note = await this.note.get({ commitment: new Uint8Array(commitment) });
        return note ? fromDexieNote(note) : undefined;
    }
    async getNoteByNullifier(nullifier) {
        const note = await this.note.get({ nullifier: new Uint8Array(nullifier) });
        return note ? fromDexieNote(note) : undefined;
    }
    async nullifyNote(nullifier) {
        await this.note.where({ nullifier: new Uint8Array(nullifier) }).modify({ nullified: 1 });
    }
    async getNotes(userId) {
        return (await this.note.where({ owner: new Uint8Array(userId.toBuffer()), nullified: 0 }).toArray()).map(fromDexieNote);
    }
    async getPendingNotes(userId) {
        return (await this.note.where({ owner: new Uint8Array(userId.toBuffer()), pending: 1 }).toArray()).map(fromDexieNote);
    }
    async removeNote(nullifier) {
        await this.note.where({ nullifier: new Uint8Array(nullifier) }).delete();
    }
    async getUser(accountPublicKey) {
        const user = await this.user.get(new Uint8Array(accountPublicKey.toBuffer()));
        return user ? fromDexieUser(user) : undefined;
    }
    async getUsers() {
        return (await this.user.toArray()).map(fromDexieUser);
    }
    async addUser(user) {
        await this.user.put(toDexieUser(user));
    }
    async updateUser(user) {
        await this.user
            .where({ accountPublicKey: new Uint8Array(user.accountPublicKey.toBuffer()) })
            .modify(toDexieUser(user));
    }
    async removeUser(accountPublicKey) {
        const userId = new Uint8Array(accountPublicKey.toBuffer());
        await this.user.where({ accountPublicKey: userId }).delete();
        await this.userTx.where({ userId }).delete();
        await this.spendingKey.where({ userId }).delete();
        await this.note.where({ owner: userId }).delete();
    }
    async resetUsers() {
        await this.user.toCollection().modify({ syncedToRollup: -1 });
        await this.note.clear();
        await this.userTx.clear();
        await this.spendingKey.clear();
    }
    async upsertPaymentTx(tx) {
        await this.userTx.put(toDexiePaymentTx(tx));
    }
    async getPaymentTx(userId, txId) {
        const tx = await this.userTx.get({
            txId: new Uint8Array(txId.toBuffer()),
            userId: new Uint8Array(userId.toBuffer()),
        });
        return tx && [ProofId.DEPOSIT, ProofId.WITHDRAW, ProofId.SEND].includes(tx.proofId)
            ? fromDexiePaymentTx(tx)
            : undefined;
    }
    async getPaymentTxs(userId) {
        const txs = (await this.userTx
            .where({ userId: new Uint8Array(userId.toBuffer()) })
            .reverse()
            .sortBy('settled')).filter(p => [ProofId.DEPOSIT, ProofId.WITHDRAW, ProofId.SEND].includes(p.proofId));
        return sortTxs(txs).map(fromDexiePaymentTx);
    }
    async upsertAccountTx(tx) {
        await this.userTx.put(toDexieAccountTx(tx));
    }
    async getAccountTx(txId) {
        const tx = await this.userTx.get({
            txId: new Uint8Array(txId.toBuffer()),
            proofId: ProofId.ACCOUNT,
        });
        return tx ? fromDexieAccountTx(tx) : undefined;
    }
    async getAccountTxs(userId) {
        const txs = (await this.userTx
            .where({ userId: new Uint8Array(userId.toBuffer()), proofId: ProofId.ACCOUNT })
            .reverse()
            .sortBy('settled'));
        return sortTxs(txs).map(fromDexieAccountTx);
    }
    async upsertDefiTx(tx) {
        await this.userTx.put(toDexieDefiTx(tx));
    }
    async getDefiTx(txId) {
        const tx = await this.userTx.get({
            txId: new Uint8Array(txId.toBuffer()),
            proofId: ProofId.DEFI_DEPOSIT,
        });
        return tx ? fromDexieDefiTx(tx) : undefined;
    }
    async getDefiTxs(userId) {
        const txs = (await this.userTx
            .where({ userId: new Uint8Array(userId.toBuffer()), proofId: ProofId.DEFI_DEPOSIT })
            .reverse()
            .sortBy('settled'));
        return sortTxs(txs).map(fromDexieDefiTx);
    }
    async getUnclaimedDefiTxs(userId) {
        const txs = (await this.userTx
            .where({ userId: new Uint8Array(userId.toBuffer()), proofId: ProofId.DEFI_DEPOSIT, claimSettled: 0 })
            .reverse()
            .sortBy('settled'));
        return sortTxs(txs).map(fromDexieDefiTx);
    }
    async getUserTxs(userId) {
        const txs = await this.userTx
            .where({ userId: new Uint8Array(userId.toBuffer()) })
            .reverse()
            .sortBy('settled');
        return sortTxs(txs).map(fromDexieUserTx);
    }
    async isUserTxSettled(txId) {
        const txs = await this.userTx.where({ txId: new Uint8Array(txId.toBuffer()) }).toArray();
        return txs.length > 0 && txs.every(tx => tx.settled);
    }
    async getPendingUserTxs(userId) {
        const unsettledTxs = await this.userTx.where({ userId: new Uint8Array(userId.toBuffer()), settled: 0 }).toArray();
        return unsettledTxs.map(fromDexieUserTx);
    }
    async removeUserTx(userId, txId) {
        await this.userTx
            .where({ txId: new Uint8Array(txId.toBuffer()), userId: new Uint8Array(userId.toBuffer()) })
            .delete();
    }
    async addSpendingKey(spendingKey) {
        await this.spendingKey.put(toDexieSpendingKey(spendingKey));
    }
    async addSpendingKeys(spendingKeys) {
        await this.spendingKey.bulkPut(spendingKeys.map(toDexieSpendingKey));
    }
    async getSpendingKey(userId, spendingKey) {
        const key = await this.spendingKey.get({
            userId: new Uint8Array(userId.toBuffer()),
            key: new Uint8Array(spendingKey.toBuffer().slice(0, 32)),
        });
        return key ? fromDexieSpendingKey(key) : undefined;
    }
    async getSpendingKeys(userId) {
        const spendingKeys = await this.spendingKey.where({ userId: new Uint8Array(userId.toBuffer()) }).toArray();
        return spendingKeys.map(fromDexieSpendingKey);
    }
    async removeSpendingKeys(userId) {
        await this.spendingKey.where({ userId: new Uint8Array(userId.toBuffer()) }).delete();
    }
    async addAlias(alias) {
        return await this.addAliases([alias]);
    }
    async addAliases(aliases) {
        const dbAliases = aliases.map(toDexieAlias);
        await this.alias.bulkPut(dbAliases);
    }
    async getAlias(accountPublicKey) {
        const alias = await this.alias.get({ accountPublicKey: new Uint8Array(accountPublicKey.toBuffer()) });
        return alias ? fromDexieAlias(alias) : undefined;
    }
    async getAliasByAliasHash(aliasHash) {
        const aliases = await this.alias.where({ aliasHash: new Uint8Array(aliasHash.toBuffer()) }).toArray();
        return aliases.map(fromDexieAlias).sort((a, b) => (a.index < b.index ? 1 : -1))[0];
    }
    async addKey(name, value, MAX_BYTE_LENGTH = 100000000) {
        const size = value.byteLength;
        if (size <= MAX_BYTE_LENGTH) {
            await this.key.put({ name, value, size });
        }
        else {
            await this.deleteKey(name);
            const count = Math.ceil(size / MAX_BYTE_LENGTH);
            for (let i = 0; i < count; ++i) {
                const subValue = new Uint8Array(value.buffer.slice(MAX_BYTE_LENGTH * i, MAX_BYTE_LENGTH * (i + 1)));
                await this.key.add({
                    name: toSubKeyName(name, i),
                    value: subValue,
                    size: subValue.byteLength,
                });
            }
            await this.key.add({ name, value: new Uint8Array(), size, count });
        }
    }
    async getKey(name) {
        const key = await this.key.get(name);
        if (!key || !key.size) {
            return undefined;
        }
        if (!key.count) {
            return Buffer.from(key.value);
        }
        const subKeyNames = [...Array(key.count)].map((_, i) => toSubKeyName(name, i));
        const subKeys = await this.key.bulkGet(subKeyNames);
        if (subKeys.some(k => !k)) {
            return undefined;
        }
        const value = Buffer.alloc(key.size);
        let prevSize = 0;
        for (let i = 0; i < key.count; ++i) {
            value.set(subKeys[i].value, prevSize);
            prevSize += subKeys[i].value.byteLength;
        }
        return value;
    }
    async deleteKey(name) {
        const key = await this.key.get(name);
        if (!key) {
            return;
        }
        for (let i = 0; i < key.count; ++i) {
            await this.key.where({ name: toSubKeyName(name, i) }).delete();
        }
        await this.key.where({ name }).delete();
    }
    async acquireLock(name, timeout) {
        const now = Date.now();
        await this.mutex.filter(lock => lock.name === name && lock.expiredAt <= now).delete();
        try {
            await this.mutex.add({ name, expiredAt: now + timeout });
            return true;
        }
        catch (e) {
            return false;
        }
    }
    async extendLock(name, timeout) {
        await this.mutex.update(name, { expiredAt: Date.now() + timeout });
    }
    async releaseLock(name) {
        await this.mutex.delete(name);
    }
    async bulkUserStateUpdate(data) {
        await this.dexie.transaction('rw', ['note', 'spendingKey', 'user', 'userTx'], async () => {
            await Promise.all([
                data.updateUserArgs.map(args => this.updateUser(...args)),
                data.addSpendingKeyArgs.map(args => this.addSpendingKey(...args)),
                data.upsertAccountTxArgs.map(args => this.upsertAccountTx(...args)),
                data.upsertPaymentTxArgs.map(args => this.upsertPaymentTx(...args)),
                data.upsertDefiTxArgs.map(args => this.upsertDefiTx(...args)),
                data.addNoteArgs.map(args => this.addNote(...args)),
            ].flat());
            await Promise.all(data.nullifyNoteArgs.map(args => this.nullifyNote(...args)));
        });
    }
    createTables() {
        this.dexie = new Dexie(this.dbName);
        this.dexie.version(this.version).stores({
            alias: '&aliasHash, accountPublicKey',
            key: '&name',
            mutex: '&name',
            note: '&commitment, nullifier, [owner+nullified], [owner+pending]',
            spendingKey: '&[userId+key], userId',
            user: '&accountPublicKey',
            userTx: '&[txId+userId], txId, [txId+proofId], [userId+proofId], userId, [userId+settled], [userId+proofId+claimSettled]',
        });
        this.alias = this.dexie.table('alias');
        this.key = this.dexie.table('key');
        this.mutex = this.dexie.table('mutex');
        this.note = this.dexie.table('note');
        this.spendingKey = this.dexie.table('spendingKey');
        this.user = this.dexie.table('user');
        this.userTx = this.dexie.table('userTx');
    }
}
//# sourceMappingURL=data:application/json;base64,