import { Mutex } from 'async-mutex';
export class SyncDatabase {
    constructor(underlying) {
        this.underlying = underlying;
        this.writeMutex = new Mutex();
    }
    close() {
        return this.synchronise(() => this.underlying.close());
    }
    clear() {
        return this.synchronise(() => this.underlying.clear());
    }
    addNote(note) {
        return this.synchronise(() => this.underlying.addNote(note));
    }
    getNote(commitment) {
        return this.synchronise(() => this.underlying.getNote(commitment));
    }
    getNoteByNullifier(nullifier) {
        return this.synchronise(() => this.underlying.getNoteByNullifier(nullifier));
    }
    nullifyNote(nullifier) {
        return this.synchronise(() => this.underlying.nullifyNote(nullifier));
    }
    getNotes(userId) {
        return this.synchronise(() => this.underlying.getNotes(userId));
    }
    getPendingNotes(userId) {
        return this.synchronise(() => this.underlying.getPendingNotes(userId));
    }
    removeNote(nullifier) {
        return this.synchronise(() => this.underlying.removeNote(nullifier));
    }
    getUser(accountPublicKey) {
        return this.synchronise(() => this.underlying.getUser(accountPublicKey));
    }
    getUsers() {
        return this.synchronise(() => this.underlying.getUsers());
    }
    addUser(user) {
        return this.synchronise(() => this.underlying.addUser(user));
    }
    updateUser(user) {
        return this.synchronise(() => this.underlying.updateUser(user));
    }
    removeUser(accountPublicKey) {
        return this.synchronise(() => this.underlying.removeUser(accountPublicKey));
    }
    resetUsers() {
        return this.synchronise(() => this.underlying.resetUsers());
    }
    upsertPaymentTx(tx) {
        return this.synchronise(() => this.underlying.upsertPaymentTx(tx));
    }
    getPaymentTx(userId, txId) {
        return this.synchronise(() => this.underlying.getPaymentTx(userId, txId));
    }
    getPaymentTxs(userId) {
        return this.synchronise(() => this.underlying.getPaymentTxs(userId));
    }
    upsertAccountTx(tx) {
        return this.synchronise(() => this.underlying.upsertAccountTx(tx));
    }
    getAccountTx(txId) {
        return this.synchronise(() => this.underlying.getAccountTx(txId));
    }
    getAccountTxs(userId) {
        return this.synchronise(() => this.underlying.getAccountTxs(userId));
    }
    upsertDefiTx(tx) {
        return this.synchronise(() => this.underlying.upsertDefiTx(tx));
    }
    getUnclaimedDefiTxs(userId) {
        return this.synchronise(() => this.underlying.getUnclaimedDefiTxs(userId));
    }
    getDefiTx(txId) {
        return this.synchronise(() => this.underlying.getDefiTx(txId));
    }
    getDefiTxs(userId) {
        return this.synchronise(() => this.underlying.getDefiTxs(userId));
    }
    getUserTxs(userId) {
        return this.synchronise(() => this.underlying.getUserTxs(userId));
    }
    isUserTxSettled(txId) {
        return this.synchronise(() => this.underlying.isUserTxSettled(txId));
    }
    getPendingUserTxs(userId) {
        return this.synchronise(() => this.underlying.getPendingUserTxs(userId));
    }
    removeUserTx(userId, txId) {
        return this.synchronise(() => this.underlying.removeUserTx(userId, txId));
    }
    addSpendingKey(spendingKey) {
        return this.synchronise(() => this.underlying.addSpendingKey(spendingKey));
    }
    addSpendingKeys(spendingKeys) {
        return this.synchronise(() => this.underlying.addSpendingKeys(spendingKeys));
    }
    getSpendingKey(userId, spendingKey) {
        return this.synchronise(() => this.underlying.getSpendingKey(userId, spendingKey));
    }
    getSpendingKeys(userId) {
        return this.synchronise(() => this.underlying.getSpendingKeys(userId));
    }
    removeSpendingKeys(userId) {
        return this.synchronise(() => this.underlying.removeSpendingKeys(userId));
    }
    addAlias(alias) {
        return this.synchronise(() => this.underlying.addAlias(alias));
    }
    addAliases(alias) {
        return this.synchronise(() => this.underlying.addAliases(alias));
    }
    getAlias(accountPublicKey) {
        return this.synchronise(() => this.underlying.getAlias(accountPublicKey));
    }
    getAliasByAliasHash(aliasHash) {
        return this.synchronise(() => this.underlying.getAliasByAliasHash(aliasHash));
    }
    addKey(name, value) {
        return this.synchronise(() => this.underlying.addKey(name, value));
    }
    getKey(name) {
        return this.synchronise(() => this.underlying.getKey(name));
    }
    deleteKey(name) {
        return this.synchronise(() => this.underlying.deleteKey(name));
    }
    acquireLock(name, timeout) {
        return this.synchronise(() => this.underlying.acquireLock(name, timeout));
    }
    extendLock(name, timeout) {
        return this.synchronise(() => this.underlying.extendLock(name, timeout));
    }
    releaseLock(name) {
        return this.synchronise(() => this.underlying.releaseLock(name));
    }
    bulkUserStateUpdate(data) {
        return this.synchronise(() => this.underlying.bulkUserStateUpdate(data));
    }
    async synchronise(fn) {
        const release = await this.writeMutex.acquire();
        try {
            return await fn();
        }
        finally {
            release();
        }
    }
}
//# sourceMappingURL=data:application/json;base64,