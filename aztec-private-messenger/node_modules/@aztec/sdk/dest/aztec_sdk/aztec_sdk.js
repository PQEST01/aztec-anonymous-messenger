import { isVirtualAsset } from '@aztec/barretenberg/asset';
import { ProofId } from '@aztec/barretenberg/client_proofs';
import { Blake2s, keccak256, randomBytes } from '@aztec/barretenberg/crypto';
import { retryUntil } from '@aztec/barretenberg/retry';
import { TxSettlementTime, } from '@aztec/barretenberg/rollup_provider';
import { BarretenbergWasm } from '@aztec/barretenberg/wasm';
import { roundUp } from '@aztec/barretenberg/rounding';
import { validateSignature, Web3Signer } from '@aztec/blockchain';
import { EventEmitter } from 'events';
import { AddSpendingKeyController, DefiController, DepositController, FeeController, MigrateAccountController, RecoverAccountController, RegisterController, TransferController, WithdrawController, createTxRefNo, } from '../controllers/index.js';
import { SdkEvent } from '../core_sdk/index.js';
import { SchnorrSigner } from '../signer/index.js';
import { RecoveryData, RecoveryPayload } from '../user/index.js';
import { AztecSdkUser } from './aztec_sdk_user.js';
import { FeeCalculator } from './fee_calculator.js';
import { groupUserTxs } from './group_user_txs.js';
import { TxValueCalculator } from './tx_value_calculator.js';
export class AztecSdk extends EventEmitter {
    constructor(core, blockchain, provider) {
        super();
        this.core = core;
        this.blockchain = blockchain;
        this.provider = provider;
        this.feeCalculator = new FeeCalculator(core, blockchain);
        this.txValueCalculator = new TxValueCalculator(core, blockchain);
        // Forward all core sdk events.
        for (const e in SdkEvent) {
            const event = SdkEvent[e];
            this.core.on(event, (...args) => this.emit(event, ...args));
        }
    }
    async run() {
        await this.core.run();
    }
    async destroy() {
        await this.core.destroy();
        this.removeAllListeners();
    }
    async awaitSynchronised(timeout) {
        return await this.core.awaitSynchronised(timeout);
    }
    async isUserSynching(userId) {
        return await this.core.isUserSynching(userId);
    }
    async awaitUserSynchronised(userId, timeout) {
        return await this.core.awaitUserSynchronised(userId, timeout);
    }
    async awaitSettlement(txId, timeout) {
        return await this.core.awaitSettlement(txId, timeout);
    }
    async awaitDefiDepositCompletion(txId, timeout) {
        return await this.core.awaitDefiDepositCompletion(txId, timeout);
    }
    async awaitDefiFinalisation(txId, timeout) {
        return await this.core.awaitDefiFinalisation(txId, timeout);
    }
    async awaitDefiSettlement(txId, timeout) {
        return await this.core.awaitDefiSettlement(txId, timeout);
    }
    async awaitAllUserTxsSettled(timeout) {
        const accountPublicKeys = await this.core.getUsers();
        const allUserTxsSettled = async () => {
            const txs = (await Promise.all(accountPublicKeys.map(pk => this.core.getUserTxs(pk)))).flat();
            return txs.every(tx => tx.settled);
        };
        await retryUntil(allUserTxsSettled, 'all user txs settled', timeout);
    }
    async awaitAllUserTxsClaimed(timeout) {
        const accountPublicKeys = await this.core.getUsers();
        const allUserTxsClaimed = async () => {
            const txs = (await Promise.all(accountPublicKeys.map(pk => this.getDefiTxs(pk)))).flat();
            return txs.every(tx => tx.interactionResult.claimSettled);
        };
        await retryUntil(allUserTxsClaimed, 'all user txs claimed', timeout);
    }
    async getLocalStatus() {
        return await this.core.getLocalStatus();
    }
    async getRemoteStatus() {
        return await this.core.getRemoteStatus();
    }
    async sendConsoleLog(clientData, preserveLog = false) {
        await this.core.sendConsoleLog(clientData, preserveLog);
    }
    async isAccountRegistered(accountPublicKey, includePending = false) {
        return await this.core.isAccountRegistered(accountPublicKey, includePending);
    }
    async isAliasRegistered(alias, includePending = false) {
        return await this.core.isAliasRegistered(alias, includePending);
    }
    async isAliasRegisteredToAccount(accountPublicKey, alias, includePending = false) {
        return await this.core.isAliasRegisteredToAccount(accountPublicKey, alias, includePending);
    }
    async getAccountPublicKey(alias) {
        return await this.core.getAccountPublicKey(alias);
    }
    async getAccountIndex(alias) {
        return await this.core.getAccountIndex(alias);
    }
    async getTxFees(assetId, { feeSignificantFigures = 0 } = {}) {
        const txFees = await this.core.getTxFees(assetId);
        return txFees.map(fees => fees.map((fee) => ({ ...fee, value: roundUp(fee.value, feeSignificantFigures) })));
    }
    async queryDefiPublishStats(query) {
        return await this.core.queryDefiPublishStats(query);
    }
    async userExists(accountPublicKey) {
        return await this.core.userExists(accountPublicKey);
    }
    async addUser(accountPrivateKey, registrationSync = false, registrationSyncMarginBlocks = 10) {
        const userId = await this.core.addUser(accountPrivateKey, registrationSync, registrationSyncMarginBlocks);
        return new AztecSdkUser(userId, this);
    }
    async removeUser(userId) {
        return await this.core.removeUser(userId);
    }
    /**
     * Returns a AztecSdkUser for a locally resolved user.
     */
    async getUser(userId) {
        if (!(await this.core.userExists(userId))) {
            throw new Error(`User not found: ${userId}`);
        }
        return new AztecSdkUser(userId, this);
    }
    async getUserSyncedToRollup(userId) {
        return await this.core.getUserSyncedToRollup(userId);
    }
    async getUsers() {
        return await this.core.getUsers();
    }
    getAccountKeySigningData() {
        return Buffer.from('Sign this message to generate your Aztec Privacy Key. This key lets the application decrypt your balance on Aztec.\n\nIMPORTANT: Only sign this message if you trust the application.');
    }
    getSpendingKeySigningData() {
        return Buffer.from('Sign this message to generate your Aztec Spending Key. This key lets the application spend your funds on Aztec.\n\nIMPORTANT: Only sign this message if you trust the application.');
    }
    async generateAccountKeyPair(account, provider = this.provider) {
        const ethSigner = new Web3Signer(provider);
        const signingData = this.getAccountKeySigningData();
        const signature = await ethSigner.signPersonalMessage(signingData, account);
        const privateKey = signature.slice(0, 32);
        const publicKey = await this.derivePublicKey(privateKey);
        return { publicKey, privateKey };
    }
    async generateSpendingKeyPair(account, provider = this.provider) {
        const ethSigner = new Web3Signer(provider);
        const signingData = this.getSpendingKeySigningData();
        const signature = await ethSigner.signPersonalMessage(signingData, account);
        const privateKey = signature.slice(0, 32);
        const publicKey = await this.derivePublicKey(privateKey);
        return { publicKey, privateKey };
    }
    async createSchnorrSigner(privateKey) {
        const publicKey = await this.core.derivePublicKey(privateKey);
        return new SchnorrSigner(this.core, publicKey, privateKey);
    }
    async derivePublicKey(privateKey) {
        return await this.core.derivePublicKey(privateKey);
    }
    async deriveLegacySigningMessageHash(address) {
        const barretenberg = await BarretenbergWasm.new();
        const blake2s = new Blake2s(barretenberg);
        const signingMessage = blake2s.hashToField(address.toBuffer());
        return Promise.resolve(keccak256(signingMessage));
    }
    getAssetIdByAddress(address, gasLimit) {
        return this.blockchain.getAssetIdByAddress(address, gasLimit);
    }
    getAssetIdBySymbol(symbol, gasLimit) {
        return this.blockchain.getAssetIdBySymbol(symbol, gasLimit);
    }
    fromBaseUnits({ assetId, value }, symbol = false, precision) {
        if (isVirtualAsset(assetId)) {
            const nonce = assetId - 2 ** 29;
            const v = value.toLocaleString('en');
            return symbol ? `${v} (nonce ${nonce})` : v;
        }
        const v = this.blockchain.getAsset(assetId).fromBaseUnits(value, precision);
        return symbol ? `${v} ${this.getAssetInfo(assetId).symbol}` : v;
    }
    toBaseUnits(assetId, value) {
        if (isVirtualAsset(assetId)) {
            return { assetId, value: BigInt(value.replaceAll(',', '')) };
        }
        return { assetId, value: this.blockchain.getAsset(assetId).toBaseUnits(value) };
    }
    getAssetInfo(assetId) {
        return this.blockchain.getAsset(assetId).getStaticInfo();
    }
    async isFeePayingAsset(assetId) {
        if (isVirtualAsset(assetId)) {
            return false;
        }
        return (await this.core.getLocalStatus()).feePayingAssetIds.includes(assetId);
    }
    isVirtualAsset(assetId) {
        return isVirtualAsset(assetId);
    }
    async mint({ assetId, value }, account, options) {
        return await this.blockchain.getAsset(assetId).mint(value, account, options);
    }
    async setSupportedAsset(assetAddress, assetGasLimit, options) {
        return await this.blockchain.setSupportedAsset(assetAddress, assetGasLimit, options);
    }
    getBridgeAddressId(address, gasLimit) {
        return this.blockchain.getBridgeAddressId(address, gasLimit);
    }
    async setSupportedBridge(bridgeAddress, bridgeGasLimit, options) {
        return await this.blockchain.setSupportedBridge(bridgeAddress, bridgeGasLimit, options);
    }
    async processAsyncDefiInteraction(interactionNonce, options) {
        return await this.blockchain.processAsyncDefiInteraction(interactionNonce, options);
    }
    async getDepositFees(assetId, options) {
        return await this.feeCalculator.getDepositFees(assetId, options);
    }
    async getPendingDepositTxs() {
        return await this.core.getPendingDepositTxs();
    }
    createDepositController(depositor, assetValue, fee, recipient, recipientSpendingKeyRequired = false, provider = this.provider) {
        return new DepositController(assetValue, fee, depositor, recipient, recipientSpendingKeyRequired, this.core, this.blockchain, provider);
    }
    async getWithdrawFees(assetId, options) {
        return await this.feeCalculator.getWithdrawFees(assetId, options);
    }
    async getMaxWithdrawValue(userId, assetId, options) {
        return await this.txValueCalculator.getMaxWithdrawValue(userId, assetId, options);
    }
    createWithdrawController(userId, userSigner, assetValue, fee, to) {
        return new WithdrawController(userId, userSigner, assetValue, fee, to, this.core);
    }
    async getTransferFees(assetId, options) {
        return await this.feeCalculator.getTransferFees(assetId, options);
    }
    async getMaxTransferValue(userId, assetId, options) {
        return await this.txValueCalculator.getMaxTransferValue(userId, assetId, options);
    }
    createTransferController(userId, userSigner, assetValue, fee, recipient, recipientSpendingKeyRequired = false) {
        return new TransferController(userId, userSigner, assetValue, fee, recipient, recipientSpendingKeyRequired, this.core);
    }
    async getDefiFees(bridgeCallData, options) {
        return await this.feeCalculator.getDefiFees(bridgeCallData, options);
    }
    async getMaxDefiValue(userId, bridgeCallData, options) {
        return await this.txValueCalculator.getMaxDefiValue(userId, bridgeCallData, options);
    }
    createDefiController(userId, userSigner, bridgeCallData, assetValue, fee) {
        return new DefiController(userId, userSigner, bridgeCallData, assetValue, fee, this.core);
    }
    async generateAccountRecoveryData(accountPublicKey, alias, trustedThirdPartyPublicKeys) {
        const socialRecoverySigner = await this.createSchnorrSigner(randomBytes(32));
        const recoveryPublicKey = socialRecoverySigner.getPublicKey();
        return Promise.all(trustedThirdPartyPublicKeys.map(async (trustedThirdPartyPublicKey) => {
            const signingData = await this.core.createAccountProofSigningData(accountPublicKey, alias, false, recoveryPublicKey, undefined, trustedThirdPartyPublicKey);
            const signature = await socialRecoverySigner.signMessage(signingData);
            const recoveryData = new RecoveryData(accountPublicKey, signature);
            return new RecoveryPayload(trustedThirdPartyPublicKey, recoveryPublicKey, recoveryData);
        }));
    }
    async getRegisterFees(assetId, options) {
        return await this.feeCalculator.getRegisterFees(assetId, options);
    }
    createRegisterController(userId, alias, accountPrivateKey, spendingPublicKey, recoveryPublicKey, deposit, fee, depositor, provider = this.provider) {
        return new RegisterController(userId, alias, accountPrivateKey, spendingPublicKey, recoveryPublicKey, deposit, fee, depositor, this.core, this.blockchain, provider);
    }
    async getRecoverAccountFees(assetId, options) {
        return await this.feeCalculator.getRecoverAccountFees(assetId, options);
    }
    createRecoverAccountController(recoveryPayload, deposit, fee, depositor, provider = this.provider) {
        return new RecoverAccountController(recoveryPayload, deposit, fee, depositor, this.core, this.blockchain, provider);
    }
    async getAddSpendingKeyFees(assetId, options) {
        return await this.feeCalculator.getAddSpendingKeyFees(assetId, options);
    }
    createAddSpendingKeyController(userId, userSigner, spendingPublicKey1, spendingPublicKey2, fee) {
        return new AddSpendingKeyController(userId, userSigner, spendingPublicKey1, spendingPublicKey2, fee, this.core);
    }
    async getMigrateAccountFees(assetId, options) {
        return await this.feeCalculator.getMigrateAccountFees(assetId, options);
    }
    createMigrateAccountController(userId, userSigner, newAccountPrivateKey, newSpendingPublicKey, recoveryPublicKey, deposit, fee, depositor, provider = this.provider) {
        return new MigrateAccountController(userId, userSigner, newAccountPrivateKey, newSpendingPublicKey, recoveryPublicKey, deposit, fee, depositor, this.core, this.blockchain, provider);
    }
    async getProofTxsFees(assetId, proofTxs, options) {
        const proofs = proofTxs.map(p => p.proofData);
        return await this.feeCalculator.getProofDataFees(assetId, proofs, options);
    }
    createFeeController(userId, userSigner, proofTxs, fee) {
        return new FeeController(userId, userSigner, proofTxs, fee, this.core);
    }
    async depositFundsToContract({ assetId, value }, from, provider = this.provider) {
        return await this.blockchain.depositPendingFunds(assetId, value, undefined, {
            signingAddress: from,
            provider,
        });
    }
    async getUserPendingDeposit(assetId, account) {
        return await this.blockchain.getUserPendingDeposit(assetId, account);
    }
    async getUserPendingFunds(assetId, account) {
        const deposited = await this.getUserPendingDeposit(assetId, account);
        const txs = await this.getPendingDepositTxs();
        const unsettledDeposit = txs
            .filter(tx => tx.assetId === assetId && tx.publicOwner.equals(account))
            .reduce((sum, tx) => sum + tx.value, BigInt(0));
        return deposited - unsettledDeposit;
    }
    async isContract(address) {
        return await this.blockchain.isContract(address);
    }
    validateSignature(publicOwner, signature, signingData) {
        return validateSignature(publicOwner, signature, signingData);
    }
    async getTransactionReceipt(txHash, timeout, interval = 1) {
        return await this.blockchain.getTransactionReceipt(txHash, timeout, interval);
    }
    async flushRollup(userId, userSigner) {
        const assetId = 0;
        const userSpendingKeyRequired = !userSigner.getPublicKey().equals(userId);
        const fee = (await this.getTransferFees(assetId, {
            userId,
            userSpendingKeyRequired,
            assetValue: { assetId, value: BigInt(0) },
        }))[TxSettlementTime.INSTANT];
        const proofInputs = await this.core.createPaymentProofInputs(userId, fee.assetId, BigInt(0), BigInt(0), fee.value, BigInt(0), BigInt(0), undefined, true, undefined, userSigner.getPublicKey(), 2);
        const txRefNo = proofInputs.length > 1 ? createTxRefNo() : 0;
        const proofs = [];
        for (const proofInput of proofInputs) {
            proofInput.signature = await userSigner.signMessage(proofInput.signingData);
            proofs.push(await this.core.createPaymentProof(proofInput, txRefNo));
        }
        const txIds = await this.core.sendProofs(proofs);
        await Promise.all(txIds.map(txId => this.core.awaitSettlement(txId)));
    }
    async getSpendingKeys(userId) {
        return await this.core.getSpendingKeys(userId);
    }
    async getPublicBalance(ethAddress, assetId) {
        return { assetId, value: await this.blockchain.getAsset(assetId).balanceOf(ethAddress) };
    }
    async getBalances(userId) {
        return await this.core.getBalances(userId);
    }
    async getBalance(userId, assetId) {
        return { assetId, value: await this.core.getBalance(userId, assetId) };
    }
    async getFormattedBalance(userId, assetId, symbol = true, precision) {
        return this.fromBaseUnits(await this.getBalance(userId, assetId), symbol, precision);
    }
    async getSpendableSum(userId, assetId, spendingKeyRequired, excludePendingNotes) {
        return await this.core.getSpendableSum(userId, assetId, spendingKeyRequired, excludePendingNotes);
    }
    async getSpendableSums(userId, spendingKeyRequired, excludePendingNotes) {
        return await this.core.getSpendableSums(userId, spendingKeyRequired, excludePendingNotes);
    }
    async getMaxSpendableValue(userId, assetId, spendingKeyRequired, excludePendingNotes, numNotes) {
        const values = await this.core.getMaxSpendableNoteValues(userId, assetId, spendingKeyRequired, excludePendingNotes, numNotes);
        return values.reduce((sum, v) => sum + v, BigInt(0));
    }
    async getUserTxs(userId) {
        const txs = await this.core.getUserTxs(userId);
        return groupUserTxs(txs);
    }
    async getPaymentTxs(userId) {
        return (await this.getUserTxs(userId)).filter(tx => [ProofId.DEPOSIT, ProofId.WITHDRAW, ProofId.SEND].includes(tx.proofId));
    }
    async getAccountTxs(userId) {
        return (await this.getUserTxs(userId)).filter(tx => tx.proofId === ProofId.ACCOUNT);
    }
    async getDefiTxs(userId) {
        return (await this.getUserTxs(userId)).filter(tx => tx.proofId === ProofId.DEFI_DEPOSIT);
    }
    async getBlocks(from, take = 1) {
        return await this.core.getBlocks(from, take);
    }
    // Exposing for medici. Remove once they have proper multisig api.
    getCoreSdk() {
        return this.core;
    }
}
//# sourceMappingURL=data:application/json;base64,