import { virtualAssetIdFlag } from '@aztec/barretenberg/bridge_call_data';
import { ProofId } from '@aztec/barretenberg/client_proofs';
import { UserAccountTx, UserDefiClaimTx, UserDefiInteractionResultState, UserDefiTx, UserPaymentTx, } from '../user_tx/index.js';
const emptyAssetValue = { assetId: 0, value: BigInt(0) };
const toUserAccountTx = ({ txId, userId, aliasHash, newSpendingPublicKey1, newSpendingPublicKey2, migrated, created, settled }, fee) => new UserAccountTx(txId, userId, aliasHash, newSpendingPublicKey1, newSpendingPublicKey2, migrated, fee, created, settled);
const toUserPaymentTx = ({ txId, userId, proofId, publicOwner, isSender, created, settled }, value, fee) => {
    return new UserPaymentTx(txId, userId, proofId, value, fee, publicOwner, isSender, created, settled);
};
const getUserDefiInteractionResultState = ({ settled, finalised, claimSettled }) => {
    if (claimSettled) {
        return UserDefiInteractionResultState.SETTLED;
    }
    if (finalised) {
        return UserDefiInteractionResultState.AWAITING_SETTLEMENT;
    }
    if (settled) {
        return UserDefiInteractionResultState.AWAITING_FINALISATION;
    }
    return UserDefiInteractionResultState.PENDING;
};
const toUserDefiTx = (tx, fee) => {
    const { txId, userId, bridgeCallData, depositValue, created, settled, interactionNonce, isAsync, success, outputValueA, outputValueB, finalised, claimSettled, } = tx;
    const state = getUserDefiInteractionResultState(tx);
    return new UserDefiTx(txId, userId, bridgeCallData, { assetId: bridgeCallData.inputAssetIdA, value: depositValue }, fee, created, settled, {
        state,
        isAsync,
        interactionNonce,
        success,
        outputValueA: outputValueA !== undefined
            ? {
                assetId: bridgeCallData.firstOutputVirtual
                    ? interactionNonce + virtualAssetIdFlag
                    : bridgeCallData.outputAssetIdA,
                value: outputValueA,
            }
            : undefined,
        outputValueB: outputValueB !== undefined && bridgeCallData.outputAssetIdB !== undefined
            ? {
                assetId: bridgeCallData.secondOutputVirtual
                    ? interactionNonce + virtualAssetIdFlag
                    : bridgeCallData.outputAssetIdB,
                value: outputValueB,
            }
            : undefined,
        claimSettled,
        finalised,
    });
};
const toUserDefiClaimTx = (claimTxId, { txId, userId, bridgeCallData, depositValue, interactionResult: { success, outputValueA, outputValueB, claimSettled, finalised }, }) => new UserDefiClaimTx(claimTxId, txId, userId, bridgeCallData, depositValue, success, outputValueA, outputValueB, finalised, claimSettled);
const getPaymentValue = ({ proofId, assetId, publicValue, privateInput, recipientPrivateOutput, senderPrivateOutput, isRecipient, }) => {
    const value = (() => {
        switch (proofId) {
            case ProofId.DEPOSIT:
                return recipientPrivateOutput;
            case ProofId.WITHDRAW:
                return publicValue;
            case ProofId.SEND:
                if (isRecipient || recipientPrivateOutput) {
                    return recipientPrivateOutput;
                }
                return privateInput - senderPrivateOutput;
        }
    })();
    return { assetId, value };
};
const getFee = (tx) => {
    if (tx.proofId === ProofId.ACCOUNT) {
        return emptyAssetValue;
    }
    if (tx.proofId === ProofId.DEFI_DEPOSIT) {
        const { bridgeCallData, txFee } = tx;
        return { assetId: bridgeCallData.inputAssetIdA, value: txFee };
    }
    const { proofId, assetId, publicValue, privateInput, recipientPrivateOutput, senderPrivateOutput, isRecipient, isSender, } = tx;
    const value = (() => {
        switch (proofId) {
            case ProofId.DEPOSIT:
                return publicValue - recipientPrivateOutput;
            case ProofId.WITHDRAW:
                return privateInput - (publicValue + senderPrivateOutput);
            case ProofId.SEND:
                if (!isSender || (!isRecipient && !recipientPrivateOutput)) {
                    return BigInt(0);
                }
                return privateInput - recipientPrivateOutput - senderPrivateOutput;
        }
    })();
    return {
        assetId,
        value,
    };
};
const getTotalFee = (txs) => {
    if (!txs.length) {
        return emptyAssetValue;
    }
    const fees = txs.map(getFee);
    const { assetId } = fees.find(fee => fee.value) || fees[0];
    if (fees.some(fee => fee.value && fee.assetId !== assetId)) {
        throw new Error('Inconsistent fee paying assets.');
    }
    return { assetId, value: fees.reduce((sum, fee) => sum + fee.value, BigInt(0)) };
};
const getPrimaryTx = (coreTxs) => {
    const txs = coreTxs.filter(tx => tx.proofId !== ProofId.SEND || !tx.privateInput || tx.privateInput !== tx.senderPrivateOutput);
    return (txs.find(tx => !tx.txRefNo) ||
        txs.find(tx => [ProofId.ACCOUNT, ProofId.DEFI_DEPOSIT, ProofId.WITHDRAW].includes(tx.proofId)) ||
        txs.find(tx => [ProofId.DEPOSIT].includes(tx.proofId)) ||
        txs.find(tx => tx.proofId === ProofId.SEND && (!tx.isSender || !tx.isRecipient || tx.recipientPrivateOutput)));
};
const toUserTx = (txs) => {
    const primaryTx = getPrimaryTx(txs);
    if (!primaryTx) {
        return;
    }
    const fee = getTotalFee(txs);
    switch (primaryTx.proofId) {
        case ProofId.ACCOUNT: {
            const depositTx = txs.find(tx => tx.proofId === ProofId.DEPOSIT);
            const depositValue = depositTx ? getPaymentValue(depositTx) : emptyAssetValue;
            if (depositValue.value) {
                return [toUserPaymentTx(depositTx, depositValue, fee), toUserAccountTx(primaryTx, emptyAssetValue)];
            }
            return [toUserAccountTx(primaryTx, fee)];
        }
        case ProofId.DEFI_DEPOSIT: {
            const userDefiTx = toUserDefiTx(primaryTx, fee);
            if (userDefiTx.interactionResult.finalised) {
                return [userDefiTx, toUserDefiClaimTx(primaryTx.claimTxId, userDefiTx)];
            }
            return [userDefiTx];
        }
        default: {
            const value = getPaymentValue(primaryTx);
            return [toUserPaymentTx(primaryTx, value, fee)];
        }
    }
};
const groupTxsByTxRefNo = (txs) => {
    const txGroups = new Map();
    for (const tx of txs) {
        const { txRefNo } = tx;
        if (!txRefNo) {
            // If txRefNo is 0, this tx is not part of a tx group.
            txGroups.set(tx.txId.toBuffer().readUInt32BE(0), [tx]);
        }
        else {
            const group = txGroups.get(txRefNo) || [];
            txGroups.set(txRefNo, [...group, tx]);
        }
    }
    return [...txGroups.values()];
};
const filterUndefined = (ts) => ts.filter((t) => !!t);
const bySettledThenCreated = (tx1, tx2) => {
    const createdSort = tx2.created.getTime() - tx1.created.getTime();
    if (tx1.settled && tx2.settled) {
        // sort based on settled time, if they are the same sort based on created
        const sort = tx2.settled.getTime() - tx1.settled.getTime();
        return sort === 0 ? createdSort : sort;
    }
    if (!tx1.settled && tx2.settled)
        return -1; // tx1 ahead of tx2 as it is not settled
    if (!tx2.settled && tx1.settled)
        return 1; //  tx2 ahead of tx1 as it is not settled
    if (!tx2.settled && !tx1.settled)
        return createdSort; // sort based on created time
    return 0;
};
export const groupUserTxs = (txs) => {
    const txGroups = groupTxsByTxRefNo(txs);
    return filterUndefined(txGroups.map(txs => toUserTx(txs)))
        .flat()
        .sort(bySettledThenCreated);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXBfdXNlcl90eHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYXp0ZWNfc2RrL2dyb3VwX3VzZXJfdHhzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQzFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUc1RCxPQUFPLEVBQ0wsYUFBYSxFQUNiLGVBQWUsRUFDZiw4QkFBOEIsRUFDOUIsVUFBVSxFQUNWLGFBQWEsR0FFZCxNQUFNLHFCQUFxQixDQUFDO0FBRTdCLE1BQU0sZUFBZSxHQUFHLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFFekQsTUFBTSxlQUFlLEdBQUcsQ0FDdEIsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxxQkFBcUIsRUFBRSxxQkFBcUIsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBaUIsRUFDcEgsR0FBZSxFQUNmLEVBQUUsQ0FDRixJQUFJLGFBQWEsQ0FDZixJQUFJLEVBQ0osTUFBTSxFQUNOLFNBQVMsRUFDVCxxQkFBcUIsRUFDckIscUJBQXFCLEVBQ3JCLFFBQVEsRUFDUixHQUFHLEVBQ0gsT0FBTyxFQUNQLE9BQU8sQ0FDUixDQUFDO0FBRUosTUFBTSxlQUFlLEdBQUcsQ0FDdEIsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQWlCLEVBQ2pGLEtBQWlCLEVBQ2pCLEdBQWUsRUFDZixFQUFFO0lBQ0YsT0FBTyxJQUFJLGFBQWEsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxD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