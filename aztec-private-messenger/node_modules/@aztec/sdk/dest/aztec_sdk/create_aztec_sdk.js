import { createDebugLogger, enableLogs, logHistory } from '@aztec/barretenberg/log';
import { ClientEthereumBlockchain } from '@aztec/blockchain';
import { createCoreSdk } from '../core_sdk/index.js';
import { AztecSdk } from './aztec_sdk.js';
const debug = createDebugLogger('bb:create_aztec_sdk');
async function createBlockchain(ethereumProvider, coreSdk, confs = 3) {
    const { chainId, rollupContractAddress, permitHelperContractAddress } = await coreSdk.getLocalStatus();
    const { blockchainStatus: { assets, bridges }, } = await coreSdk.getRemoteStatus();
    const blockchain = new ClientEthereumBlockchain(rollupContractAddress, permitHelperContractAddress, assets, bridges, ethereumProvider, confs);
    const providerChainId = await blockchain.getChainId();
    if (chainId !== providerChainId) {
        throw new Error(`Provider chainId ${providerChainId} does not match rollup provider chainId ${chainId}.`);
    }
    return blockchain;
}
// TODO - remove it
export var SdkFlavour;
(function (SdkFlavour) {
    SdkFlavour[SdkFlavour["PLAIN"] = 0] = "PLAIN";
    SdkFlavour[SdkFlavour["SHARED_WORKER"] = 1] = "SHARED_WORKER";
    SdkFlavour[SdkFlavour["HOSTED"] = 2] = "HOSTED";
})(SdkFlavour = SdkFlavour || (SdkFlavour = {}));
export async function createAztecSdk(ethereumProvider, options) {
    if (options.flavour) {
        console.warn('SdkFlavour has been deprecated.');
    }
    if (options.debug) {
        enableLogs(options.debug);
        logHistory.enable();
    }
    const coreSdk = await createCoreSdk(options);
    try {
        const blockchain = await createBlockchain(ethereumProvider, coreSdk, options.minConfirmation);
        return new AztecSdk(coreSdk, blockchain, ethereumProvider);
    }
    catch (err) {
        debug(`failed to create sdk: ${err.message}`);
        await coreSdk.destroy();
        throw err;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlX2F6dGVjX3Nkay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9henRlY19zZGsvY3JlYXRlX2F6dGVjX3Nkay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3BGLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzdELE9BQU8sRUFBVyxhQUFhLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUU5RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFMUMsTUFBTSxLQUFLLEdBQUcsaUJBQWlCLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUV2RCxLQUFLLFVBQVUsZ0JBQWdCLENBQUMsZ0JBQWtDLEVBQUUsT0FBZ0IsRUFBRSxLQUFLLEdBQUcsQ0FBQztJQUM3RixNQUFNLEVBQUUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLDJCQUEyQixFQUFFLEdBQUcsTUFBTSxPQUFPLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDdkcsTUFBTSxFQUNKLGdCQUFnQixFQUFFLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUN0QyxHQUFHLE1BQU0sT0FBTyxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ3BDLE1BQU0sVUFBVSxHQUFHLElBQUksd0JBQXdCLENBQzdDLHFCQUFxQixFQUNyQiwyQkFBMkIsRUFDM0IsTUFBTSxFQUNOLE9BQU8sRUFDUCxnQkFBZ0IsRUFDaEIsS0FBSyxDQUNOLENBQUM7SUFDRixNQUFNLGVBQWUsR0FBRyxNQUFNLFVBQVUsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUN0RCxJQUFJLE9BQU8sS0FBSyxlQUFlLEVBQUU7UUFDL0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQkFBb0IsZUFBZSwyQ0FBMkMsT0FBTyxHQUFHLENBQUMsQ0FBQztLQUMzRztJQUNELE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUM7QUFFRCxtQkFBbUI7QUFDbkIsTUFBTSxDQUFOLElBQVksVUFJWDtBQUpELFdBQVksVUFBVTtJQUNwQiw2Q0FBSyxDQUFBO0lBQ0wsNkRBQWEsQ0FBQTtJQUNiLCtDQUFNLENBQUE7QUFDUixDQUFDLEVBSlcsVUFBVSxHQUFWLFVBQVUsS0FBVixVQUFVLFFBSXJCO0FBS0QsTUFBTSxDQUFDLEtBQUssVUFBVSxjQUFjLENBQUMsZ0JBQWtDLEVBQUUsT0FBeUI7SUFDaEcsSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFO1FBQ25CLE9BQU8sQ0FBQyxJQUFJLENBQUMsaUNBQWlDLENBQUMsQ0FBQztLQUNqRDtJQUNELElBQUksT0FBTyxDQUFDLEtBQUssRUFBRTtRQUNqQixVQUFVLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFCLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztLQUNyQjtJQUVELE1BQU0sT0FBTyxHQUFHLE1BQU0sYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzdDLElBQUk7UUFDRixNQUFNLFVBQVUsR0FBRyxNQUFNLGdCQUFnQixDQUFDLGdCQUFnQixFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDOUYsT0FBTyxJQUFJLFFBQVEsQ0FBQyxPQUFPLEVBQUUsVUFBVSxFQUFFLGdCQUFnQixDQUFDLENBQUM7S0FDNUQ7SUFBQyxPQUFPLEdBQVEsRUFBRTtRQUNqQixLQUFLLENBQUMseUJBQXlCLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQzlDLE1BQU0sT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3hCLE1BQU0sR0FBRyxDQUFDO0tBQ1g7QUFDSCxDQUFDIn0=