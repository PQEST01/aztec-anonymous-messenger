import { GrumpkinAddress } from '@aztec/barretenberg/address';
import { BridgeCallData } from '@aztec/barretenberg/bridge_call_data';
import { ProofId } from '@aztec/barretenberg/client_proofs';
import { TxId } from '@aztec/barretenberg/tx_id';
export class CoreDefiTx {
    constructor(txId, userId, bridgeCallData, depositValue, txFee, txRefNo, created, partialState, partialStateSecret, 
    // Optional because not known at the time of proof construction.
    nullifier, settled, interactionNonce, isAsync, 
    // Optional because filled in once interaction finalised.
    success, outputValueA, outputValueB, finalised, 
    // Optional becaused filled in once claimed.
    claimSettled, claimTxId) {
        this.txId = txId;
        this.userId = userId;
        this.bridgeCallData = bridgeCallData;
        this.depositValue = depositValue;
        this.txFee = txFee;
        this.txRefNo = txRefNo;
        this.created = created;
        this.partialState = partialState;
        this.partialStateSecret = partialStateSecret;
        this.nullifier = nullifier;
        this.settled = settled;
        this.interactionNonce = interactionNonce;
        this.isAsync = isAsync;
        this.success = success;
        this.outputValueA = outputValueA;
        this.outputValueB = outputValueB;
        this.finalised = finalised;
        this.claimSettled = claimSettled;
        this.claimTxId = claimTxId;
        this.proofId = ProofId.DEFI_DEPOSIT;
    }
}
export const coreDefiTxToJson = (tx) => ({
    ...tx,
    txId: tx.txId.toString(),
    userId: tx.userId.toString(),
    bridgeCallData: tx.bridgeCallData.toString(),
    depositValue: tx.depositValue.toString(),
    txFee: tx.txFee.toString(),
    partialState: tx.partialState.toString('hex'),
    partialStateSecret: tx.partialStateSecret.toString('hex'),
    nullifier: tx.nullifier?.toString('hex'),
    outputValueA: tx.outputValueA?.toString(),
    outputValueB: tx.outputValueB?.toString(),
    claimTxId: tx.claimTxId?.toString(),
});
export const coreDefiTxFromJson = (json) => new CoreDefiTx(TxId.fromString(json.txId), GrumpkinAddress.fromString(json.userId), BridgeCallData.fromString(json.bridgeCallData), BigInt(json.depositValue), BigInt(json.txFee), json.txRefNo, json.created, Buffer.from(json.partialState, 'hex'), Buffer.from(json.partialStateSecret, 'hex'), json.nullifier ? Buffer.from(json.nullifier, 'hex') : undefined, json.settled, json.interactionNonce, json.isAsync, json.success, json.outputValueA ? BigInt(json.outputValueA) : undefined, json.outputValueB ? BigInt(json.outputValueB) : undefined, json.finalised, json.claimSettled, json.claimTxId ? TxId.fromString(json.claimTxId) : undefined);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZV9kZWZpX3R4LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvcmVfdHgvY29yZV9kZWZpX3R4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDdEUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQzVELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUVqRCxNQUFNLE9BQU8sVUFBVTtJQUdyQixZQUNrQixJQUFVLEVBQ1YsTUFBdUIsRUFDdkIsY0FBOEIsRUFDOUIsWUFBb0IsRUFDcEIsS0FBYSxFQUNiLE9BQWUsRUFDZixPQUFhLEVBQ2IsWUFBb0IsRUFDcEIsa0JBQTBCO0lBQzFDLGdFQUFnRTtJQUN6RCxTQUFrQixFQUNsQixPQUFjLEVBQ2QsZ0JBQXlCLEVBQ3pCLE9BQWlCO0lBQ3hCLHlEQUF5RDtJQUNsRCxPQUFpQixFQUNqQixZQUFxQixFQUNyQixZQUFxQixFQUNyQixTQUFnQjtJQUN2Qiw0Q0FBNEM7SUFDckMsWUFBbUIsRUFDbkIsU0FBZ0I7UUFyQlAsU0FBSSxHQUFKLElBQUksQ0FBTTtRQUNWLFdBQU0sR0FBTixNQUFNLENBQWlCO1FBQ3ZCLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQUM5QixpQkFBWSxHQUFaLFlBQVksQ0FBUTtRQUNwQixVQUFLLEdBQUwsS0FBSyxDQUFRO1FBQ2IsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUNmLFlBQU8sR0FBUCxPQUFPLENBQU07UUFDYixpQkFBWSxHQUFaLFlBQVksQ0FBUTtRQUNwQix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQVE7UUFFbkMsY0FBUyxHQUFULFNBQVMsQ0FBUztRQUNsQixZQUFPLEdBQVAsT0FBTyxDQUFPO1FBQ2QscUJBQWdCLEdBQWhCLGdCQUFnQixD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