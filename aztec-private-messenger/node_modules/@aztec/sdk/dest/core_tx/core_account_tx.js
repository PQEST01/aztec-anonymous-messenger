import { AliasHash } from '@aztec/barretenberg/account_id';
import { GrumpkinAddress } from '@aztec/barretenberg/address';
import { ProofId } from '@aztec/barretenberg/client_proofs';
import { TxId } from '@aztec/barretenberg/tx_id';
export class CoreAccountTx {
    constructor(txId, userId, aliasHash, newSpendingPublicKey1, newSpendingPublicKey2, migrated, txRefNo, created, settled) {
        this.txId = txId;
        this.userId = userId;
        this.aliasHash = aliasHash;
        this.newSpendingPublicKey1 = newSpendingPublicKey1;
        this.newSpendingPublicKey2 = newSpendingPublicKey2;
        this.migrated = migrated;
        this.txRefNo = txRefNo;
        this.created = created;
        this.settled = settled;
        this.proofId = ProofId.ACCOUNT;
    }
}
export const coreAccountTxToJson = (tx) => ({
    ...tx,
    txId: tx.txId.toString(),
    userId: tx.userId.toString(),
    aliasHash: tx.aliasHash.toString(),
    newSpendingPublicKey1: tx.newSpendingPublicKey1 ? tx.newSpendingPublicKey1.toString('hex') : undefined,
    newSpendingPublicKey2: tx.newSpendingPublicKey2 ? tx.newSpendingPublicKey2.toString('hex') : undefined,
});
export const coreAccountTxFromJson = (json) => new CoreAccountTx(TxId.fromString(json.txId), GrumpkinAddress.fromString(json.userId), AliasHash.fromString(json.aliasHash), json.newSpendingPublicKey1 ? Buffer.from(json.newSpendingPublicKey1, 'hex') : undefined, json.newSpendingPublicKey2 ? Buffer.from(json.newSpendingPublicKey2, 'hex') : undefined, json.migrated, json.txRefNo, json.created, json.settled);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZV9hY2NvdW50X3R4LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvcmVfdHgvY29yZV9hY2NvdW50X3R4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUMzRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDOUQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQzVELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUVqRCxNQUFNLE9BQU8sYUFBYTtJQUd4QixZQUNrQixJQUFVLEVBQ1YsTUFBdUIsRUFDdkIsU0FBb0IsRUFDcEIscUJBQXlDLEVBQ3pDLHFCQUF5QyxFQUN6QyxRQUFpQixFQUNqQixPQUFlLEVBQ2YsT0FBYSxFQUNiLE9BQWM7UUFSZCxTQUFJLEdBQUosSUFBSSxDQUFNO1FBQ1YsV0FBTSxHQUFOLE1BQU0sQ0FBaUI7UUFDdkIsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUNwQiwwQkFBcUIsR0FBckIscUJBQXFCLENBQW9CO1FBQ3pDLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBb0I7UUFDekMsYUFBUSxHQUFSLFFBQVEsQ0FBUztRQUNqQixZQUFPLEdBQVAsT0FBTyxDQUFRO1FBQ2YsWUFBTyxHQUFQLE9BQU8sQ0FBTTtRQUNiLFlBQU8sR0FBUCxPQUFPLENBQU87UUFYaEIsWUFBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUM7SUFZdkMsQ0FBQztDQUNMO0FBZUQsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxFQUFpQixFQUFxQixFQUFFLENBQUMsQ0FBQztJQUM1RSxHQUFHLEVBQUU7SUFDTCxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7SUFDeEIsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFO0lBQzVCLFNBQVMsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRTtJQUNsQyxxQkFBcUIsRUFBRSxFQUFFLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVM7SUFDdEcscUJBQXFCLEVBQUUsRUFBRSxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMscUJBQXFCLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTO0NBQ3ZHLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLENBQUMsSUFBdUIsRUFBRSxFQUFFLENBQy9ELElBQUksYUFBYSxDQUNmLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUMxQixlQUFlLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFDdkMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQ3BDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMscUJBQXFCLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFDdkYsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUN2RixJQUFJLENBQUMsUUFBUSxFQUNiLElBQUksQ0FBQyxPQUFPLEVBQ1osSUFBSSxDQUFDLE9BQU8sRUFDWixJQUFJLENBQUMsT0FBTyxDQUNiLENBQUMifQ==