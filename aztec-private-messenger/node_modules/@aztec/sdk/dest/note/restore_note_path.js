import { HashPath } from '@aztec/barretenberg/merkle_tree';
import { WorldStateConstants } from '@aztec/barretenberg/world_state';
import { Note } from './note.js';
// For each input note we need to
// Determine if there is a hash path stored with the note
// If there is then concatenate that path with the hash path returned from the data tree for that note's subtree
// If there isn't then generate a 'zero' hash path of the full data tree depth
export const restoreNotePath = async ({ treeNote, commitment, nullifier, allowChain, nullified, index, hashPath }, worldState) => {
    const fullHashPath = hashPath
        ? await worldState.buildFullHashPath(index, HashPath.fromBuffer(hashPath))
        : worldState.buildZeroHashPath(WorldStateConstants.DATA_TREE_DEPTH);
    return new Note(treeNote, commitment, nullifier, allowChain, nullified, index, fullHashPath.toBuffer());
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzdG9yZV9ub3RlX3BhdGguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbm90ZS9yZXN0b3JlX25vdGVfcGF0aC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDM0QsT0FBTyxFQUFjLG1CQUFtQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDbEYsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVqQyxpQ0FBaUM7QUFDakMseURBQXlEO0FBQ3pELGdIQUFnSDtBQUNoSCw4RUFBOEU7QUFDOUUsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLEtBQUssRUFDbEMsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQVEsRUFDakYsVUFBc0IsRUFDdEIsRUFBRTtJQUNGLE1BQU0sWUFBWSxHQUFHLFFBQVE7UUFDM0IsQ0FBQyxDQUFDLE1BQU0sVUFBVSxDQUFDLGlCQUFpQixDQUFDLEtBQU0sRUFBRSxRQUFRLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzNFLENBQUMsQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsbUJBQW1CLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDdEUsT0FBTyxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUMxRyxDQUFDLENBQUMifQ==