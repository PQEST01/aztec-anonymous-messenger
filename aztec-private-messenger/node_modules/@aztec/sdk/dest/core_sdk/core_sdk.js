import { AliasHash } from '@aztec/barretenberg/account_id';
import { EthAddress, GrumpkinAddress } from '@aztec/barretenberg/address';
import { DecodedBlock } from '@aztec/barretenberg/block_source';
import { AccountProver, JoinSplitProver, ProofId } from '@aztec/barretenberg/client_proofs';
import { NetCrs } from '@aztec/barretenberg/crs';
import { Blake2s, keccak256, randomBytes, Schnorr } from '@aztec/barretenberg/crypto';
import { Grumpkin } from '@aztec/barretenberg/ecc';
import { createDebugLogger, logHistory } from '@aztec/barretenberg/log';
import { NoteAlgorithms } from '@aztec/barretenberg/note_algorithms';
import { retryUntil } from '@aztec/barretenberg/retry';
import { WorldState, WorldStateConstants } from '@aztec/barretenberg/world_state';
import isNode from 'detect-node';
import { EventEmitter } from 'events';
import { KeyPairAuthAlgorithms } from '../auth_algorithms/key_pair_auth_algorithms.js';
import { sendClientLog, sendClientConsoleLog } from '../client_log/client_log.js';
import { createCorePaymentTxForRecipient } from '../core_tx/index.js';
import { getUserSpendingKeysFromGenesisData } from '../genesis_state/index.js';
import { getDeviceMemory } from '../get_num_workers/index.js';
import { ConstantKeyPair } from '../key_pair/index.js';
import { VERSION_HASH } from '../package_version.js';
import { joinSplitTxInputToJoinSplitTx, joinSplitTxToJoinSplitTxInput, } from '../proofs/index.js';
import { ProofInputFactory } from '../proofs/proof_input/index.js';
import { ProofOutputFactory } from '../proofs/proof_output/index.js';
import { ProofRequestDataFactory } from '../proofs/proof_request_data/index.js';
import { MutexSerialQueue } from '../serial_queue/index.js';
import { SchnorrSigner } from '../signer/index.js';
import { UserStateEvent, UserStateFactory } from '../user_state/index.js';
import { SdkEvent } from './sdk_status.js';
import { sdkVersion } from './sdk_version.js';
import { Synchroniser } from './synchroniser.js';
var SdkInitState;
(function (SdkInitState) {
    // Constructed but uninitialized. Unusable.
    SdkInitState["UNINITIALIZED"] = "UNINITIALIZED";
    // Initialized but not yet synching data tree and user accounts. Can be queried for data, but not create proofs.
    SdkInitState["INITIALIZED"] = "INITIALIZED";
    // Synchronises data tree and user accounts. Ready for proof construction.
    SdkInitState["RUNNING"] = "RUNNING";
    // Stop requested. Wait for synching task to return.
    SdkInitState["STOPPING"] = "STOPPING";
    // Unusable.
    SdkInitState["DESTROYED"] = "DESTROYED";
})(SdkInitState || (SdkInitState = {}));
/**
 * CoreSdk is responsible for keeping everything in sync and proof construction.
 * init() should be called before making any other calls to construct the basic components.
 * run() should be called once a client wants to start synching, or requesting proof construction.
 * Takes ownership of injected components (should destroy them etc).
 * A serial queue ensures that all calls that modify internal state happen in sequence.
 * By default, the serial queue is protected with a cross-process mutex, ensuring that if multiple instances
 * of the CoreSdk exist in different processes, that they will not modify state at the same time.
 */
export class CoreSdk extends EventEmitter {
    constructor(leveldb, db, rollupProvider, barretenberg, noteDecryptor, pedersen, pippenger, fftFactory, workerPool) {
        super();
        this.leveldb = leveldb;
        this.db = db;
        this.rollupProvider = rollupProvider;
        this.barretenberg = barretenberg;
        this.noteDecryptor = noteDecryptor;
        this.pedersen = pedersen;
        this.pippenger = pippenger;
        this.fftFactory = fftFactory;
        this.workerPool = workerPool;
        this.dataVersion = 1;
        this.userStates = [];
        this.broadcastChannel = isNode ? undefined : new BroadcastChannel('aztec-sdk');
        this.sdkStatus = {
            serverUrl: '',
            chainId: -1,
            rollupContractAddress: EthAddress.ZERO,
            permitHelperContractAddress: EthAddress.ZERO,
            verifierContractAddress: EthAddress.ZERO,
            feePayingAssetIds: [0],
            rollupSize: -1,
            syncedToRollup: -1,
            latestRollupId: -1,
            dataRoot: Buffer.alloc(0),
            dataSize: 0,
            useKeyCache: false,
            proverless: false,
            version: sdkVersion,
        };
        this.initState = SdkInitState.UNINITIALIZED;
        this.debug = createDebugLogger('bb:core_sdk');
        if (this.broadcastChannel) {
            this.broadcastChannel.onmessage = ({ data: { event, args } }) => {
                if (event === SdkEvent.UPDATED_USER_STATE) {
                    this.emit(SdkEvent.UPDATED_USER_STATE, GrumpkinAddress.fromString(args[0]));
                }
            };
        }
        this.rollupProvider.on('versionMismatch', error => {
            this.debug(error);
            this.emit(SdkEvent.VERSION_MISMATCH);
        });
        this.serialQueue = new MutexSerialQueue(this.db, 'aztec_core_sdk', 30000);
        this.noteAlgos = new NoteAlgorithms(this.barretenberg);
        this.blake2s = new Blake2s(this.barretenberg);
        this.grumpkin = new Grumpkin(this.barretenberg);
        this.schnorr = new Schnorr(this.barretenberg);
        this.userStateFactory = new UserStateFactory(this.grumpkin, this.noteAlgos, this.noteDecryptor, this.db, this.rollupProvider);
        this.worldState = new WorldState(this.leveldb, this.pedersen);
        this.synchroniser = new Synchroniser(rollupProvider, this.worldState, leveldb, db, pedersen, this.serialQueue);
        this.synchroniser.on(SdkEvent.UPDATED_WORLD_STATE, syncStatus => {
            this.sdkStatus = {
                ...this.sdkStatus,
                ...syncStatus,
            };
            this.emit(SdkEvent.UPDATED_WORLD_STATE, this.sdkStatus.syncedToRollup, this.sdkStatus.latestRollupId);
        });
    }
    /**
     * Constructs internal components.
     * Erases dbs if rollup contract address changed.
     * Loads and initializes known user accounts.
     * Destroys injected components on failure.
     */
    async init(options) {
        if (this.initState !== SdkInitState.UNINITIALIZED) {
            throw new Error('Already initialized.');
        }
        try {
            this.debug(`initializing...${sdkVersion ? ` (version: ${sdkVersion})` : ''}`);
            this.debug(`Version hash: ${VERSION_HASH}`);
            const { blockchainStatus: { chainId, rollupContractAddress, permitHelperContractAddress, verifierContractAddress }, runtimeConfig: { feePayingAssetIds, useKeyCache }, rollupSize, proverless, } = await this.getRemoteStatus();
            // Clear all data if contract changed or dataVersion changed.
            const rca = await this.getLocalRollupContractAddress();
            const localDataVersion = await this.getLocalDataVersion();
            if ((rca && !rca.equals(rollupContractAddress)) || localDataVersion !== this.dataVersion) {
                this.debug('erasing database...');
                await this.leveldb.clear();
                await this.db.clear();
                await this.setLocalDataVersion(this.dataVersion);
            }
            await this.db.addKey('rollupContractAddress', rollupContractAddress.toBuffer());
            // Initialize the "mutable" merkle tree. This is the tree that represents all layers about each rollup subtree.
            const subtreeDepth = Math.ceil(Math.log2(rollupSize * WorldStateConstants.NUM_NEW_DATA_TREE_NOTES_PER_TX));
            await this.worldState.init(subtreeDepth);
            await this.synchroniser.init();
            this.sdkStatus = {
                ...this.sdkStatus,
                ...this.synchroniser.getSyncStatus(),
                serverUrl: options.serverUrl,
                chainId,
                rollupContractAddress,
                permitHelperContractAddress,
                verifierContractAddress,
                feePayingAssetIds,
                rollupSize,
                useKeyCache,
                proverless,
            };
            this.proofRequestDataFactory = new ProofRequestDataFactory(this.worldState, this.db, this.blake2s);
            this.proofInputFactory = new ProofInputFactory(this.noteAlgos, this.grumpkin, this.pedersen, this.barretenberg);
            this.proofOutputFactory = new ProofOutputFactory(proverless, this.noteAlgos, this.pippenger, this.fftFactory, this.barretenberg, this.workerPool);
            // Ensures we can get the list of users and access current known balances.
            await this.initUserStates();
            this.initState = SdkInitState.INITIALIZED;
            this.debug('initialization complete.');
        }
        catch (err) {
            this.debug('initialization failed: ', err);
            // If initialization fails, we should destroy the components we've taken ownership of.
            await this.leveldb.close();
            await this.db.close();
            await this.workerPool?.destroy();
            this.serialQueue?.cancel();
            throw err;
        }
    }
    async destroy(error) {
        this.debug('destroying...');
        // If sync() task is running, signals it to stop, to awake for exit if it's asleep, and awaits the exit.
        this.initState = SdkInitState.STOPPING;
        await this.synchroniser.stop();
        // The serial queue will cancel itself. This ensures that anything currently in the queue finishes, and ensures
        // that once the await to push() returns, nothing else is on, or can be added to the queue.
        await this.serialQueue.push(() => Promise.resolve(this.serialQueue.cancel()));
        // Stop listening to account state updates.
        this.userStates.forEach(us => us.removeAllListeners());
        // Destroy injected components.
        await this.fftFactory.destroy();
        await this.leveldb.close();
        await this.db.close();
        await this.workerPool?.destroy();
        // Destroy components.
        this.broadcastChannel?.close();
        this.initState = SdkInitState.DESTROYED;
        this.emit(SdkEvent.DESTROYED, error);
        this.removeAllListeners();
        this.debug('destroyed.');
    }
    getLocalStatus() {
        return Promise.resolve({ ...this.sdkStatus });
    }
    async getRemoteStatus() {
        return await this.rollupProvider.getStatus();
    }
    async sendConsoleLog(clientData, preserveLog) {
        const logs = logHistory.getLogs();
        if (!logs.length && !clientData?.length) {
            return;
        }
        const publicKeys = this.userStates.map(us => us.getUserData().accountPublicKey);
        const ensureJson = (log) => log.map(logArgs => {
            try {
                JSON.stringify(logArgs);
                return logArgs;
            }
            catch (e) {
                return `${logArgs}`;
            }
        });
        await sendClientConsoleLog(this.rollupProvider, {
            publicKeys: publicKeys.map(k => k.toString()),
            logs: logs.map(ensureJson),
            clientData,
            clientUrl: location?.href,
        });
        if (!preserveLog) {
            logHistory.clear(logs.length);
        }
    }
    async isAccountRegistered(accountPublicKey, includePending) {
        return (!!(await this.db.getAlias(accountPublicKey)) ||
            (includePending && (await this.rollupProvider.isAccountRegistered(accountPublicKey))));
    }
    async isAliasRegistered(alias, includePending) {
        const aliasHash = this.computeAliasHash(alias);
        return ((await this.db.getAliasByAliasHash(aliasHash)) !== undefined ||
            (includePending && (await this.rollupProvider.isAliasRegistered(alias))));
    }
    async isAliasRegisteredToAccount(accountPublicKey, alias, includePending) {
        const aliasHash = this.computeAliasHash(alias);
        const savedAlias = await this.db.getAlias(accountPublicKey);
        return savedAlias
            ? savedAlias.aliasHash.equals(aliasHash)
            : includePending && (await this.rollupProvider.isAliasRegisteredToAccount(accountPublicKey, alias));
    }
    async getAccountPublicKey(alias) {
        const aliasHash = this.computeAliasHash(alias);
        const dbAlias = await this.db.getAliasByAliasHash(aliasHash);
        if (!dbAlias) {
            return;
        }
        const { accountPublicKey, noteCommitment1, spendingPublicKeyX } = dbAlias;
        // If there is an entry in the address book for the recipient, that has both the note commitment and spending
        // key x coordinate, then we need to validate the data hashes to the account note commitment. This allows us
        // to skip computing the commitment for every single alias when synching. Rather we just do it on send.
        if (noteCommitment1 && spendingPublicKeyX) {
            // We only stored the X coordinate, and it's the only thing needed. Pad the Y coordinate.
            const spendingPublicKey = Buffer.concat([spendingPublicKeyX, Buffer.alloc(32)]);
            const commitment = this.noteAlgos.accountNoteCommitment(aliasHash, accountPublicKey, spendingPublicKey);
            if (!commitment.equals(noteCommitment1)) {
                throw new Error('Failed to validate account note commitment for recipient.');
            }
        }
        return accountPublicKey;
    }
    async getAccountIndex(alias) {
        const aliasHash = this.computeAliasHash(alias);
        const result = await this.db.getAliasByAliasHash(aliasHash);
        return result?.index;
    }
    async getTxFees(assetId) {
        return await this.rollupProvider.getTxFees(assetId);
    }
    async getDefiFees(bridgeCallData) {
        return await this.rollupProvider.getDefiFees(bridgeCallData);
    }
    async getPendingDepositTxs() {
        return await this.rollupProvider.getPendingDepositTxs();
    }
    async getDefiInteractionNonce(txId) {
        const tx = await this.db.getDefiTx(txId);
        if (!tx) {
            throw new Error('Unknown txId');
        }
        return tx.interactionNonce;
    }
    async userExists(userId) {
        return !!(await this.db.getUser(userId));
    }
    getUsers() {
        return Promise.resolve(this.userStates.map(us => us.getUserData().accountPublicKey));
    }
    derivePublicKey(privateKey) {
        return Promise.resolve(new GrumpkinAddress(this.grumpkin.mul(Grumpkin.generator, privateKey)));
    }
    deriveLegacySigningMessageHash(address) {
        const signingMessage = this.blake2s.hashToField(address.toBuffer());
        return Promise.resolve(keccak256(signingMessage));
    }
    constructSignature(message, privateKey) {
        return Promise.resolve(this.schnorr.constructSignature(message, privateKey));
    }
    async addUser(accountPrivateKey, registrationSync = false, registrationSyncMarginBlocks = 10) {
        let shouldResync = true;
        const accountPublicKey = await this.derivePublicKey(accountPrivateKey);
        await this.serialQueue.push(async () => {
            if (await this.db.getUser(accountPublicKey)) {
                throw new Error(`User already exists: ${accountPublicKey}`);
            }
            let syncedToRollup = -1;
            if (registrationSync) {
                const { latestRollupId } = this.sdkStatus;
                const registrationRollupId = await this.rollupProvider.getAccountRegistrationRollupId(accountPublicKey);
                if (registrationRollupId !== -1) {
                    const startingPoint = registrationRollupId - registrationSyncMarginBlocks;
                    syncedToRollup = startingPoint < -1 ? -1 : startingPoint;
                    this.debug(`Adding registrationSync account registered at ${registrationRollupId}, synching from ${syncedToRollup}`);
                }
                else {
                    shouldResync = false;
                    syncedToRollup = latestRollupId;
                }
            }
            const user = { accountPrivateKey, accountPublicKey, syncedToRollup };
            await this.db.addUser(user);
            await this.addInitialUserSpendingKeys([user.accountPublicKey]);
            const userState = await this.userStateFactory.createUserState(user);
            userState.on(UserStateEvent.UPDATED_USER_STATE, id => {
                this.emit(SdkEvent.UPDATED_USER_STATE, id);
                this.broadcastChannel?.postMessage({
                    event: SdkEvent.UPDATED_USER_STATE,
                    args: [id.toString()],
                });
            });
            this.userStates = [...this.userStates, userState];
            this.synchroniser.setUserStates(this.userStates);
        });
        // If this account is already registered, we need to restart syncing from registration
        // It cannot be done in the serial queue as synchroniser.stop can deadlock
        if (shouldResync && this.initState == SdkInitState.RUNNING) {
            await this.synchroniser.stop();
            await this.synchroniser.start();
        }
        return accountPublicKey;
    }
    async removeUser(userId) {
        return await this.serialQueue.push(async () => {
            const userState = this.getUserState(userId);
            this.userStates = this.userStates.filter(us => us !== userState);
            this.synchroniser.setUserStates(this.userStates);
            await userState.shutdown();
            userState.removeAllListeners();
            await this.db.removeUser(userId);
        });
    }
    getUserSyncedToRollup(userId) {
        return Promise.resolve(this.getUserState(userId).getUserData().syncedToRollup);
    }
    async getSpendingKeys(userId) {
        const keys = await this.db.getSpendingKeys(userId);
        return keys.map(k => k.key);
    }
    async getBalances(userId) {
        return await this.getUserState(userId).getBalances();
    }
    async getBalance(userId, assetId) {
        const userState = this.getUserState(userId);
        return await userState.getBalance(assetId);
    }
    async getSpendableNoteValues(userId, assetId, spendingKeyRequired, excludePendingNotes) {
        const userState = this.getUserState(userId);
        return await userState.getSpendableNoteValues(assetId, { spendingKeyRequired, excludePendingNotes });
    }
    async getSpendableSum(userId, assetId, spendingKeyRequired, excludePendingNotes) {
        const userState = this.getUserState(userId);
        return await userState.getSpendableSum(assetId, { spendingKeyRequired, excludePendingNotes });
    }
    async getSpendableSums(userId, spendingKeyRequired, excludePendingNotes) {
        const userState = this.getUserState(userId);
        return await userState.getSpendableSums({ spendingKeyRequired, excludePendingNotes });
    }
    async getMaxSpendableNoteValues(userId, assetId, spendingKeyRequired, excludePendingNotes, numNotes) {
        const userState = this.getUserState(userId);
        return await userState.getMaxSpendableNoteValues(assetId, { spendingKeyRequired, excludePendingNotes, numNotes });
    }
    async pickNotes(userId, assetId, value, spendingKeyRequired, excludePendingNotes) {
        return await this.getUserState(userId).pickNotes(assetId, value, { spendingKeyRequired, excludePendingNotes });
    }
    async pickNote(userId, assetId, value, spendingKeyRequired, excludePendingNotes) {
        return await this.getUserState(userId).pickNote(assetId, value, { spendingKeyRequired, excludePendingNotes });
    }
    async getUserTxs(userId) {
        return await this.db.getUserTxs(userId);
    }
    /**
     * Moves the sdk into RUNNING state.
     * Kicks off data tree updates, user note decryptions, alias table updates, proving key construction.
     */
    run() {
        if (this.initState === SdkInitState.RUNNING) {
            return Promise.resolve();
        }
        this.initState = SdkInitState.RUNNING;
        this.serialQueue
            .push(async () => {
            const maxCircuitSize = Math.max(JoinSplitProver.getCircuitSize(), AccountProver.getCircuitSize());
            const crsData = await this.getCrsData(maxCircuitSize);
            await this.pippenger.init(crsData);
            await this.synchroniser.start();
            this.synchroniser.onAbort(err => {
                this.debug('failed to sync:', err);
                void this.destroy(`Failed to sync: ${err.message}`);
            });
        })
            .catch(err => {
            this.debug('failed to run:', err);
            return this.destroy(`Failed to run: ${err.message}`);
        });
        return Promise.resolve();
    }
    // -------------------------------------------------------
    // PUBLIC METHODS FROM HERE ON REQUIRE run() TO BE CALLED.
    // -------------------------------------------------------
    async createDepositProof(assetId, publicInput, privateOutput, depositor, recipient, recipientSpendingKeyRequired, txRefNo, timeout) {
        return await this.serialQueue.push(async () => {
            this.assertInitState(SdkInitState.RUNNING);
            // Create a one time user to generate and sign the proof.
            const accountPrivateKey = randomBytes(32);
            const accountPublicKey = await this.derivePublicKey(accountPrivateKey);
            const spendingPublicKey = accountPublicKey;
            const depositValue = privateOutput;
            const feeValue = publicInput - privateOutput;
            const proofRequestData = await this.proofRequestDataFactory.createPaymentProofRequestData(ProofId.DEPOSIT, accountPublicKey, spendingPublicKey, { assetId, value: depositValue }, { assetId, value: feeValue }, depositor, recipient, recipientSpendingKeyRequired);
            const accountKeyPair = new ConstantKeyPair(accountPublicKey, accountPrivateKey, this.schnorr);
            const authAlgos = new KeyPairAuthAlgorithms(accountKeyPair, this.grumpkin, this.noteAlgos, this.noteDecryptor, this.barretenberg);
            const proofInput = (await this.proofInputFactory.createProofInputs(proofRequestData, authAlgos))[0];
            const signer = new SchnorrSigner(this, accountPublicKey, accountPrivateKey);
            const signature = await signer.signMessage(proofInput.signingData);
            return this.runOrClientLog(() => this.proofOutputFactory.createPaymentProof(proofInput, signature, txRefNo, accountKeyPair, timeout), 'Failed to create deposit proof.');
        });
    }
    async createPaymentProofInputs(userId, assetId, publicInput, publicOutput, privateInput, recipientPrivateOutput, senderPrivateOutput, noteRecipient, recipientSpendingKeyRequired, publicOwner, spendingPublicKey, allowChain) {
        return await this.serialQueue.push(async () => {
            this.assertInitState(SdkInitState.RUNNING);
            const userState = this.getUserState(userId);
            const user = userState.getUserData();
            const proofId = (() => {
                if (publicInput > 0) {
                    return ProofId.DEPOSIT;
                }
                if (publicOutput > 0) {
                    return ProofId.WITHDRAW;
                }
                return ProofId.SEND;
            })();
            const value = (() => {
                if (publicInput > 0) {
                    return publicInput;
                }
                if (publicOutput > 0) {
                    return publicOutput;
                }
                return recipientPrivateOutput;
            })();
            const feeValue = publicInput + privateInput - (publicOutput + recipientPrivateOutput + senderPrivateOutput);
            const proofRequestData = await this.proofRequestDataFactory.createPaymentProofRequestData(proofId, userId, spendingPublicKey, { assetId, value }, { assetId, value: feeValue }, publicOwner || EthAddress.ZERO, noteRecipient || GrumpkinAddress.generator(), recipientSpendingKeyRequired, userState, { allowChain: !!allowChain });
            const accountKeyPair = new ConstantKeyPair(user.accountPublicKey, user.accountPrivateKey, this.schnorr);
            const authAlgos = new KeyPairAuthAlgorithms(accountKeyPair, this.grumpkin, this.noteAlgos, this.noteDecryptor, this.barretenberg);
            const proofInputs = (await this.proofInputFactory.createProofInputs(proofRequestData, authAlgos)).map(proofInput => {
                const { tx, viewingKeys, signingData } = proofInput;
                return {
                    tx: joinSplitTxInputToJoinSplitTx(tx, user.accountPrivateKey, user.accountPublicKey),
                    viewingKeys,
                    signingData,
                };
            });
            return proofInputs;
        });
    }
    async createPaymentProof(input, txRefNo, timeout) {
        return await this.serialQueue.push(async () => {
            this.assertInitState(SdkInitState.RUNNING);
            const { outputNotes } = input.tx;
            const userId = outputNotes[1].ownerPubKey;
            const userState = this.getUserState(userId);
            const user = userState.getUserData();
            const accountKeyPair = new ConstantKeyPair(user.accountPublicKey, user.accountPrivateKey, this.schnorr);
            return await this.runOrClientLog(() => this.proofOutputFactory.createPaymentProof({ ...input, tx: joinSplitTxToJoinSplitTxInput(input.tx, user.accountPrivateKey, this.noteAlgos) }, input.signature, txRefNo, accountKeyPair, timeout), 'Failed to create payment proof.');
        });
    }
    async createAccountProofSigningData(accountPublicKey, alias, migrate, spendingPublicKey, newAccountPublicKey = accountPublicKey, newSpendingPublicKey1, newSpendingPublicKey2) {
        return await this.serialQueue.push(async () => {
            this.assertInitState(SdkInitState.RUNNING);
            const proofRequestData = await this.proofRequestDataFactory.createAccountProofRequestData(accountPublicKey, accountPublicKey, // set the accountPublicKey as spendingPublicKey so the factory won't fetch its hash path.
            alias || '', newAccountPublicKey, newSpendingPublicKey1 || GrumpkinAddress.ZERO, newSpendingPublicKey2 || GrumpkinAddress.ZERO, { assetId: 0, value: BigInt(0) }, // deposit
            { assetId: 0, value: BigInt(0) }, // fee
            EthAddress.ZERO);
            const randomAccountPrivateKey = randomBytes(32);
            const randomAccountPublicKey = await this.derivePublicKey(randomAccountPrivateKey);
            const accountKeyPair = new ConstantKeyPair(randomAccountPublicKey, randomAccountPrivateKey, this.schnorr);
            const authAlgos = new KeyPairAuthAlgorithms(accountKeyPair, this.grumpkin, this.noteAlgos, this.noteDecryptor, this.barretenberg);
            // Set the spendingPublicKey back to recoveryPublicKey.
            const { spendingKeyAccount } = proofRequestData;
            const [proofInput] = await this.proofInputFactory.createProofInputs({
                ...proofRequestData,
                spendingKeyAccount: { ...spendingKeyAccount, spendingPublicKey },
            }, authAlgos);
            return proofInput.signingData;
        });
    }
    async createAccountProofInput(userId, spendingPublicKey, migrate, alias, newSpendingPublicKey1, newSpendingPublicKey2, newAccountPrivateKey) {
        return await this.serialQueue.push(async () => {
            this.assertInitState(SdkInitState.RUNNING);
            const newAccountPublicKey = newAccountPrivateKey ? await this.derivePublicKey(newAccountPrivateKey) : userId;
            const proofRequestData = await this.proofRequestDataFactory.createAccountProofRequestData(userId, spendingPublicKey, alias || '', newAccountPublicKey, newSpendingPublicKey1 || GrumpkinAddress.ZERO, newSpendingPublicKey2 || GrumpkinAddress.ZERO, { assetId: 0, value: BigInt(0) }, // deposit
            { assetId: 0, value: BigInt(0) }, // fee
            EthAddress.ZERO);
            // Zero deposit and fee => no payment proofs will be created.
            // authAlgos doesn't have to be created with the user's account.
            const randomAccountPrivateKey = randomBytes(32);
            const randomAccountPublicKey = await this.derivePublicKey(randomAccountPrivateKey);
            const accountKeyPair = new ConstantKeyPair(randomAccountPublicKey, randomAccountPrivateKey, this.schnorr);
            const authAlgos = new KeyPairAuthAlgorithms(accountKeyPair, this.grumpkin, this.noteAlgos, this.noteDecryptor, this.barretenberg);
            const [proofInput] = await this.proofInputFactory.createProofInputs(proofRequestData, authAlgos);
            const { tx, signingData } = proofInput;
            return { tx, signingData };
        });
    }
    async createAccountProof(input, txRefNo, timeout) {
        return await this.serialQueue.push(async () => {
            this.assertInitState(SdkInitState.RUNNING);
            return await this.runOrClientLog(() => this.proofOutputFactory.createAccountProof(input, input.signature, txRefNo, timeout), 'Failed to create account proof.');
        });
    }
    async createDefiProofInput(userId, bridgeCallData, depositValue, fee, spendingPublicKey) {
        return await this.serialQueue.push(async () => {
            this.assertInitState(SdkInitState.RUNNING);
            const userState = this.getUserState(userId);
            const user = userState.getUserData();
            const proofRequestData = await this.proofRequestDataFactory.createDefiProofRequestData(userId, spendingPublicKey, bridgeCallData, { assetId: bridgeCallData.inputAssetIdA, value: depositValue }, { assetId: bridgeCallData.inputAssetIdA, value: fee }, userState);
            const accountKeyPair = new ConstantKeyPair(user.accountPublicKey, user.accountPrivateKey, this.schnorr);
            const authAlgos = new KeyPairAuthAlgorithms(accountKeyPair, this.grumpkin, this.noteAlgos, this.noteDecryptor, this.barretenberg);
            const proofInputs = (await this.proofInputFactory.createProofInputs(proofRequestData, authAlgos)).map(proofInput => {
                if (proofInput.viewingKeys) {
                    const { tx, viewingKeys, signingData } = proofInput;
                    return {
                        tx: joinSplitTxInputToJoinSplitTx(tx, user.accountPrivateKey, user.accountPublicKey),
                        viewingKeys,
                        signingData,
                    };
                }
                else {
                    const { tx, viewingKey, signingData, partialStateSecretEphPubKey } = proofInput;
                    return {
                        tx: joinSplitTxInputToJoinSplitTx(tx, user.accountPrivateKey, user.accountPublicKey),
                        viewingKeys: [viewingKey],
                        signingData,
                        partialStateSecretEphPubKey,
                    };
                }
            });
            return proofInputs;
        });
    }
    async createDefiProof(input, txRefNo, timeout) {
        return await this.serialQueue.push(async () => {
            this.assertInitState(SdkInitState.RUNNING);
            const { tx, viewingKeys } = input;
            const userId = tx.outputNotes[1].ownerPubKey;
            const userState = this.getUserState(userId);
            const user = userState.getUserData();
            const accountKeyPair = new ConstantKeyPair(user.accountPublicKey, user.accountPrivateKey, this.schnorr);
            return await this.runOrClientLog(() => this.proofOutputFactory.createDefiProof({
                ...input,
                viewingKey: viewingKeys[0],
                partialStateSecretEphPubKey: input.partialStateSecretEphPubKey,
                tx: joinSplitTxToJoinSplitTxInput(tx, user.accountPrivateKey, this.noteAlgos),
            }, input.signature, txRefNo, accountKeyPair, timeout), 'Failed to create defi proof.');
        });
    }
    async sendProofs(proofs, proofTxs = []) {
        return await this.serialQueue.push(async () => {
            this.assertInitState(SdkInitState.RUNNING);
            const txs = proofs.map(({ proofData, offchainTxData, signature }) => ({
                proofData: proofData.rawProofData,
                offchainTxData: offchainTxData.toBuffer(),
                depositSignature: signature,
            }));
            const txIds = await this.rollupProvider.sendTxs([...proofTxs, ...txs]);
            for (const proof of proofs) {
                const { userId } = proof.tx;
                // Proof sender may not have an account.
                await this.getUserStateUndef(userId)?.addProof(proof);
                // Add the payment proof to recipient's account if they are not the sender.
                if ([ProofId.DEPOSIT, ProofId.SEND].includes(proof.tx.proofId)) {
                    const recipient = proof.outputNotes[0].owner;
                    if (!recipient.equals(userId)) {
                        const recipientTx = createCorePaymentTxForRecipient(proof.tx, recipient);
                        // Recipient may not have an account.
                        await this.getUserStateUndef(recipient)?.addProof({ ...proof, tx: recipientTx });
                    }
                }
            }
            return txIds;
        });
    }
    async awaitSynchronised(timeout) {
        this.assertInitState(SdkInitState.RUNNING);
        await retryUntil(() => this.isSynchronised(), 'data synchronised', timeout);
    }
    isUserSynching(userId) {
        this.assertInitState(SdkInitState.RUNNING);
        return Promise.resolve(!this.getUserState(userId).isSynchronised(this.sdkStatus.latestRollupId));
    }
    async awaitUserSynchronised(userId, timeout) {
        this.assertInitState(SdkInitState.RUNNING);
        await this.getUserState(userId).awaitSynchronised(this.sdkStatus.latestRollupId, timeout);
        await this.awaitSynchronised();
    }
    async awaitSettlement(txId, timeout) {
        this.assertInitState(SdkInitState.RUNNING);
        await retryUntil(() => this.db.isUserTxSettled(txId), `tx settlement: ${txId}`, timeout);
    }
    async awaitDefiDepositCompletion(txId, timeout) {
        this.assertInitState(SdkInitState.RUNNING);
        const defiDepositCompleted = async () => {
            const tx = await this.db.getDefiTx(txId);
            if (!tx) {
                throw new Error('Unknown txId.');
            }
            return !!tx.settled;
        };
        await retryUntil(defiDepositCompleted, `defi interaction: ${txId}`, timeout);
    }
    async awaitDefiFinalisation(txId, timeout) {
        this.assertInitState(SdkInitState.RUNNING);
        const defiFinalised = async () => {
            const tx = await this.db.getDefiTx(txId);
            if (!tx) {
                throw new Error('Unknown txId.');
            }
            return !!tx.finalised;
        };
        await retryUntil(defiFinalised, `defi finalisation: ${txId}`, timeout);
    }
    async awaitDefiSettlement(txId, timeout) {
        this.assertInitState(SdkInitState.RUNNING);
        const defiSettled = async () => {
            const tx = await this.db.getDefiTx(txId);
            if (!tx) {
                throw new Error('Unknown txId.');
            }
            return !!tx.claimSettled;
        };
        await retryUntil(defiSettled, `defi settlement: ${txId}`, timeout);
    }
    // ---------------
    // PRIVATE METHODS
    // ---------------
    // TODO: Get rid of throwing behaviour.
    getUserState(userId) {
        const userState = this.userStates.find(us => us.getUserData().accountPublicKey.equals(userId));
        if (!userState) {
            throw new Error(`User not found: ${userId}`);
        }
        return userState;
    }
    getUserStateUndef(userId) {
        return this.userStates.find(us => us.getUserData().accountPublicKey.equals(userId));
    }
    isSynchronised() {
        // this.debug(`isSynchronised: ${this.sdkStatus.syncedToRollup} === ${this.sdkStatus.latestRollupId}`);
        return this.sdkStatus.syncedToRollup === this.sdkStatus.latestRollupId;
    }
    assertInitState(state) {
        if (this.initState !== state) {
            throw new Error(`Init state ${this.initState} !== ${state}`);
        }
    }
    async setLocalDataVersion(version) {
        await this.db.addKey('dataVersion', Buffer.from([version]));
    }
    async getLocalDataVersion() {
        const result = await this.db.getKey('dataVersion');
        return result ? result.readInt8(0) : 0;
    }
    async getLocalRollupContractAddress() {
        const result = await this.db.getKey('rollupContractAddress');
        return result ? new EthAddress(result) : undefined;
    }
    async getCrsData(circuitSize) {
        this.debug('downloading crs data...');
        const crs = new NetCrs(circuitSize);
        await crs.init();
        this.debug('done.');
        return Buffer.from(crs.getData());
    }
    /**
     * Loads known accounts from db.
     * Registers to forward any notifications of account state updates.
     */
    async initUserStates() {
        this.debug('initializing user states...');
        const users = await this.db.getUsers();
        await this.addInitialUserSpendingKeys(users.map(x => x.accountPublicKey));
        this.userStates = await Promise.all(users.map(u => this.userStateFactory.createUserState(u)));
        this.synchroniser.setUserStates(this.userStates);
        this.userStates.forEach(us => us.on(UserStateEvent.UPDATED_USER_STATE, id => {
            this.emit(SdkEvent.UPDATED_USER_STATE, id);
            this.broadcastChannel?.postMessage({
                event: SdkEvent.UPDATED_USER_STATE,
                args: [id.toString()],
            });
        }));
    }
    async addInitialUserSpendingKeys(userIds) {
        if (!userIds.length) {
            return;
        }
        const { initialAccounts: genesisAccountsData } = await this.synchroniser.retrieveGenesisData();
        if (genesisAccountsData.length) {
            const spendingKeys = await getUserSpendingKeysFromGenesisData(userIds, genesisAccountsData, this.pedersen, this.sdkStatus.rollupSize);
            this.debug(`found ${spendingKeys.length} spending keys for user${userIds.length == 1 ? '' : 's'}`);
            if (spendingKeys.length) {
                await this.db.addSpendingKeys(spendingKeys);
            }
        }
    }
    computeAliasHash(alias) {
        return AliasHash.fromAlias(alias, this.blake2s);
    }
    async runOrClientLog(fn, message) {
        const start = Date.now();
        try {
            return await fn();
        }
        catch (e) {
            const log = {
                message,
                error: e.message,
                timeUsed: Date.now() - start,
                memory: getDeviceMemory(),
            };
            await sendClientLog(this.rollupProvider, log);
            this.debug(log);
            throw e;
        }
    }
    async queryDefiPublishStats(query) {
        return await this.rollupProvider.queryDefiPublishStats(query);
    }
    async getBlocks(from, take = 1) {
        const rawBlocks = await this.rollupProvider.getBlocks(from, Math.min(Math.max(take, 1), 5));
        return rawBlocks.map(x => new DecodedBlock(x));
    }
}
//# sourceMappingURL=data:application/json;base64,