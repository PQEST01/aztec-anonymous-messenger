import { EthAddress } from '@aztec/barretenberg/address';
import { proofOutputToProofTx } from '../proofs/index.js';
import { createTxRefNo } from './create_tx_ref_no.js';
import { DepositHandler } from './deposit_handler.js';
export class MigrateAccountController extends DepositHandler {
    constructor(userId, userSigner, newAccountPrivateKey, newSpendingPublicKey, recoveryPublicKey, deposit, fee, depositor = EthAddress.ZERO, core, blockchain, provider) {
        super(deposit, fee, depositor, userId, true, core, blockchain, provider);
        this.userId = userId;
        this.userSigner = userSigner;
        this.newAccountPrivateKey = newAccountPrivateKey;
        this.newSpendingPublicKey = newSpendingPublicKey;
        this.recoveryPublicKey = recoveryPublicKey;
        this.deposit = deposit;
        this.fee = fee;
        this.depositor = depositor;
        this.core = core;
        this.txIds = [];
        this.requireDeposit = !!this.publicInput.value;
    }
    async createProof(timeout) {
        const txRefNo = this.requireDeposit ? createTxRefNo() : 0;
        if (this.requireDeposit) {
            await super.createProof(txRefNo, timeout);
        }
        const spendingPublicKey = this.userSigner.getPublicKey();
        const proofInput = await this.core.createAccountProofInput(this.userId, spendingPublicKey, true, undefined, this.newSpendingPublicKey, this.recoveryPublicKey, this.newAccountPrivateKey);
        proofInput.signature = await this.userSigner.signMessage(proofInput.signingData);
        this.proofOutput = await this.core.createAccountProof(proofInput, txRefNo, timeout);
    }
    exportProofTxs() {
        return this.getProofOutputs().map(proofOutputToProofTx);
    }
    async send() {
        const newAccountPublicKey = await this.core.derivePublicKey(this.newAccountPrivateKey);
        if (!(await this.core.userExists(newAccountPublicKey))) {
            throw new Error('Add the new account to the sdk first.');
        }
        const proofs = this.getProofOutputs();
        this.txIds = await this.core.sendProofs(proofs);
        return this.txIds[0];
    }
    getTxIds() {
        if (!this.txIds.length) {
            throw new Error(`Call ${!this.proofOutput ? 'createProof()' : 'send()'} first.`);
        }
        return this.txIds;
    }
    async awaitSettlement(timeout) {
        if (!this.txIds.length) {
            throw new Error(`Call ${!this.proofOutput ? 'createProof()' : 'send()'} first.`);
        }
        await Promise.all(this.txIds.map(txId => this.core.awaitSettlement(txId, timeout)));
    }
    getProofOutputs() {
        if (!this.proofOutput) {
            throw new Error('Call createProof() first.');
        }
        const proofOutputs = [this.proofOutput];
        if (this.requireDeposit) {
            proofOutputs.push(super.getProofOutput());
        }
        return proofOutputs;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlncmF0ZV9hY2NvdW50X2NvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29udHJvbGxlcnMvbWlncmF0ZV9hY2NvdW50X2NvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBbUIsTUFBTSw2QkFBNkIsQ0FBQztBQU0xRSxPQUFPLEVBQWUsb0JBQW9CLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUV2RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRXRELE1BQU0sT0FBTyx3QkFBeUIsU0FBUSxjQUFjO0lBSzFELFlBQ2tCLE1BQXVCLEVBQ3RCLFVBQWtCLEVBQ25CLG9CQUE0QixFQUM1QixvQkFBcUMsRUFDckMsaUJBQThDLEVBQzlDLE9BQW1CLEVBQ25CLEdBQWUsRUFDZixZQUFZLFVBQVUsQ0FBQyxJQUFJLEVBQ3hCLElBQWEsRUFDaEMsVUFBb0MsRUFDcEMsUUFBMEI7UUFFMUIsS0FBSyxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztRQVp6RCxXQUFNLEdBQU4sTUFBTSxDQUFpQjtRQUN0QixlQUFVLEdBQVYsVUFBVSxDQUFRO1FBQ25CLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBUTtRQUM1Qix5QkFBb0IsR0FBcEIsb0JBQW9CLENBQWlCO1FBQ3JDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBNkI7UUFDOUMsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUNuQixRQUFHLEdBQUgsR0FBRyxDQUFZO1FBQ2YsY0FBUyxHQUFULFNBQVMsQ0FBa0I7UUFDeEIsU0FBSSxHQUFKLElBQUksQ0FBUztRQVoxQixVQUFLLEdBQVcsRUFBRSxDQUFDO1FBaUJ6QixJQUFJLENBQUMsY0FBYyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQztJQUNqRCxDQUFDO0lBRU0sS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUFnQjtRQUN2QyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRTFELElBQUksSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUN2QixNQUFNLEtBQUssQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQzNDO1FBRUQsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3pELE1BQU0sVUFBVSxHQUFHLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FDeEQsSUFBSSxDQUFDLE1BQU0sRUFDWCxpQkFBaUIsRUFDakIsSUFBSSxFQUNKLFNBQVMsRUFDVCxJQUFJLENBQUMsb0JBQW9CLEVBQ3pCLElBQUksQ0FBQyxpQkFBaUIsRUFDdEIsSUFBSSxDQUFDLG9CQUFvQixDQUMxQixDQUFDO1FBQ0YsVUFBVSxDQUFDLFNBQVMsR0FBRyxNQUFNLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNqRixJQUFJLENBQUMsV0FBVyxHQUFHLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxVQUFVLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3RGLENBQUM7SUFFTSxjQUFjO1FBQ25CLE9BQU8sSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFTSxLQUFLLENBQUMsSUFBSTtRQUNmLE1BQU0sbUJBQW1CLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUN2RixJQUFJLENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLENBQUMsRUFBRTtZQUN0RCxNQUFNLElBQUksS0FBSyxDQUFDLHVDQUF1QyxDQUFDLENBQUM7U0FDMUQ7UUFFRCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDdEMsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2hELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBRU0sUUFBUTtRQUNiLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUN0QixNQUFNLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLFFBQVEsU0FBUyxDQUFDLENBQUM7U0FDbEY7UUFFRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDcEIsQ0FBQztJQUVNLEtBQUssQ0FBQyxlQUFlLENBQUMsT0FBZ0I7UUFDM0MsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQ3RCLE1BQU0sSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsUUFBUSxTQUFTLENBQUMsQ0FBQztTQUNsRjtRQUVELE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEYsQ0FBQztJQUVPLGVBQWU7UUFDckIsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDckIsTUFBTSxJQUFJLEtBQUssQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1NBQzlDO1FBRUQsTUFBTSxZQUFZLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDeEMsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFO1lBQ3ZCLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7U0FDM0M7UUFDRCxPQUFPLFlBQVksQ0FBQztJQUN0QixDQUFDO0NBQ0YifQ==