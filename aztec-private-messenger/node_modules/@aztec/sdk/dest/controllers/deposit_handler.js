import { retryUntil } from '@aztec/barretenberg/retry';
import { InterruptableSleep, sleep } from '@aztec/barretenberg/sleep';
import { Timer } from '@aztec/barretenberg/timer';
import { createPermitData, createPermitDataNonStandard, validateSignature, Web3Signer, } from '@aztec/blockchain';
export class DepositHandler {
    constructor(assetValue, fee, depositor, recipient, recipientSpendingKeyRequired, core, blockchain, provider) {
        this.assetValue = assetValue;
        this.fee = fee;
        this.depositor = depositor;
        this.recipient = recipient;
        this.recipientSpendingKeyRequired = recipientSpendingKeyRequired;
        this.core = core;
        this.blockchain = blockchain;
        this.provider = provider;
        this.pendingFundsStatus = { pendingDeposit: BigInt(0), pendingFunds: BigInt(0), requiredFunds: BigInt(0) };
        const { assetId, value } = assetValue;
        if (!blockchain.getAsset(assetId)) {
            throw new Error('Unsupported asset.');
        }
        if (fee.assetId !== assetId && fee.value && value) {
            throw new Error('Inconsistent asset id.');
        }
        this.publicInput = { assetId, value: value + fee.value };
    }
    async getPendingFunds() {
        const { pendingFunds } = await this.getPendingFundsStatus();
        return pendingFunds;
    }
    async getRequiredFunds() {
        const { requiredFunds } = await this.getPendingFundsStatus();
        return requiredFunds;
    }
    async getPublicAllowance() {
        const { assetId } = this.publicInput;
        const { rollupContractAddress } = await this.core.getLocalStatus();
        return this.blockchain.getAsset(assetId).allowance(this.depositor, rollupContractAddress);
    }
    hasPermitSupport() {
        const { assetId } = this.publicInput;
        return this.blockchain.hasPermitSupport(assetId);
    }
    async approve(permitDeadline) {
        const pendingFundsStatus = await this.getPendingFundsStatus();
        const value = pendingFundsStatus.requiredFunds;
        if (!value) {
            throw new Error('User has deposited enough funds.');
        }
        const allowance = await this.getPublicAllowance();
        if (allowance >= value) {
            throw new Error('User has approved enough amount.');
        }
        const isContract = await this.blockchain.isContract(this.depositor);
        const permitSupport = this.hasPermitSupport() && !isContract;
        if (permitSupport) {
            const permitArgs = await this.createPermitArgs(value, permitDeadline);
            this.pendingFundsStatus = {
                ...pendingFundsStatus,
                permitArgs,
            };
        }
        else {
            const { assetId } = this.publicInput;
            const { rollupContractAddress } = await this.core.getLocalStatus();
            const approve = () => this.blockchain.getAsset(assetId).approve(value, this.depositor, rollupContractAddress, {
                signingAddress: this.depositor,
                provider: this.provider,
            });
            let approveTxHash;
            if (!isContract) {
                approveTxHash = await approve();
            }
            else {
                const checkOnchainData = async () => {
                    const allowance = await this.getPublicAllowance();
                    return allowance >= value;
                };
                approveTxHash = await this.sendTransactionAndCheckOnchainData('approve allowance from contract wallet', approve, checkOnchainData);
            }
            this.pendingFundsStatus = {
                ...pendingFundsStatus,
                approvedFromContractWallet: isContract && !approveTxHash,
                approveTxHash,
            };
            return approveTxHash;
        }
    }
    async awaitApprove(timeout, interval) {
        const { approvedFromContractWallet, approveTxHash, requiredFunds } = this.pendingFundsStatus;
        if (approvedFromContractWallet) {
            return;
        }
        if (!approveTxHash) {
            throw new Error('Call approve() first.');
        }
        const checkOnchainData = async () => {
            const allowance = await this.getPublicAllowance();
            return allowance >= requiredFunds;
        };
        await this.awaitTransaction('approve allowance', checkOnchainData, timeout, interval);
    }
    async depositFundsToContract(permitDeadline) {
        const pendingFundsStatus = await this.getPendingFundsStatus();
        const value = pendingFundsStatus.requiredFunds;
        if (!value) {
            throw new Error('User has deposited enough funds.');
        }
        const { assetId } = this.publicInput;
        const isContract = await this.blockchain.isContract(this.depositor);
        const permitSupport = this.hasPermitSupport() && !isContract;
        const allowance = assetId === 0 ? value : await this.getPublicAllowance();
        if (!permitSupport && allowance < value) {
            throw new Error('Insufficient allowance. Call approve() first.');
        }
        const depositFunds = async () => {
            if (permitSupport && allowance < value) {
                const { signature, deadline } = pendingFundsStatus.permitArgs || (await this.createPermitArgs(value, permitDeadline));
                return this.blockchain.depositPendingFundsPermit(assetId, value, deadline, signature, {
                    signingAddress: this.depositor,
                    provider: this.provider,
                });
            }
            else {
                const proofHash = isContract ? this.getProofHash() : undefined;
                return this.blockchain.depositPendingFunds(assetId, value, proofHash, {
                    signingAddress: this.depositor,
                    provider: this.provider,
                });
            }
        };
        let txHash;
        if (!isContract) {
            txHash = await depositFunds();
        }
        else {
            const { pendingDeposit, requiredFunds } = pendingFundsStatus;
            const expectedPendingDeposit = pendingDeposit + requiredFunds;
            const checkOnchainData = async () => {
                const value = await this.blockchain.getUserPendingDeposit(assetId, this.depositor);
                return value === expectedPendingDeposit;
            };
            txHash = await this.sendTransactionAndCheckOnchainData('deposit funds from contract wallet', depositFunds, checkOnchainData);
        }
        this.pendingFundsStatus = {
            ...pendingFundsStatus,
            depositedFromContractWallet: isContract && !txHash,
            txHash,
        };
        return txHash;
    }
    async depositFundsToContractWithNonStandardPermit(permitDeadline) {
        const pendingFundsStatus = await this.getPendingFundsStatus();
        const value = pendingFundsStatus.requiredFunds;
        if (!value) {
            throw new Error('User has deposited enough funds.');
        }
        const isContract = await this.blockchain.isContract(this.depositor);
        if (isContract) {
            throw new Error('Permit flow not available for contract wallets.');
        }
        let txHash;
        const { assetId } = this.publicInput;
        const allowance = await this.getPublicAllowance();
        if (allowance >= value) {
            txHash = await this.blockchain.depositPendingFunds(assetId, value, undefined, {
                signingAddress: this.depositor,
                provider: this.provider,
            });
        }
        else {
            const { signature, deadline, nonce } = await this.createPermitArgsNonStandard(permitDeadline);
            txHash = await this.blockchain.depositPendingFundsPermitNonStandard(assetId, value, nonce, deadline, signature, {
                signingAddress: this.depositor,
                provider: this.provider,
            });
        }
        this.pendingFundsStatus = {
            ...pendingFundsStatus,
            txHash,
        };
        return txHash;
    }
    async awaitDepositFundsToContract(timeout, interval) {
        const { depositedFromContractWallet, txHash, pendingDeposit, requiredFunds } = this.pendingFundsStatus;
        if (depositedFromContractWallet) {
            return true;
        }
        if (!txHash) {
            throw new Error('Call depositFundsToContract() first.');
        }
        const { assetId } = this.publicInput;
        const expectedPendingDeposit = pendingDeposit + requiredFunds;
        const checkOnchainData = async () => {
            const value = await this.blockchain.getUserPendingDeposit(assetId, this.depositor);
            return value === expectedPendingDeposit;
        };
        await this.awaitTransaction('deposit pending funds', checkOnchainData, timeout, interval);
    }
    async createProof(txRefNo = 0, timeout) {
        const { assetId, value } = this.publicInput;
        const privateOutput = value - this.fee.value;
        this.depositProofOutput = await this.core.createDepositProof(assetId, value, // publicInput,
        privateOutput, this.depositor, this.recipient, this.recipientSpendingKeyRequired, txRefNo, timeout);
    }
    getProofOutput() {
        if (!this.depositProofOutput) {
            throw new Error('Call createProof() first.');
        }
        return this.depositProofOutput;
    }
    getProofHash() {
        if (!this.depositProofOutput) {
            throw new Error('Call createProof() first.');
        }
        return this.depositProofOutput.tx.txId.toBuffer();
    }
    async isProofApproved() {
        const proofHash = this.getProofHash();
        return !!(await this.blockchain.getUserProofApprovalStatus(this.depositor, proofHash));
    }
    async approveProof() {
        const proofHash = this.getProofHash();
        const isContract = await this.blockchain.isContract(this.depositor);
        const approveProof = () => this.blockchain.approveProof(proofHash, {
            signingAddress: this.depositor,
            provider: this.provider,
        });
        let approveProofTxHash;
        if (!isContract) {
            approveProofTxHash = await approveProof();
        }
        else {
            const checkOnchainData = () => this.isProofApproved();
            approveProofTxHash = await this.sendTransactionAndCheckOnchainData('approve proof from contract wallet', approveProof, checkOnchainData);
        }
        this.pendingFundsStatus = {
            ...this.pendingFundsStatus,
            proofApprovedFromContractWallet: isContract && !approveProofTxHash,
            approveProofTxHash,
        };
        return approveProofTxHash;
    }
    async awaitApproveProof(timeout, interval) {
        const { proofApprovedFromContractWallet, approveProofTxHash } = this.pendingFundsStatus;
        if (proofApprovedFromContractWallet) {
            return true;
        }
        if (!approveProofTxHash) {
            throw new Error('Call approveProof() first.');
        }
        const checkOnchainData = () => this.isProofApproved();
        await this.awaitTransaction('approve proof', checkOnchainData, timeout, interval);
    }
    getSigningData() {
        if (!this.depositProofOutput) {
            throw new Error('Call createProof() first.');
        }
        return this.depositProofOutput.tx.txId.toDepositSigningData();
    }
    async sign() {
        if (!this.depositProofOutput) {
            throw new Error('Call createProof() first.');
        }
        const ethSigner = new Web3Signer(this.provider);
        const signingData = this.getSigningData();
        this.depositProofOutput.signature = await ethSigner.signPersonalMessage(signingData, this.depositor);
    }
    isSignatureValid() {
        if (!this.depositProofOutput) {
            throw new Error('Call createProof() and sign() first.');
        }
        if (!this.depositProofOutput.signature) {
            throw new Error('Call sign() first.');
        }
        const signingData = this.getSigningData();
        return validateSignature(this.depositor, this.depositProofOutput.signature, signingData);
    }
    async getPendingFundsStatus() {
        const { assetId } = this.publicInput;
        const pendingDeposit = await this.blockchain.getUserPendingDeposit(assetId, this.depositor);
        const txs = await this.core.getPendingDepositTxs();
        const unsettledDeposit = txs
            .filter(tx => tx.assetId === assetId && tx.publicOwner.equals(this.depositor))
            .reduce((sum, tx) => sum + BigInt(tx.value), BigInt(0));
        const pendingFunds = pendingDeposit - unsettledDeposit;
        const { value } = this.publicInput;
        const requiredFunds = pendingFunds < value ? value - pendingFunds : BigInt(0);
        return { ...this.pendingFundsStatus, pendingDeposit, pendingFunds, requiredFunds };
    }
    async createPermitArgs(value, permitDeadline) {
        const deadline = permitDeadline ?? BigInt(Math.floor(Date.now() / 1000) + 5 * 60); // Default deadline is 5 mins from now.
        const { assetId } = this.publicInput;
        const asset = this.blockchain.getAsset(assetId);
        const nonce = await asset.getUserNonce(this.depositor);
        const { permitHelperContractAddress, chainId } = await this.core.getLocalStatus();
        const permitData = createPermitData(asset.getStaticInfo().name, this.depositor, permitHelperContractAddress, value, nonce, deadline, asset.getStaticInfo().address, this.getContractChainId(chainId));
        const ethSigner = new Web3Signer(this.provider);
        const signature = await ethSigner.signTypedData(permitData, this.depositor);
        return { signature, deadline };
    }
    async createPermitArgsNonStandard(permitDeadline) {
        const deadline = permitDeadline ?? BigInt(Math.floor(Date.now() / 1000) + 5 * 60); // Default deadline is 5 mins from now.
        const { assetId } = this.publicInput;
        const asset = this.blockchain.getAsset(assetId);
        const nonce = await asset.getUserNonce(this.depositor);
        const { permitHelperContractAddress, chainId } = await this.core.getLocalStatus();
        const permitData = createPermitDataNonStandard(asset.getStaticInfo().name, this.depositor, permitHelperContractAddress, nonce, deadline, asset.getStaticInfo().address, this.getContractChainId(chainId));
        const ethSigner = new Web3Signer(this.provider);
        const signature = await ethSigner.signTypedData(permitData, this.depositor);
        return { signature, deadline, nonce };
    }
    getContractChainId(chainId) {
        // Any references to the chainId in the contracts on mainnet-fork (like the DOMAIN_SEPARATOR for permit data)
        // will have to be 1.
        switch (chainId) {
            case 0xa57ec:
            case 0xdef:
            case 0xe2e:
                return 1;
            default:
                return chainId;
        }
    }
    async sendTransactionAndCheckOnchainData(name, sendTx, checkOnchainData, timeout, interval = 1) {
        const interruptableSleep = new InterruptableSleep();
        let txHash;
        let txError;
        // May never return due to wallet connect provider bugs.
        void (async () => {
            try {
                txHash = await sendTx();
            }
            catch (e) {
                txError = e;
            }
            interruptableSleep.interrupt();
        })();
        const timer = new Timer();
        while (!txHash && !txError) {
            // We want confidence the tx will be accepted, so simulate waiting for confirmations.
            if (await checkOnchainData()) {
                const secondsTillConfirmed = (this.blockchain.minConfirmations - 1) * 15;
                await sleep(secondsTillConfirmed * 1000);
                break;
            }
            await interruptableSleep.sleep(interval * 1000);
            if (timeout && timer.s() > timeout) {
                throw new Error(`Timeout awaiting chain state condition: ${name}`);
            }
        }
        if (txError) {
            throw txError;
        }
        return txHash;
    }
    async awaitTransaction(name, confirmedFromOnchainData, timeout, interval = 1) {
        await retryUntil(confirmedFromOnchainData, `chain state condition: ${name}`, timeout, interval);
        // We want confidence the tx will be accepted, so simulate waiting for confirmations.
        const secondsTillConfirmed = (this.blockchain.minConfirmations - 1) * 15;
        await sleep(secondsTillConfirmed * 1000);
    }
}
//# sourceMappingURL=data:application/json;base64,