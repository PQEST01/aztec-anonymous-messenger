import { proofOutputToProofTx } from '../proofs/index.js';
import { createTxRefNo } from './create_tx_ref_no.js';
export class WithdrawController {
    constructor(userId, userSigner, assetValue, fee, recipient, core) {
        this.userId = userId;
        this.userSigner = userSigner;
        this.assetValue = assetValue;
        this.fee = fee;
        this.recipient = recipient;
        this.core = core;
        this.proofOutputs = [];
        this.feeProofOutputs = [];
        this.txIds = [];
        if (!assetValue.value) {
            throw new Error('Value must be greater than 0.');
        }
        this.requireFeePayingTx = !!fee.value && fee.assetId !== assetValue.assetId;
    }
    async createProof(timeout) {
        const { assetId, value } = this.assetValue;
        const privateInput = value + (!this.requireFeePayingTx ? this.fee.value : BigInt(0));
        const spendingPublicKey = this.userSigner.getPublicKey();
        const spendingKeyRequired = !spendingPublicKey.equals(this.userId);
        const proofInputs = await this.core.createPaymentProofInputs(this.userId, assetId, BigInt(0), value, privateInput, BigInt(0), BigInt(0), this.userId, spendingKeyRequired, this.recipient, spendingPublicKey, 2);
        const txRefNo = this.requireFeePayingTx || proofInputs.length > 1 ? createTxRefNo() : 0;
        if (this.requireFeePayingTx) {
            const feeProofInputs = await this.core.createPaymentProofInputs(this.userId, this.fee.assetId, BigInt(0), BigInt(0), this.fee.value, BigInt(0), BigInt(0), this.userId, spendingKeyRequired, undefined, spendingPublicKey, 2);
            this.feeProofOutputs = [];
            for (const proofInput of feeProofInputs) {
                proofInput.signature = await this.userSigner.signMessage(proofInput.signingData);
                this.feeProofOutputs.push(await this.core.createPaymentProof(proofInput, txRefNo, timeout));
            }
        }
        {
            const proofOutputs = [];
            for (const proofInput of proofInputs) {
                proofInput.signature = await this.userSigner.signMessage(proofInput.signingData);
                proofOutputs.push(await this.core.createPaymentProof(proofInput, txRefNo, timeout));
            }
            this.proofOutputs = proofOutputs;
        }
    }
    exportProofTxs() {
        if (!this.proofOutputs.length) {
            throw new Error('Call createProof() first.');
        }
        return [...this.proofOutputs, ...this.feeProofOutputs].map(proofOutputToProofTx);
    }
    async send() {
        if (!this.proofOutputs.length) {
            throw new Error('Call createProof() first.');
        }
        this.txIds = await this.core.sendProofs([...this.proofOutputs, ...this.feeProofOutputs]);
        return this.txIds[this.proofOutputs.length - 1];
    }
    getTxIds() {
        if (!this.txIds.length) {
            throw new Error(`Call ${!this.proofOutputs.length ? 'createProof()' : 'send()'} first.`);
        }
        return this.txIds;
    }
    async awaitSettlement(timeout) {
        if (!this.txIds.length) {
            throw new Error(`Call ${!this.proofOutputs.length ? 'createProof()' : 'send()'} first.`);
        }
        await Promise.all(this.txIds.map(txId => this.core.awaitSettlement(txId, timeout)));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2l0aGRyYXdfY29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb250cm9sbGVycy93aXRoZHJhd19jb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE9BQU8sRUFBZSxvQkFBb0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRXZFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUV0RCxNQUFNLE9BQU8sa0JBQWtCO0lBTTdCLFlBQ2tCLE1BQXVCLEVBQ3RCLFVBQWtCLEVBQ25CLFVBQXNCLEVBQ3RCLEdBQWUsRUFDZixTQUFxQixFQUNwQixJQUFhO1FBTGQsV0FBTSxHQUFOLE1BQU0sQ0FBaUI7UUFDdEIsZUFBVSxHQUFWLFVBQVUsQ0FBUTtRQUNuQixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3RCLFFBQUcsR0FBSCxHQUFHLENBQVk7UUFDZixjQUFTLEdBQVQsU0FBUyxDQUFZO1FBQ3BCLFNBQUksR0FBSixJQUFJLENBQVM7UUFWeEIsaUJBQVksR0FBa0IsRUFBRSxDQUFDO1FBQ2pDLG9CQUFlLEdBQWtCLEVBQUUsQ0FBQztRQUNwQyxVQUFLLEdBQVcsRUFBRSxDQUFDO1FBVXpCLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFO1lBQ3JCLE1BQU0sSUFBSSxLQUFLLENBQUMsK0JBQStCLENBQUMsQ0FBQztTQUNsRDtRQUVELElBQUksQ0FBQyxrQkFBa0IsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssSUFBSSxHQUFHLENBQUMsT0FBTyxLQUFLLFVBQVUsQ0FBQyxPQUFPLENBQUM7SUFDOUUsQ0FBQztJQUVNLEtBQUssQ0FBQyxXQUFXLENBQUMsT0FBZ0I7UUFDdkMsTUFBTSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQzNDLE1BQU0sWUFBWSxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFD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