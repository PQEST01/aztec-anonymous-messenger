const noteSum = (notes) => notes.reduce((sum, { value }) => sum + value, BigInt(0));
export class NotePicker {
    constructor(notes = []) {
        // Filter non spendable
        const validNotes = notes.filter(note => !note.pending || note.allowChain);
        this.sortedNotes = {
            pendingAreLower: this.sortNotes(validNotes, true),
            pendingAreHigher: this.sortNotes(validNotes, false),
        };
    }
    pick(value, { excludedNullifiers, excludePendingNotes, spendingKeyRequired } = {}) {
        const filteredNotes = this.filterByOptions(this.getSortedNotes(true), {
            excludedNullifiers,
            excludePendingNotes,
            spendingKeyRequired,
        });
        let minimumNumberOfNotes = this.findMinimumNotes(value, filteredNotes);
        if (!minimumNumberOfNotes) {
            // Not enough notes
            return [];
        }
        // We can pick 2 notes with the same cost
        if (minimumNumberOfNotes === 1) {
            minimumNumberOfNotes = 2;
        }
        let pickedNotes = this.getMaxSpendableNotes(excludedNullifiers, excludePendingNotes, spendingKeyRequired, minimumNumberOfNotes).reverse();
        pickedNotes = this.reducePickedNotesValues(pickedNotes, value, {
            excludedNullifiers,
            excludePendingNotes,
            spendingKeyRequired,
        });
        const exactNoteMatch = pickedNotes.find(note => note.value === value);
        if (exactNoteMatch) {
            return [exactNoteMatch];
        }
        else {
            return pickedNotes;
        }
    }
    reducePickedNotesValues(selectionToImprove, targetValue, options) {
        const pickedNotes = selectionToImprove.slice();
        const availableNotes = this.filterByOptions(this.getSortedNotes(false), options);
        let excessValue = 0n;
        let usedNullifiers = [];
        let unusedNotes = [];
        let hasPending = false;
        for (let index = 0; index < pickedNotes.length; index++) {
            const noteToImprove = pickedNotes[index];
            excessValue = noteSum(pickedNotes) - targetValue;
            usedNullifiers = pickedNotes.map(note => note.nullifier);
            unusedNotes = availableNotes.filter(note => !usedNullifiers.includes(note.nullifier));
            hasPending = pickedNotes.some(note => note.pending);
            const minimumValue = noteToImprove.value - excessValue;
            const betterNoteIndex = unusedNotes.findIndex(potentallyBetterNote => potentallyBetterNote.value >= minimumValue &&
                potentallyBetterNote.value < noteToImprove.value &&
                (!potentallyBetterNote.pending || !hasPending || noteToImprove.pending));
            if (betterNoteIndex === -1) {
                // No better note found, cannot improve further the set
                return pickedNotes;
            }
            const betterNote = unusedNotes[betterNoteIndex];
            pickedNotes[index] = betterNote;
        }
        return pickedNotes;
    }
    findMinimumNotes(value, notes) {
        let minimumNotes = 0;
        let accumulatedValue = 0n;
        let hasPendingNote = false;
        for (let index = notes.length - 1; index >= 0; index--) {
            const note = notes[index];
            if (!note.pending || !hasPendingNote) {
                minimumNotes++;
                accumulatedValue += note.value;
                hasPendingNote = hasPendingNote || note.pending;
                if (accumulatedValue >= value) {
                    return minimumNotes;
                }
            }
        }
        return 0;
    }
    pickOne(value, options = {}) {
        const filteredNotes = this.filterByOptions(this.getSortedNotes(false), options);
        return filteredNotes.find(note => note.value >= value);
    }
    getSum() {
        return noteSum(this.getSortedNotes().filter(note => !note.pending));
    }
    getSpendableNoteValues(options = {}) {
        return this.filterByOptions(this.getSortedNotes(true), options).map(note => note.value);
    }
    getMaxSpendableNoteValues({ excludedNullifiers, excludePendingNotes, spendingKeyRequired, numNotes, } = {}) {
        const notes = this.getMaxSpendableNotes(excludedNullifiers, excludePendingNotes, spendingKeyRequired, numNotes);
        return notes.map(n => n.value);
    }
    getMaxSpendableNotes(excludedNullifiers = [], excludePendingNotes = false, spendingKeyRequired = false, numNotes) {
        const filteredNotes = this.filterByOptions(this.getSortedNotes(true), {
            excludedNullifiers,
            excludePendingNotes,
            spendingKeyRequired,
        });
        let hasPendingNote = false;
        const notes = [];
        for (const note of filteredNotes.reverse()) {
            if (!note.pending || !hasPendingNote) {
                notes.push(note);
                hasPendingNote = hasPendingNote || note.pending;
            }
            if (notes.length === numNotes) {
                return notes;
            }
        }
        return notes;
    }
    getSortedNotes(pendingAreLower = false) {
        return pendingAreLower ? this.sortedNotes.pendingAreLower : this.sortedNotes.pendingAreHigher;
    }
    sortNotes(notes, pendingAreLower) {
        return notes.slice().sort((a, b) => {
            if (a.value < b.value) {
                return -1;
            }
            if (a.value > b.value) {
                return 1;
            }
            const pendingDiff = Number(a.pending) - Number(b.pending);
            return pendingAreLower ? -pendingDiff : pendingDiff;
        });
    }
    filterByOptions(notes, { excludedNullifiers = [], excludePendingNotes = false, spendingKeyRequired = false } = {}) {
        return notes.filter(note => !excludedNullifiers.some(n => n.equals(note.nullifier)) &&
            (!excludePendingNotes || !note.pending) &&
            (spendingKeyRequired ? note.ownerAccountRequired : !note.ownerAccountRequired));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbm90ZV9waWNrZXIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxPQUFPLEdBQUcsQ0FBQyxLQUFhLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQVE1RixNQUFNLE9BQU8sVUFBVTtJQU9yQixZQUFZLFFBQWdCLEVBQUU7UUFDNUIsdUJBQXVCO1FBQ3ZCLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzFFLElBQUksQ0FBQyxXQUFXLEdBQUc7WUFDakIsZUFBZSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQztZQUNqRCxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUM7U0FDcEQsQ0FBQztJQUNKLENBQUM7SUFFTSxJQUFJLENBQ1QsS0FBYSxFQUNiLEVBQUUsa0JBQWtCLEVBQUUsbUJBQW1CLEVBQUUsbUJBQW1CLEtBQXdCLEVBQUU7UUFFeEYsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3BFLGtCQUFrQjtZQUNsQixtQkFBbUI7WUFDbkIsbUJBQW1CO1NBQ3BCLENBQUMsQ0FBQztRQUNILElBQUksb0JBQW9CLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQztRQUN2RSxJQUFJLENBQUMsb0JBQW9CLEVB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RUFBRTtnQkFDN0IsT0FBTyxLQUFLLENBQUM7YUFDZDtTQUNGO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRU8sY0FBYyxDQUFDLGVBQWUsR0FBRyxLQUFLO1FBQzVDLE9BQU8sZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQztJQUNoRyxDQUFDO0lBRU8sU0FBUyxDQUFDLEtBQWEsRUFBRSxlQUF3QjtRQUN2RCxPQUFPLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDakMsSUFBSSxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUU7Z0JBQ3JCLE9BQU8sQ0FBQyxDQUFDLENBQUM7YUFDWDtZQUNELElBQUksQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFO2dCQUNyQixPQUFPLENBQUMsQ0FBQzthQUNWO1lBQ0QsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzFELE9BQU8sZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDO1FBQ3RELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLGVBQWUsQ0FDckIsS0FBYSxFQUNiLEVBQUUsa0JBQWtCLEdBQUcsRUFBRSxFQUFFLG1CQUFtQixHQUFHLEtBQUssRUFBRSxtQkFBbUIsR0FBRyxLQUFLLEtBQXdCLEVBQUU7UUFFN0csT0FBTyxLQUFLLENBQUMsTUFBTSxDQUNqQixJQUFJLENBQUMsRUFBRSxDQUNMLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDdkQsQ0FBQyxDQUFDLG1CQUFtQixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUN2QyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQ2pGLENBQUM7SUFDSixDQUFDO0NBQ0YifQ==