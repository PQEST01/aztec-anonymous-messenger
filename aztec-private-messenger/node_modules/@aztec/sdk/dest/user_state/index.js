import { ProofId } from '@aztec/barretenberg/client_proofs';
import { createDebugLogger } from '@aztec/barretenberg/log';
import { batchDecryptNotes, recoverTreeNotes, } from '@aztec/barretenberg/note_algorithms';
import { OffchainAccountData, OffchainDefiDepositData, OffchainJoinSplitData, } from '@aztec/barretenberg/offchain_tx_data';
import { retryUntil } from '@aztec/barretenberg/retry';
import { Timer } from '@aztec/barretenberg/timer';
import { EventEmitter } from 'events';
import { CacheRequest } from '../cache_request/index.js';
import { BoundedSerialQueue } from '@aztec/barretenberg/fifo';
import { NotePicker } from '../note_picker/index.js';
import { DbOps } from './db_ops.js';
const debug = createDebugLogger('bb:user_state');
const debugDecrypt = createDebugLogger('bb:user_state_decrypt');
export var UserStateEvent;
(function (UserStateEvent) {
    UserStateEvent["UPDATED_USER_STATE"] = "UPDATED_USER_STATE";
})(UserStateEvent = UserStateEvent || (UserStateEvent = {}));
export class UserState extends EventEmitter {
    constructor(userData, grumpkin, noteAlgos, noteDecryptor, db, rollupProvider) {
        super();
        this.userData = userData;
        this.grumpkin = grumpkin;
        this.noteAlgos = noteAlgos;
        this.noteDecryptor = noteDecryptor;
        this.db = db;
        this.rollupProvider = rollupProvider;
        this.decryptQueue = new BoundedSerialQueue(10);
        this.dbOpsQueue = new BoundedSerialQueue(10);
        this.pendingNoteNullifiersRequest = new CacheRequest(async () => await rollupProvider.getPendingNoteNullifiers());
        this.notePickersRequest = new CacheRequest(async () => await this.getNotePickers());
        this.latestQueuedRollup = userData.syncedToRollup;
    }
    async init() {
        await this.resetData();
        this.decryptQueue.start();
        this.dbOpsQueue.start();
    }
    async shutdown(flush = false) {
        if (flush) {
            await this.decryptQueue.end();
            await this.dbOpsQueue.end();
        }
        else {
            await this.decryptQueue.cancel();
            await this.dbOpsQueue.cancel();
        }
    }
    async flush() {
        await this.decryptQueue.syncPoint();
        await this.dbOpsQueue.syncPoint();
    }
    /**
     * Should be called before reading any state that has persistent storage that may have changed underfoot.
     * If the user has synched further underfoot, we refresh our notepicker and emit an update event.
     */
    async syncFromDb() {
        const { syncedToRollup } = (await this.db.getUser(this.userData.accountPublicKey));
        if (syncedToRollup !== this.userData.syncedToRollup) {
            this.userData.syncedToRollup = syncedToRollup;
            this.notePickersRequest.clearCache();
            this.emit(UserStateEvent.UPDATED_USER_STATE, this.userData.accountPublicKey);
        }
    }
    isSynchronised(latestRollupId) {
        // this.debug(`isSynchronised: ${this.userData.syncedToRollup} >= ${latestRollupId}`);
        return this.userData.syncedToRollup >= latestRollupId;
    }
    async awaitSynchronised(latestRollupId, timeout) {
        await retryUntil(() => this.isSynchronised(latestRollupId), 'user synchronised', timeout);
    }
    getUserData() {
        return { ...this.userData };
    }
    processBlocks(blockContexts) {
        return this.decryptQueue.put(() => this.handleBlocks(blockContexts));
    }
    async handleBlocks(blockContexts) {
        // Remove any blocks we've already processed.
        blockContexts = blockContexts.filter(b => b.rollup.rollupId > this.latestQueuedRollup);
        // If nothings left, or these blocks don't lead on immediately from last queued rollup, do nothing.
        if (blockContexts.length == 0) {
            this.debugDecrypt(`no blocks left after filtering.`);
            return;
        }
        else if (blockContexts[0].rollup.rollupId !== this.latestQueuedRollup + 1) {
            this.debugDecrypt(`ignoring non contiguous blocks, ${blockContexts[0].rollup.rollupId} !== ${this.latestQueuedRollup + 1}`);
            return;
        }
        this.latestQueuedRollup = blockContexts[blockContexts.length - 1].rollup.rollupId;
        const timer = new Timer();
        const from = blockContexts[0].rollup.rollupId;
        this.debugDecrypt(`blocks ${from} to ${from + blockContexts.length - 1}...`);
        const rollupProofData = blockContexts.map(b => b.rollup);
        const innerProofs = rollupProofData.map(p => p.getNonPaddingProofs()).flat();
        const offchainTxDataBuffers = blockContexts.map(b => b.block.offchainTxData).flat();
        const viewingKeys = [];
        const noteCommitments = [];
        const inputNullifiers = [];
        const offchainJoinSplitData = [];
        const offchainAccountData = [];
        const offchainDefiDepositData = [];
        innerProofs.forEach((proof, i) => {
            switch (proof.proofId) {
                case ProofId.DEPOSIT:
                case ProofId.WITHDRAW:
                case ProofId.SEND: {
                    const offchainTxData = OffchainJoinSplitData.fromBuffer(offchainTxDataBuffers[i]);
                    viewingKeys.push(...offchainTxData.viewingKeys);
                    const { noteCommitment1, noteCommitment2, nullifier1: inputNullifier1, nullifier2: inputNullifier2, } = innerProofs[i];
                    noteCommitments.push(noteCommitment1);
                    noteCommitments.push(noteCommitment2);
                    inputNullifiers.push(inputNullifier1);
                    inputNullifiers.push(inputNullifier2);
                    offchainJoinSplitData.push(offchainTxData);
                    break;
                }
                case ProofId.ACCOUNT: {
                    offchainAccountData.push(OffchainAccountData.fromBuffer(offchainTxDataBuffers[i]));
                    break;
                }
                case ProofId.DEFI_DEPOSIT: {
                    const offchainTxData = OffchainDefiDepositData.fromBuffer(offchainTxDataBuffers[i]);
                    viewingKeys.push(offchainTxData.viewingKey);
                    // There is only 1 note on the output of DEFI_DEPOSIT (claim note)
                    const { noteCommitment2, nullifier2: inputNullifier2 } = innerProofs[i];
                    noteCommitments.push(noteCommitment2);
                    inputNullifiers.push(inputNullifier2);
                    offchainDefiDepositData.push(offchainTxData);
                    break;
                }
            }
        });
        const viewingKeysBuf = Buffer.concat(viewingKeys.flat().map(vk => vk.toBuffer()));
        const decryptedTreeNotes = await batchDecryptNotes(viewingKeysBuf, this.userData.accountPrivateKey, this.noteDecryptor, this.grumpkin);
        const treeNotes = recoverTreeNotes(decryptedTreeNotes, inputNullifiers, noteCommitments, this.userData.accountPublicKey, this.noteAlgos);
        this.debugDecrypt(`done in ${timer.s()}s.`);
        await this.dbOpsQueue.put(async () => {
            const dbOps = new DbOps(this.userData, this.noteAlgos, this.db, this.grumpkin);
            await dbOps.handleTxs({
                blockContexts,
                rollupProofData,
                offchainJoinSplitData,
                offchainAccountData,
                offchainDefiDepositData,
                treeNotes,
            });
            this.notePickersRequest.clearCache();
            this.emit(UserStateEvent.UPDATED_USER_STATE, this.userData.accountPublicKey);
        });
    }
    async pickNotes(assetId, value, options = {}) {
        const { notePicker } = (await this.notePickersRequest.get()).find(np => np.assetId === assetId) || {};
        if (!notePicker) {
            return [];
        }
        const pendingNullifiers = await this.pendingNoteNullifiersRequest.get();
        return notePicker.pick(value, {
            ...options,
            excludedNullifiers: [...(options.excludedNullifiers || []), ...pendingNullifiers],
        });
    }
    async pickNote(assetId, value, options = {}) {
        const { notePicker } = (await this.notePickersRequest.get()).find(np => np.assetId === assetId) || {};
        if (!notePicker) {
            return;
        }
        const pendingNullifiers = await this.pendingNoteNullifiersRequest.get();
        return notePicker.pickOne(value, {
            ...options,
            excludedNullifiers: [...(options.excludedNullifiers || []), ...pendingNullifiers],
        });
    }
    async getSpendableNoteValues(assetId, options = {}) {
        const { notePicker } = (await this.notePickersRequest.get()).find(np => np.assetId === assetId) || {};
        if (!notePicker) {
            return [];
        }
        const pendingNullifiers = await this.pendingNoteNullifiersRequest.get();
        return notePicker.getSpendableNoteValues({
            ...options,
            excludedNullifiers: [...(options.excludedNullifiers || []), ...pendingNullifiers],
        });
    }
    async getSpendableSum(assetId, options = {}) {
        const { notePicker } = (await this.notePickersRequest.get()).find(np => np.assetId === assetId) || {};
        if (!notePicker) {
            return BigInt(0);
        }
        const pendingNullifiers = await this.pendingNoteNullifiersRequest.get();
        return notePicker
            .getSpendableNoteValues({
            ...options,
            excludedNullifiers: [...(options.excludedNullifiers || []), ...pendingNullifiers],
        })
            .reduce((sum, v) => sum + v, BigInt(0));
    }
    async getSpendableSums(options = {}) {
        const pendingNullifiers = await this.pendingNoteNullifiersRequest.get();
        return (await this.notePickersRequest.get())
            .map(({ assetId, notePicker }) => ({
            assetId,
            value: notePicker
                .getSpendableNoteValues({
                ...options,
                excludedNullifiers: [...(options.excludedNullifiers || []), ...pendingNullifiers],
            })
                .reduce((sum, v) => sum + v, BigInt(0)),
        }))
            .filter(assetValue => assetValue.value > BigInt(0));
    }
    async getMaxSpendableNoteValues(assetId, options = {}) {
        const { notePicker } = (await this.notePickersRequest.get()).find(np => np.assetId === assetId) || {};
        if (!notePicker) {
            return [];
        }
        const pendingNullifiers = await this.pendingNoteNullifiersRequest.get();
        return notePicker.getMaxSpendableNoteValues({
            ...options,
            excludedNullifiers: [...(options.excludedNullifiers || []), ...pendingNullifiers],
        });
    }
    async getBalance(assetId) {
        const { notePicker } = (await this.notePickersRequest.get()).find(np => np.assetId === assetId) || {};
        return notePicker ? notePicker.getSum() : BigInt(0);
    }
    async getBalances() {
        return (await this.notePickersRequest.get())
            .map(({ assetId, notePicker }) => ({ assetId, value: notePicker.getSum() }))
            .filter(assetValue => assetValue.value > BigInt(0));
    }
    async addProof({ tx, outputNotes }) {
        switch (tx.proofId) {
            case ProofId.DEPOSIT:
            case ProofId.WITHDRAW:
            case ProofId.SEND:
                this.debug(`adding pending payment tx: ${tx.txId}`);
                await this.db.upsertPaymentTx(tx);
                break;
            case ProofId.ACCOUNT:
                this.debug(`adding pending account tx: ${tx.txId}`);
                await this.db.upsertAccountTx(tx);
                break;
            case ProofId.DEFI_DEPOSIT: {
                this.debug(`adding pending defi tx: ${tx.txId}`);
                await this.db.upsertDefiTx(tx);
                break;
            }
        }
        await this.processPendingNote(outputNotes[0]);
        await this.processPendingNote(outputNotes[1]);
        // No need to do anything with proof.backwardLink (i.e., mark a note as chained).
        // But will have to clear the cache for pending note nullifers.
        // Rollup provider will return the nullifiers of pending notes, which will be excluded when the sdk is picking notes.
        this.pendingNoteNullifiersRequest.clearCache();
        this.notePickersRequest.clearCache();
        this.emit(UserStateEvent.UPDATED_USER_STATE, this.userData.accountPublicKey);
    }
    // ---------------
    // PRIVATE METHODS
    // ---------------
    /**
     * Purge pending txs no longer on server.
     */
    async resetData() {
        const pendingTxs = await this.rollupProvider.getPendingTxs();
        const pendingUserTxIds = (await this.db.getPendingUserTxs(this.userData.accountPublicKey)).map(tx => tx.txId);
        for (const userTxId of pendingUserTxIds) {
            if (!pendingTxs.some(tx => tx.txId.equals(userTxId))) {
                await this.db.removeUserTx(this.userData.accountPublicKey, userTxId);
            }
        }
        const pendingNotes = await this.db.getPendingNotes(this.userData.accountPublicKey);
        for (const note of pendingNotes) {
            if (!pendingTxs.some(tx => tx.noteCommitment1.equals(note.commitment) || tx.noteCommitment2.equals(note.commitment))) {
                await this.db.removeNote(note.nullifier);
            }
        }
    }
    async getNotePickers() {
        const notesMap = new Map();
        const notes = await this.db.getNotes(this.userData.accountPublicKey);
        notes.forEach(note => {
            const assetNotes = notesMap.get(note.assetId) || [];
            notesMap.set(note.assetId, [...assetNotes, note]);
        });
        const assetIds = [...notesMap.keys()].sort((a, b) => (a > b ? 1 : -1));
        return assetIds.map(assetId => ({ assetId, notePicker: new NotePicker(notesMap.get(assetId)) }));
    }
    async processPendingNote(note) {
        if (!note) {
            return;
        }
        const { ownerPubKey, value } = note.treeNote;
        if (!ownerPubKey.equals(this.userData.accountPublicKey) || !note.allowChain) {
            return;
        }
        if (value) {
            await this.db.addNote(note);
            this.debug(`adding chainable pending note with value: ${value}.`);
        }
        return note;
    }
    debug(...args) {
        const [first, ...rest] = args;
        debug(`${this.userData.accountPublicKey.toShortString()}: ${first}`, ...rest);
    }
    debugDecrypt(...args) {
        const [first, ...rest] = args;
        debugDecrypt(`${this.userData.accountPublicKey.toShortString()}: ${first}`, ...rest);
    }
}
export class UserStateFactory {
    constructor(grumpkin, noteAlgos, noteDecryptor, db, rollupProvider) {
        this.grumpkin = grumpkin;
        this.noteAlgos = noteAlgos;
        this.noteDecryptor = noteDecryptor;
        this.db = db;
        this.rollupProvider = rollupProvider;
    }
    async createUserState(user) {
        const userState = new UserState(user, this.grumpkin, this.noteAlgos, this.noteDecryptor, this.db, this.rollupProvider);
        await userState.init();
        return userState;
    }
}
//# sourceMappingURL=data:application/json;base64,