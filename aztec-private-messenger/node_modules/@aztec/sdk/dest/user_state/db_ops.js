import { EthAddress } from '@aztec/barretenberg/address';
import { toBigIntBE } from '@aztec/barretenberg/bigint_buffer';
import { virtualAssetIdFlag } from '@aztec/barretenberg/bridge_call_data';
import { ProofId } from '@aztec/barretenberg/client_proofs';
import { createDebugLogger } from '@aztec/barretenberg/log';
import { deriveNoteSecret, TreeNote } from '@aztec/barretenberg/note_algorithms';
import { RollupProofData } from '@aztec/barretenberg/rollup_proof';
import { Timer } from '@aztec/barretenberg/timer';
import { TxId } from '@aztec/barretenberg/tx_id';
import { CoreAccountTx, CoreDefiTx, CorePaymentTx } from '../core_tx/index.js';
import { BulkUserStateUpdateData, SpendingKey } from '../database/index.js';
import { Note } from '../note/index.js';
const debug = createDebugLogger('bb:db_ops');
/**
 * This class computes the various db updates that need to occur as an effect of processing a batch of rollups.
 * The write operations are collected together in a single bulk update structure, that is then passed to the database
 * to process within a single transaction. This means either the full update occurs or not at all. The atomicity here
 * is probably not hugely important as the db updates are idempotent, however the performance gained by doing a single
 * operation is desirable, especially with indexeddb.
 * This approach encourages a design whereby we minimise reads from the database in order to perform the writes.
 * The bulk update will always perform all insertion operations first, followed by any update operations. This
 * guarantees that updates that need to key on an entity that's expected to exist, will succeed.
 *
 * PaymentTx:
 *   Adds up to two new notes and nullifies up to two notes. Upserts a settled payment tx.
 *   The payment tx records the privateInput, which requires knowledge of the input notes.
 *
 * AccountTx:
 *   Adds up to two spending keys. Upserts a settled account tx.
 *
 * DefiTx:
 *   Adds a single change note and nullifies up to two notes. Upserts a settled defi tx.
 *   At this point we learn the interaction nonce, claim note nullifier, and if async.
 *
 * DefiInteractionResult:
 *   Updates a DefiTx with the output values, depends on access to the DefiTx state.
 *
 * ClaimTx:
 *   Adds up to two notes that depend on access to the DefiTx state. Updates a DefiTx to mark it as claimed.
 *
 * In order to support the processing of DefiInteractionResults and ClaimTxs that require access to the prior DefiTx
 * state, we preload all unclaimed DefiTxs in `unclaimedDefiTxs`.
 * As we process blocks we maintain these unclaimed DefiTxs accordingly so we can produce the appropriate db writes.
 *
 * In order to support the processing of PaymentTxs that record the privateInput, we track new Notes in `unspentNotes`,
 * and when nullifying Notes as part of a PaymentTx we look there first, and if not found perform a db read to load
 * the note.
 */
export class DbOps {
    constructor(userData, noteAlgos, db, grumpkin) {
        this.userData = userData;
        this.noteAlgos = noteAlgos;
        this.db = db;
        this.grumpkin = grumpkin;
        this.writeData = new BulkUserStateUpdateData();
        this.unspentNotes = [];
        this.pendingUserTxs = [];
        this.unclaimedDefiTxs = [];
    }
    async handleTxs({ blockContexts, rollupProofData, offchainJoinSplitData, offchainAccountData, offchainDefiDepositData, treeNotes, }) {
        this.debug(`preparing db write ops for rollups ${blockContexts[0].rollup.rollupId} to ${blockContexts[blockContexts.length - 1].rollup.rollupId}...`);
        const timer = new Timer();
        let treeNoteStartIndex = 0;
        let offchainJoinSplitIndex = 0;
        let offchainAccountIndex = 0;
        let offchainDefiIndex = 0;
        this.pendingUserTxs = await this.db.getPendingUserTxs(this.userData.accountPublicKey);
        this.unclaimedDefiTxs = await this.db.getUnclaimedDefiTxs(this.userData.accountPublicKey);
        for (let blockIndex = 0; blockIndex < blockContexts.length; ++blockIndex) {
            const blockContext = blockContexts[blockIndex];
            const proofData = rollupProofData[blockIndex];
            for (let i = 0; i < proofData.innerProofData.length; ++i) {
                const proof = proofData.innerProofData[i];
                if (proof.isPadding()) {
                    continue;
                }
                const noteStartIndex = proofData.dataStartIndex + i * 2;
                switch (proof.proofId) {
                    case ProofId.DEPOSIT:
                    case ProofId.WITHDRAW:
                    case ProofId.SEND: {
                        const offchainTxData = offchainJoinSplitData[offchainJoinSplitIndex++];
                        const note1 = treeNotes[treeNoteStartIndex++];
                        const note2 = treeNotes[treeNoteStartIndex++];
                        await this.handlePaymentTx(blockContext, proof, offchainTxData, noteStartIndex, note1, note2);
                        break;
                    }
                    case ProofId.ACCOUNT: {
                        const offchainTxData = offchainAccountData[offchainAccountIndex++];
                        await this.handleAccountTx(blockContext, proof, offchainTxData, noteStartIndex);
                        break;
                    }
                    case ProofId.DEFI_DEPOSIT: {
                        const note2 = treeNotes[treeNoteStartIndex++];
                        const offchainTxData = offchainDefiDepositData[offchainDefiIndex++];
                        await this.handleDefiDepositTx(blockContext, proofData, proof, offchainTxData, noteStartIndex, note2);
                        break;
                    }
                    case ProofId.DEFI_CLAIM: {
                        await this.handleClaimTx(proof, blockContext, noteStartIndex);
                        break;
                    }
                }
            }
            this.userData.syncedToRollup = proofData.rollupId;
            this.processDefiInteractionResults(blockContext);
        }
        this.writeData.updateUserArgs.push([this.userData]);
        this.debug(`executing db write ops for rollups ${blockContexts[0].rollup.rollupId} to ${blockContexts[blockContexts.length - 1].rollup.rollupId}...`);
        this.deDupeWriteDataUpserts();
        const writeTimer = new Timer();
        await this.db.bulkUserStateUpdate(this.writeData);
        this.debug(`write done in ${writeTimer.ms()}ms, total ${timer.ms()}ms.`);
    }
    // ---------------
    // PRIVATE METHODS
    // ---------------
    async handleAccountTx(blockContext, proof, offchainTxData, noteStartIndex) {
        if (!offchainTxData.accountPublicKey.equals(this.userData.accountPublicKey)) {
            // Not our account tx.
            return;
        }
        this.debug('handling account...');
        const tx = this.createAccountTx(proof, offchainTxData, blockContext.block.mined);
        const { txId, userId, newSpendingPublicKey1, newSpendingPublicKey2 } = tx;
        if (newSpendingPublicKey1) {
            this.debug(`added spending key ${newSpendingPublicKey1.toString('hex')}.`);
            const hashPath = await blockContext.getBlockSubtreeHashPath(noteStartIndex);
            this.writeData.addSpendingKeyArgs.push([
                new SpendingKey(userId, newSpendingPublicKey1, noteStartIndex, hashPath.toBuffer()),
            ]);
        }
        if (newSpendingPublicKey2) {
            this.debug(`added spending key ${newSpendingPublicKey2.toString('hex')}.`);
            const hashPath = await blockContext.getBlockSubtreeHashPath(noteStartIndex + 1);
            this.writeData.addSpendingKeyArgs.push([
                new SpendingKey(userId, newSpendingPublicKey2, noteStartIndex + 1, hashPath.toBuffer()),
            ]);
        }
        this.writeData.upsertAccountTxArgs.push([tx]);
        this.debug(`settled account tx: ${txId.toString()}`);
    }
    createAccountTx(proof, offchainTxData, blockCreated) {
        const { accountPublicKey, aliasHash, spendingPublicKey1, spendingPublicKey2, txRefNo } = offchainTxData;
        const txId = new TxId(proof.txId);
        const { nullifier1, nullifier2 } = proof;
        // A tx is for account migration when it nullifies the accountPublicKey (nullifier2) but not the aliasHash (nullifier1).
        const migrated = !toBigIntBE(nullifier1) && !!toBigIntBE(nullifier2);
        const created = this.pendingUserTxs.find(tx => tx.txId.equals(txId))?.created || new Date();
        return new CoreAccountTx(txId, accountPublicKey, aliasHash, toBigIntBE(spendingPublicKey1) ? spendingPublicKey1 : undefined, toBigIntBE(spendingPublicKey2) ? spendingPublicKey2 : undefined, migrated, txRefNo, created, blockCreated);
    }
    async handlePaymentTx(blockContext, proof, offchainTxData, noteStartIndex, note1, note2) {
        if (!note1 && !note2) {
            // Not our payment tx.
            return;
        }
        this.debug('handling payment...');
        const { mined: created } = blockContext.block;
        const { noteCommitment1, noteCommitment2, nullifier1, nullifier2 } = proof;
        const newNote = note1 ? await this.addNote(noteStartIndex, note1, noteCommitment1, blockContext) : undefined;
        const changeNote = note2 ? await this.addNote(noteStartIndex + 1, note2, noteCommitment2, blockContext) : undefined;
        const destroyedNote1 = await this.nullifyNote(nullifier1);
        const destroyedNote2 = await this.nullifyNote(nullifier2);
        const tx = this.createPaymentTx(proof, offchainTxData, created, newNote, changeNote, destroyedNote1, destroyedNote2);
        this.writeData.upsertPaymentTxArgs.push([tx]);
        this.debug(`settled payment tx: ${tx.txId}`);
    }
    createPaymentTx(proof, offchainTxData, blockCreated, valueNote, changeNote, destroyedNote1, destroyedNote2) {
        const txId = new TxId(proof.txId);
        const pendingTx = this.pendingUserTxs.find(tx => tx.txId.equals(txId));
        const proofId = proof.proofId;
        const assetId = (valueNote || changeNote).assetId;
        const publicValue = toBigIntBE(proof.publicValue);
        const publicOwner = publicValue ? new EthAddress(proof.publicOwner) : undefined;
        const noteValue = (note) => (note ? note.value : BigInt(0));
        const privateInput = noteValue(destroyedNote1) + noteValue(destroyedNote2);
        const recipientPrivateOutput = pendingTx?.recipientPrivateOutput || noteValue(valueNote);
        const senderPrivateOutput = noteValue(changeNote);
        const isRecipient = !!valueNote;
        const isSender = !!changeNote;
        const { txRefNo } = offchainTxData;
        const created = pendingTx?.created || new Date();
        return new CorePaymentTx(txId, this.userData.accountPublicKey, proofId, assetId, publicValue, publicOwner, privateInput, recipientPrivateOutput, senderPrivateOutput, isRecipient, isSender, txRefNo, created, blockCreated);
    }
    async handleDefiDepositTx(blockContext, rollupProofData, proof, offchainTxData, noteStartIndex, treeNote2) {
        if (!treeNote2) {
            // Both notes are owned by the same user, thus not our defi deposit.
            return;
        }
        this.debug('handling defi deposit...');
        const { noteCommitment2, nullifier1, nullifier2 } = proof;
        // Add the change note.
        await this.addNote(noteStartIndex + 1, treeNote2, noteCommitment2, blockContext);
        // Mark input notes as nullified.
        await this.nullifyNote(nullifier1);
        await this.nullifyNote(nullifier2);
        const { rollupId, bridgeCallDatas } = rollupProofData;
        const { bridgeCallData, depositValue, txFee, txRefNo, partialState, partialStateSecretEphPubKey } = offchainTxData;
        const partialStateSecret = deriveNoteSecret(partialStateSecretEphPubKey, this.userData.accountPrivateKey, this.grumpkin);
        // Build CoreDefiTx.
        const txId = new TxId(proof.txId);
        const interactionNonce = RollupProofData.NUM_BRIDGE_CALLS_PER_BLOCK * rollupId +
            bridgeCallDatas.findIndex(bridge => bridge.equals(offchainTxData.bridgeCallData.toBuffer()));
        const { interactionResult, mined } = blockContext.block;
        const isAsync = interactionResult.every(n => n.nonce !== interactionNonce);
        const nullifier = this.noteAlgos.claimNoteNullifier(proof.noteCommitment1);
        const created = this.pendingUserTxs.find(tx => tx.txId.equals(txId))?.created || new Date();
        const tx = new CoreDefiTx(txId, this.userData.accountPublicKey, bridgeCallData, depositValue, txFee, txRefNo, created, partialState, partialStateSecret, nullifier, mined, interactionNonce, isAsync);
        this.unclaimedDefiTxs.push(tx);
        this.writeData.upsertDefiTxArgs.push([tx]);
        this.debug(`settled defi tx, awaiting claim for l2 settlement: ${txId}`);
    }
    processDefiInteractionResults(blockContext) {
        const { interactionResult, mined } = blockContext.block;
        for (const event of interactionResult) {
            this.unclaimedDefiTxs
                .filter(tx => tx.interactionNonce === event.nonce && tx.finalised === undefined)
                .forEach(tx => {
                tx.outputValueA = !event.result
                    ? BigInt(0)
                    : (event.totalOutputValueA * tx.depositValue) / event.totalInputValue;
                tx.outputValueB = !event.result
                    ? BigInt(0)
                    : (event.totalOutputValueB * tx.depositValue) / event.totalInputValue;
                tx.finalised = mined;
                tx.success = event.result;
                this.debug(`finalised defi tx: ${tx.txId} success: ${tx.success}`);
                this.writeData.upsertDefiTxArgs.push([tx]);
            });
        }
    }
    async handleClaimTx(proof, blockContext, noteStartIndex) {
        const defiTx = this.unclaimedDefiTxs.find(tx => tx.nullifier?.equals(proof.nullifier1));
        if (!defiTx) {
            return;
        }
        this.debug('handling claim...');
        const { userId, partialState, partialStateSecret, interactionNonce, bridgeCallData, depositValue, outputValueA, outputValueB, success, } = defiTx;
        const { txId, noteCommitment1, noteCommitment2, nullifier1, nullifier2 } = proof;
        const accountRequired = this.noteAlgos
            .valueNotePartialCommitment(partialStateSecret, userId, true)
            .equals(partialState);
        // When generating output notes, set creatorPubKey to 0 (it's a DeFi txn, recipient of note is same as creator of claim note)
        if (!success) {
            {
                const treeNote = new TreeNote(userId, depositValue, bridgeCallData.inputAssetIdA, accountRequired, partialStateSecret, Buffer.alloc(32), nullifier1);
                await this.addNote(noteStartIndex, treeNote, noteCommitment1, blockContext);
            }
            if (bridgeCallData.numInputAssets === 2) {
                const treeNote = new TreeNote(userId, depositValue, bridgeCallData.inputAssetIdB, accountRequired, partialStateSecret, Buffer.alloc(32), nullifier2);
                await this.addNote(noteStartIndex + 1, treeNote, noteCommitment2, blockContext);
            }
        }
        if (outputValueA) {
            const treeNote = new TreeNote(userId, outputValueA, bridgeCallData.firstOutputVirtual ? virtualAssetIdFlag + interactionNonce : bridgeCallData.outputAssetIdA, accountRequired, partialStateSecret, Buffer.alloc(32), nullifier1);
            await this.addNote(noteStartIndex, treeNote, noteCommitment1, blockContext);
        }
        if (outputValueB) {
            const treeNote = new TreeNote(userId, outputValueB, bridgeCallData.secondOutputVirtual ? virtualAssetIdFlag + interactionNonce : bridgeCallData.outputAssetIdB, accountRequired, partialStateSecret, Buffer.alloc(32), nullifier2);
            await this.addNote(noteStartIndex + 1, treeNote, noteCommitment2, blockContext);
        }
        defiTx.claimSettled = blockContext.block.mined;
        defiTx.claimTxId = new TxId(txId);
        this.writeData.upsertDefiTxArgs.push([defiTx]);
        this.debug(`claim settled defi tx on l2: ${defiTx.txId}`);
    }
    async addNote(index, treeNote, commitment, blockContext) {
        const { value } = treeNote;
        const hashPath = await blockContext.getBlockSubtreeHashPath(index);
        const nullifier = this.noteAlgos.valueNoteNullifier(commitment, this.userData.accountPrivateKey);
        const note = new Note(treeNote, commitment, nullifier, false, // allowChain
        false, // nullified
        index, hashPath.toBuffer());
        if (value) {
            this.unspentNotes.push(note);
            this.writeData.addNoteArgs.push([note]);
            this.debug(`new note at index: ${index} value: ${value} asset: ${treeNote.assetId}.`);
        }
        return note;
    }
    async nullifyNote(nullifier) {
        const note = this.unspentNotes.find(n => n.nullifier.equals(nullifier)) || (await this.db.getNoteByNullifier(nullifier));
        if (!note || !note.owner.equals(this.userData.accountPublicKey)) {
            return;
        }
        this.writeData.nullifyNoteArgs.push([nullifier]);
        this.debug(`nullified note at index ${note.index} with value ${note.value}.`);
        return note;
    }
    /**
     * We only need to upsert a modified DefiTx once. Also if we want to perform upserts concurrently, we don't want
     * duplicates. Keeps only the last recorded upsert for DefiTxs.
     */
    deDupeWriteDataUpserts() {
        const mySet = new Set();
        this.writeData.upsertDefiTxArgs = this.writeData.upsertDefiTxArgs.reverse().reduce((acc, args) => {
            const id = args[0].txId.toString();
            if (!mySet.has(id)) {
                mySet.add(id);
                acc.push(args);
            }
            return acc;
        }, []);
    }
    debug(...args) {
        const [first, ...rest] = args;
        debug(`${this.userData.accountPublicKey.toShortString()}: ${first}`, ...rest);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGJfb3BzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3VzZXJfc3RhdGUvZGJfb3BzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDL0QsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDMUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBRTVELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzVELE9BQU8sRUFBRSxnQkFBZ0IsRUFBa0IsUUFBUSxFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFNakcsT0FBTyxFQUFrQixlQUFlLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUNuRixPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDbEQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRWpELE9BQU8sRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLGFBQWEsRUFBOEIsTUFBTSxxQkFBcUIsQ0FBQztBQUMzRyxPQUFPLEVBQUUsdUJBQXVCLEVBQVksV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDdEYsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBR3hDLE1BQU0sS0FBSyxHQUFHLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBVzdDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBa0NHO0FBQ0gsTUFBTSxPQUFPLEtBQUs7SUFNaEIsWUFDVSxRQUFrQixFQUNsQixTQUF5QixFQUN6QixFQUFZLEVBQ1osUUFBa0I7UUFIbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNsQixjQUFTLEdBQVQsU0FBUyxDQUFnQjtR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