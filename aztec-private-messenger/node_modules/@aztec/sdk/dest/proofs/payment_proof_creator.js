import { ProofData, ProofId } from '@aztec/barretenberg/client_proofs';
import { createDebugLogger } from '@aztec/barretenberg/log';
import { OffchainJoinSplitData } from '@aztec/barretenberg/offchain_tx_data';
import { TxId } from '@aztec/barretenberg/tx_id';
import { CorePaymentTx } from '../core_tx/index.js';
import { treeNoteToNote } from '../note/index.js';
import { JoinSplitTxFactory } from './join_split_tx_factory.js';
const debug = createDebugLogger('bb:payment_proof_creator');
export class PaymentProofCreator {
    constructor(prover, noteAlgos, worldState, grumpkin, db) {
        this.prover = prover;
        this.noteAlgos = noteAlgos;
        this.txFactory = new JoinSplitTxFactory(noteAlgos, worldState, grumpkin, db);
    }
    async createProofInput(user, inputNotes, privateInput, recipientPrivateOutput, senderPrivateOutput, publicInput, publicOutput, assetId, newNoteOwner, newNoteOwnerAccountRequired, publicOwner, spendingPublicKey, allowChain) {
        if (publicInput && publicOutput) {
            throw new Error('Public values cannot be both greater than zero.');
        }
        if (publicOutput + recipientPrivateOutput + senderPrivateOutput > publicInput + privateInput) {
            throw new Error('Total output cannot be larger than total input.');
        }
        if (publicInput + publicOutput && !publicOwner) {
            throw new Error('Public owner undefined.');
        }
        if (recipientPrivateOutput && !newNoteOwner) {
            throw new Error('Note recipient undefined.');
        }
        if (inputNotes.length > 2) {
            throw new Error('Cannot create a proof with more than 2 input notes.');
        }
        const accountRequired = !spendingPublicKey.equals(user.accountPublicKey);
        if (inputNotes.some(n => n.treeNote.accountRequired !== accountRequired)) {
            throw new Error(`Cannot spend notes with ${accountRequired ? 'account' : 'spending'} key.`);
        }
        const proofId = (() => {
            if (publicInput > 0) {
                return ProofId.DEPOSIT;
            }
            if (publicOutput > 0) {
                return ProofId.WITHDRAW;
            }
            return ProofId.SEND;
        })();
        const totalInputNoteValue = inputNotes.reduce((sum, note) => sum + note.value, BigInt(0));
        if (totalInputNoteValue && proofId === ProofId.DEPOSIT) {
            // TODO - Enable it and modify the recovery logic in group_user_txs.
            throw new Error('Merging private balance with public balance is not supported.');
        }
        const changeValue = totalInputNoteValue > privateInput ? totalInputNoteValue - privateInput : BigInt(0);
        const proofInput = await this.txFactory.createTx(user, proofId, assetId, inputNotes, spendingPublicKey, {
            publicValue: publicInput + publicOutput,
            publicOwner,
            outputNoteValue1: recipientPrivateOutput,
            outputNoteValue2: changeValue + senderPrivateOutput,
            newNoteOwner,
            newNoteOwnerAccountRequired,
            allowChain,
        });
        const signingData = await this.prover.computeSigningData(proofInput.tx);
        return { ...proofInput, signingData };
    }
    async createProof(user, { tx, signature, viewingKeys }, txRefNo, timeout) {
        debug('creating proof...');
        const start = new Date().getTime();
        tx.signature = signature;
        const proof = await this.prover.createProof(tx, timeout);
        debug(`created proof: ${new Date().getTime() - start}ms`);
        debug(`proof size: ${proof.length}`);
        const proofData = new ProofData(proof);
        const txId = new TxId(proofData.txId);
        const { inputNotes, outputNotes: [valueNote, changeNote], proofId, publicValue, publicOwner, } = tx;
        const privateInput = inputNotes.reduce((sum, n) => sum + n.value, BigInt(0));
        const { value: recipientPrivateOutput } = valueNote;
        const { assetId, value: senderPrivateOutput } = changeNote;
        const newNoteOwner = valueNote.ownerPubKey;
        const userId = changeNote.ownerPubKey;
        const isRecipient = newNoteOwner.equals(userId);
        const isSender = true;
        const coreTx = new CorePaymentTx(txId, userId, proofId, assetId, publicValue, publicOwner, privateInput, recipientPrivateOutput, senderPrivateOutput, isRecipient, isSender, txRefNo, new Date());
        const offchainTxData = new OffchainJoinSplitData(viewingKeys, txRefNo);
        return {
            tx: coreTx,
            proofData,
            offchainTxData,
            outputNotes: [
                treeNoteToNote(valueNote, user.accountPrivateKey, this.noteAlgos, {
                    allowChain: proofData.allowChainFromNote1,
                }),
                treeNoteToNote(changeNote, user.accountPrivateKey, this.noteAlgos, {
                    allowChain: proofData.allowChainFromNote2,
                }),
            ],
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF5bWVudF9wcm9vZl9jcmVhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3Byb29mcy9wYXltZW50X3Byb29mX2NyZWF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFtQixTQUFTLEVBQUUsT0FBTyxFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDeEYsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFHNUQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDN0UsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRWpELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVwRCxPQUFPLEVBQVEsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFeEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFHaEUsTUFBTSxLQUFLLEdBQUcsaUJBQWlCLENBQUMsMEJBQTBCLENBQUMsQ0FBQztBQUU1RCxNQUFNLE9BQU8sbUJBQW1CO0lBRzlCLFlBQ1UsTUFBdUIsRUFDdkIsU0FBeUIsRUFDakMsVUFBc0IsRUFDdEIsUUFBa0IsRUFDbEIsRUFBWTtRQUpKLFdBQU0sR0FBTixNQUFNLENBQWlCO1FBQ3ZCLGNBQVMsR0FBVCxTQUFTLENBQWdCO1FBS2pDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxrQkFBa0IsQ0FBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUMvRSxDQUFDO0lBRU0sS0FBSyxDQUFDLGdCQUFnQixDQUMzQixJQUFjLEVBQ2QsVUFBa0IsRUFDbEIsWUFBb0IsRUFDcEIsc0JBQThCLEVBQzlCLG1CQUEyQixFQUMzQixXQUFtQixFQUNuQixZQUFvQixFQUNwQixPQUFlLEVBQ2YsWUFBeUMsRUFDekMsMkJBQW9DLEVBQ3BDLFdBQW1D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