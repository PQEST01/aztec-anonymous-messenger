import { restoreNotePath } from '../../note/index.js';
export const pickInputNotes = async ({ assetId, value }, fee, options, notePicker, worldState) => {
    const requireFeePayingTx = !!fee.value && fee.assetId !== assetId;
    const privateInput = value + (!requireFeePayingTx ? fee.value : BigInt(0));
    const notes = privateInput ? await notePicker.pickNotes(assetId, privateInput, options) : [];
    if (privateInput && !notes.length) {
        throw new Error(`Failed to find notes for asset ${assetId} that sum to ${privateInput}.`);
    }
    const feeNotes = requireFeePayingTx ? await notePicker.pickNotes(fee.assetId, fee.value, options) : [];
    if (requireFeePayingTx && !feeNotes.length) {
        throw new Error(`Failed to find notes for asset ${fee.assetId} that sum to ${fee.value}.`);
    }
    return await Promise.all([...notes, ...feeNotes].map(note => restoreNotePath(note, worldState)));
};
export const pickDefiInputNotes = async (bridgeCallData, { value }, fee, options, notePicker, worldState) => {
    // The goal here is to create the necessary inputs for a defi tx.
    // A defi tx can have either 1 or 2 input assets..
    // If it has 1 input asset, then we can use both input notes to achieve the required deposit + fee value.
    // And we can create a chain of J/S txs to merge/split notes to achieve the required input.
    // If it has 2 input assets then we are more restricted.
    // We can only have 1 input note for each asset and we can only have 1 chain of J/S txs
    // to merge/splt notes in order to achieve the correct input for an asset.
    // So, for example:
    // We have 2 assets A and B.
    // We could create a chain of J/S txs to produce a single note for input asset B.
    // Then we MUST have a single note of the exact size for input asset A.
    // If we don't then we can't execute the tx.
    // An additional thing to note is the fee.
    // If it is not non-fee paying asset, it is paid for by input asset A.
    // So the input note(s) for asset A will need to include the requested fee value.
    const requireFeePayingTx = !!fee.value && fee.assetId !== bridgeCallData.inputAssetIdA;
    const feeNotes = requireFeePayingTx ? await notePicker.pickNotes(fee.assetId, fee.value, options) : [];
    let notesA = [];
    let notesB = [];
    let requireJoinSplitForAssetB = false;
    const hasTwoAssets = bridgeCallData.numInputAssets === 2;
    if (hasTwoAssets) {
        // We have 2 input assets, so it's the more complex situation as explained above.
        const assetIdB = bridgeCallData.inputAssetIdB;
        // Look for a single note for asset B.
        const note2 = await notePicker.pickNote(assetIdB, value, options);
        // If we found a single note, great. If not then look for multiple notes.
        notesB = note2 ? [note2] : await notePicker.pickNotes(assetIdB, value, options);
        if (!notesB.length) {
            throw new Error(`Failed to find notes of asset ${assetIdB} that sum to ${value}.`);
        }
        // If we need more than 1 note for asset B OR the single note we found is too large,
        // then we require J/S txs on asset A.
        // We will not be able to use J/S on input asset A!! This is checked further down...
        requireJoinSplitForAssetB = notesB.length > 1 || notesB[0].value !== value;
    }
    {
        const assetIdA = bridgeCallData.inputAssetIdA;
        const valueA = value + (requireFeePayingTx ? BigInt(0) : fee.value);
        // If a J/S operation is required for asset B then we require that the input note for asset A is NOT pending.
        // Also, if any of the input notes for asset B are pending then the input note for asset A must NOT be pending.
        const optionsA = {
            ...options,
            excludePendingNotes: requireJoinSplitForAssetB || notesB.some(n => n.pending),
        };
        // If we have 2 input assets then search for a single note.
        const note1 = hasTwoAssets ? await notePicker.pickNote(assetIdA, valueA, optionsA) : undefined;
        // If we have a single note, great! If not then search for more notes.
        notesA = note1 ? [note1] : await notePicker.pickNotes(assetIdA, valueA, optionsA);
        if (!notesA.length) {
            throw new Error(`Failed to find notes of asset ${assetIdA} that sum to ${valueA}.`);
        }
        // We require J/S txs on asset A:
        //  - if the total note value for asset A is greater then required.
        //  - if the number of notes for asset A is greater than 2.
        //  - if the number of notes for asset A is greater than 1 AND we have 2 input assets.
        const totalInputNoteValueForAssetA = notesA.reduce((sum, note) => sum + note.value, BigInt(0));
        const requireJoinSplitForAssetA = totalInputNoteValueForAssetA > valueA || notesA.length > 2 || (hasTwoAssets && notesA.length > 1);
        // At this point, if we need J/S txs on both input assets then the tx can't be executed.
        if (requireJoinSplitForAssetA && requireJoinSplitForAssetB) {
            throw new Error(`Cannot find a note with the exact value for asset ${assetIdA}. Require ${valueA}.`);
        }
    }
    return await Promise.all([...notesA, ...notesB, ...feeNotes].map(note => restoreNotePath(note, worldState)));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlja19pbnB1dF9ub3Rlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wcm9vZnMvcHJvb2ZfcmVxdWVzdF9kYXRhL3BpY2tfaW5wdXRfbm90ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxFQUFRLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBUTVELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxLQUFLLEVBQ2pDLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBYyxFQUM5QixHQUFlLEVBQ2YsT0FBMEIsRUFDMUIsVUFBc0IsRUFDdEIsVUFBc0IsRUFDdEIsRUFBRTtJQUNGLE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLElBQUksR0FBRyxDQUFDLE9BQU8sS0FBSyxPQUFPLENBQUM7SUFDbEUsTUFBTSxZQUFZLEdBQUcsS0FBSyxHQUFHLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0UsTUFBTSxLQUFLLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxNQUFNLFVBQVUsQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzdGLElBQUksWUFBWSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRTtRQUNqQyxNQUFNLElBQUksS0FBSyxDQUFDLGtDQUFrQyxPQUFPLGdCQUFnQixZQUFZLEdBQUcsQ0FBQyxDQUFDO0tBQzNGO0lBQ0QsTUFBTSxRQUFRLEdBQUcsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLE1BQU0sVUFBVSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUs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