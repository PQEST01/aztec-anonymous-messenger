import { AliasHash } from '@aztec/barretenberg/account_id';
import { EthAddress, GrumpkinAddress } from '@aztec/barretenberg/address';
import { ProofId } from '@aztec/barretenberg/client_proofs';
import { pickDefiInputNotes, pickInputNotes } from './pick_input_notes.js';
import { getSpendingKeyAccount } from './spending_key_account.js';
export class ProofRequestDataFactory {
    constructor(worldState, db, blake2s) {
        this.worldState = worldState;
        this.db = db;
        this.blake2s = blake2s;
    }
    /**
     * accountState can be undefined when one of the following is true:
     *  - proofId === ProofId.DEPOSIT
     *  - inputNotes will be picked by AztecWalletProvider when creating proof inputs.
     */
    async createPaymentProofRequestData(proofId, accountPublicKey, spendingPublicKey, assetValue, fee, publicOwner, recipient, recipientSpendingKeyRequired, accountState, options = {}) {
        // TODO - validate input args
        // If spendingPublicKey equals GrumpkinAddress.ZERO, it means that spendingPublicKey is unknown at the moment, and
        // proofInputs will be sent to the spending key owner later on to create signatures.
        const spendingKeyRequired = !spendingPublicKey.equals(accountPublicKey) || spendingPublicKey.equals(GrumpkinAddress.ZERO);
        const inputNotes = accountState
            ? await pickInputNotes(assetValue, fee, { ...options, spendingKeyRequired }, accountState, this.worldState)
            : [];
        const spendingKeyAccount = await getSpendingKeyAccount(spendingPublicKey, accountPublicKey, this.worldState, this.db);
        const dataRoot = this.worldState.getRoot();
        // The output note from a deposit proof can't be chained from by default because it will be a privacy leak when the
        // chained tx is defi or withdraw. People will be able to associate an L1 address or a defi interaction with the
        // depositor.
        const allowChain = options.allowChain ?? proofId !== ProofId.DEPOSIT;
        const hideNoteCreator = options.hideNoteCreator ?? false;
        return {
            accountPublicKey,
            proofId,
            assetValue,
            fee,
            publicOwner,
            recipient,
            recipientSpendingKeyRequired,
            inputNotes,
            spendingKeyAccount,
            dataRoot,
            allowChain,
            hideNoteCreator,
        };
    }
    async createAccountProofRequestData(accountPublicKey, spendingPublicKey, alias, newAccountPublicKey, newSpendingPublicKey1, newSpendingPublicKey2, deposit, fee, depositor, accountState, options = {}) {
        // TODO - validate input args
        if (deposit.value && fee.value && deposit.assetId !== fee.assetId) {
            throw new Error('Inconsistent asset ids.');
        }
        const aliasHash = alias
            ? AliasHash.fromAlias(alias, this.blake2s)
            : (await this.db.getAlias(accountPublicKey))?.aliasHash;
        if (!aliasHash) {
            throw new Error('Provide an alias or wait for the account to be fully synced.');
        }
        const publicInput = !depositor.equals(EthAddress.ZERO) ? deposit.value + fee.value : BigInt(0);
        const privateInput = !publicInput ? fee.value : BigInt(0);
        const inputNotes = privateInput && accountState
            ? await pickInputNotes({ value: privateInput, assetId: fee.assetId }, fee, { ...options, spendingKeyRequired: true }, accountState, this.worldState)
            : [];
        const spendingKeyAccount = await getSpendingKeyAccount(spendingPublicKey, accountPublicKey, this.worldState, this.db);
        const dataRoot = this.worldState.getRoot();
        const allowChain = options.allowChain ?? !!privateInput;
        return {
            accountPublicKey,
            alias,
            aliasHash,
            newAccountPublicKey,
            newSpendingPublicKey1,
            newSpendingPublicKey2,
            deposit,
            fee,
            depositor,
            inputNotes,
            spendingKeyAccount,
            dataRoot,
            allowChain,
        };
    }
    // accountState can be undefined if inputNotes will be picked by AztecWalletProvider when creating proof inputs.
    async createDefiProofRequestData(accountPublicKey, spendingPublicKey, bridgeCallData, assetValue, fee, accountState, options = {}) {
        // TODO - validate input args
        const spendingKeyRequired = !spendingPublicKey.equals(accountPublicKey) || spendingPublicKey.equals(GrumpkinAddress.ZERO);
        const inputNotes = accountState
            ? await pickDefiInputNotes(bridgeCallData, assetValue, fee, { ...options, spendingKeyRequired }, accountState, this.worldState)
            : [];
        const spendingKeyAccount = await getSpendingKeyAccount(spendingPublicKey, accountPublicKey, this.worldState, this.db);
        const dataRoot = this.worldState.getRoot();
        const allowChain = options.allowChain ?? true;
        return {
            accountPublicKey,
            bridgeCallData,
            assetValue,
            fee,
            inputNotes,
            spendingKeyAccount,
            dataRoot,
            allowChain,
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvb2ZfcmVxdWVzdF9kYXRhX2ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcHJvb2ZzL3Byb29mX3JlcXVlc3RfZGF0YS9wcm9vZl9yZXF1ZXN0X2RhdGFfZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDM0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxlQUFlLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUcxRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFRNUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLGNBQWMsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzNFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBU2xFLE1BQU0sT0FBTyx1QkFBdUI7SUFDbEMsWUFBb0IsVUFBc0IsRUFBVSxFQUFZLEVBQVUsT0FBZ0I7UUFBdEUsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUFVLE9BQUUsR0FBRixFQUFFLENBQVU7UUFBVSxZQUFPLEdBQVAsT0FBTyxDQUFTO0lBQUcsQ0FBQztJQUU5Rjs7OztPQUlHO0lBQ0ksS0FBSyxDQUFDLDZCQUE2QixDQUN4QyxPQUEwRCxFQUMxRCxnQkFBaUMsRUFDakMsaUJBQWtDLEVBQ2xDLFVBQXNCLEVBQ3RCLEdBQWUsRUFDZixXQUF1QixFQUN2QixTQUEwQixFQUMxQiw0QkFBcUMsRUFDckMsWUFBMkIsRUFDM0IsVUFBK0IsRUFBRTtRQUVqQyw2QkFBNkI7UUFFN0Isa0hBQWtIO1FBQ2xILG9GQUFvRjtRQUNwRixNQUFNLG1CQUFtQixHQUN2QixDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEcsTUFBTSxVQUFVLEdBQUcsWUFB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