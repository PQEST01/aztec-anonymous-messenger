import { AliasHash } from '@aztec/barretenberg/account_id';
import { GrumpkinAddress } from '@aztec/barretenberg/address';
import { HashPath } from '@aztec/barretenberg/merkle_tree';
import { WorldStateConstants } from '@aztec/barretenberg/world_state';
export const getSpendingKeyAccount = async (spendingPublicKey, accountPublicKey, worldState, db) => {
    if (spendingPublicKey.equals(accountPublicKey) || spendingPublicKey.equals(GrumpkinAddress.ZERO)) {
        return {
            spendingPublicKey: accountPublicKey,
            aliasHash: AliasHash.ZERO,
            accountIndex: 0,
            accountPath: worldState.buildZeroHashPath(WorldStateConstants.DATA_TREE_DEPTH),
        };
    }
    else {
        const aliasHash = (await db.getAlias(accountPublicKey))?.aliasHash;
        if (!aliasHash) {
            throw new Error('Account not registered or not fully synced.');
        }
        const spendingKey = await db.getSpendingKey(accountPublicKey, spendingPublicKey);
        if (spendingKey === undefined) {
            throw new Error('Unknown spending key.');
        }
        const immutableHashPath = HashPath.fromBuffer(spendingKey.hashPath);
        const accountIndex = spendingKey.treeIndex;
        const accountPath = await worldState.buildFullHashPath(accountIndex, immutableHashPath);
        return { spendingPublicKey, aliasHash, accountIndex, accountPath };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlbmRpbmdfa2V5X2FjY291bnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcHJvb2ZzL3Byb29mX3JlcXVlc3RfZGF0YS9zcGVuZGluZ19rZXlfYWNjb3VudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDM0QsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzlELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUMzRCxPQUFPLEVBQWMsbUJBQW1CLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQVVsRixNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxLQUFLLEVBQ3hDLGlCQUFrQyxFQUNsQyxnQkFBaUMsRUFDakMsVUFBc0IsRUFDdEIsRUFBWSxFQUNpQixFQUFFO0lBQy9CLElBQUksaUJBQWlCLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLElBQUksaUJBQWlCLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNoRyxPQUFPO1lBQ0wsaUJBQWlCLEVBQUUsZ0JBQWdCO1lBQ25DLFNBQVMsRUFBRSxTQUFTLENBQUMsSUFBSTtZQUN6QixZQUFZLEVBQUUsQ0FBQztZQUNmLFdBQVcsRUFBRSxVQUFVLENBQUMsaUJBQWlCLENBQUMsbUJBQW1CLENBQUMsZUFBZSxDQUFDO1NBQy9FLENBQUM7S0FDSDtTQUFNO1FBQ0wsTUFBTSxTQUFTLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQztRQUNuRSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2QsTUFBTSxJQUFJLEtBQUssQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDO1NBQ2hFO1FBRUQsTUFBTSxXQUFXLEdBQUcsTUFBTSxFQUFFLENBQUMsY0FBYyxDQUFDLGdCQUFnQixFQUFFLGlCQUFpQixDQUFDLENBQUM7UUFDakYsSUFBSSxXQUFXLEtBQUssU0FBUyxFQUFFO1lBQzdCLE1BQU0sSUFBSSxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQztTQUMxQztRQUVELE1BQU0saUJBQWlCLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDcEUsTUFBTSxZQUFZLEdBQUcsV0FBVyxDQUFDLFNBQVMsQ0FBQztRQUMzQyxNQUFNLFdBQVcsR0FBRyxNQUFNLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQUN4RixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsQ0FBQztLQUNwRTtBQUNILENBQUMsQ0FBQyJ9