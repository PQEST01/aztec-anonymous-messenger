import { AliasHash } from '@aztec/barretenberg/account_id';
import { EthAddress, GrumpkinAddress } from '@aztec/barretenberg/address';
import { BridgeCallData } from '@aztec/barretenberg/bridge_call_data';
import { ProofId } from '@aztec/barretenberg/client_proofs';
export class PaymentProofInputCreator {
    constructor(joinSplitTxInputCreator) {
        this.joinSplitTxInputCreator = joinSplitTxInputCreator;
    }
    async createProofInputs({ accountPublicKey, proofId, assetValue, fee, publicOwner, recipient, recipientSpendingKeyRequired, inputNotes, spendingKeyAccount, dataRoot, allowChain, hideNoteCreator, }, authAlgos) {
        const accountSpendingKeyRequired = !spendingKeyAccount.spendingPublicKey.equals(accountPublicKey);
        if (accountSpendingKeyRequired && spendingKeyAccount.aliasHash.equals(AliasHash.ZERO)) {
            throw new Error('Spending key account not provided.');
        }
        if (inputNotes.some(n => n.treeNote.accountRequired !== accountSpendingKeyRequired)) {
            throw new Error(`Cannot spend notes with ${accountSpendingKeyRequired ? 'account' : 'spending'} key.`);
        }
        const assetNotes = inputNotes.filter(n => n.assetId === assetValue.assetId);
        const assetInputValue = assetNotes.reduce((sum, n) => sum + n.value, BigInt(0));
        if (assetNotes.length && proofId === ProofId.DEPOSIT) {
            // TODO - Enable it and modify the recovery logic in group_user_txs.
            throw new Error('Merging private balance with public balance is not supported.');
        }
        const requireFeePayingTx = fee.assetId !== assetValue.assetId && fee.value && assetValue.value;
        const feeNotes = requireFeePayingTx ? inputNotes.filter(n => n.assetId === fee.assetId) : [];
        if (feeNotes.length && proofId === ProofId.DEPOSIT) {
            throw new Error('Cannot pay fee with private asset for deposit.');
        }
        const privateInput = (() => {
            switch (proofId) {
                case ProofId.DEPOSIT:
                    return BigInt(0);
                case ProofId.SEND:
                case ProofId.WITHDRAW:
                    return !requireFeePayingTx ? assetValue.value + fee.value : assetValue.value;
            }
        })();
        if (assetInputValue < privateInput) {
            throw new Error('Provided notes are not enough to pay for the transaction.');
        }
        const publicValue = (() => {
            switch (proofId) {
                case ProofId.DEPOSIT:
                    return assetValue.value + fee.value;
                case ProofId.SEND:
                    return BigInt(0);
                case ProofId.WITHDRAW:
                    return assetValue.value;
            }
        })();
        if (publicValue && publicOwner.equals(EthAddress.ZERO)) {
            throw new Error('Public owner undefined.');
        }
        const recipientPrivateOutput = (() => {
            switch (proofId) {
                case ProofId.DEPOSIT:
                case ProofId.SEND:
                    return assetValue.value;
                case ProofId.WITHDRAW:
                    return BigInt(0);
            }
        })();
        if (recipientPrivateOutput && recipient.equals(GrumpkinAddress.generator())) {
            throw new Error('Recipient undefined.');
        }
        const senderPrivateOutput = (() => {
            switch (proofId) {
                case ProofId.DEPOSIT:
                    return BigInt(0);
                case ProofId.SEND:
                case ProofId.WITHDRAW: {
                    return assetInputValue > privateInput ? assetInputValue - privateInput : BigInt(0);
                }
            }
        })();
        const assetProofInputs = await this.createChainedProofInputs(accountPublicKey, proofId, assetValue.assetId, publicValue, recipientPrivateOutput, senderPrivateOutput, assetNotes, recipient, recipientSpendingKeyRequired, publicOwner, spendingKeyAccount, dataRoot, allowChain, hideNoteCreator, authAlgos);
        const feeProofInputs = requireFeePayingTx
            ? await this.createFeeProofInputs(accountPublicKey, fee, feeNotes, spendingKeyAccount, dataRoot, allowChain, authAlgos)
            : [];
        return [...assetProofInputs, ...feeProofInputs];
    }
    async createFeeProofInputs(accountPublicKey, fee, inputNotes, spendingKeyAccount, dataRoot, allowChain, authAlgos) {
        const accountSpendingKeyRequired = !spendingKeyAccount.spendingPublicKey.equals(accountPublicKey);
        const feeInputValue = inputNotes.reduce((sum, n) => sum + n.value, BigInt(0));
        if (feeInputValue < fee.value) {
            throw new Error('Provided notes are not enough to pay for the fee.');
        }
        return await this.createChainedProofInputs(accountPublicKey, ProofId.SEND, fee.assetId, BigInt(0), // publicValue
        BigInt(0), // recipientPrivateOutput
        feeInputValue - fee.value, // senderPrivateOutput
        inputNotes, accountPublicKey, accountSpendingKeyRequired, EthAddress.ZERO, spendingKeyAccount, dataRoot, allowChain, false, // hideNoteCreator
        authAlgos);
    }
    async createChainedProofInputs(accountPublicKey, proofId, assetId, publicValue, recipientPrivateOutput, senderPrivateOutput, inputNotes, recipient, recipientSpendingKeyRequired, publicOwner, spendingKeyAccount, dataRoot, allowChain, hideNoteCreator, authAlgos) {
        const proofInputs = [];
        let outputNotes = inputNotes;
        if (inputNotes.length > 2) {
            const chainedTxs = await this.joinSplitTxInputCreator.createChainedTxs(accountPublicKey, assetId, inputNotes, spendingKeyAccount, dataRoot, authAlgos);
            outputNotes = chainedTxs.outputNotes;
            proofInputs.push(...chainedTxs.proofInputs);
        }
        const { tx, viewingKeys, signingData } = await this.joinSplitTxInputCreator.createTx(accountPublicKey, proofId, assetId, publicValue, publicOwner || EthAddress.ZERO, recipientPrivateOutput, senderPrivateOutput, BridgeCallData.ZERO, BigInt(0), // defiDepositValue
        recipient || GrumpkinAddress.generator(), recipientSpendingKeyRequired, outputNotes, spendingKeyAccount, dataRoot, allowChain ? 2 : 0, hideNoteCreator, authAlgos);
        proofInputs.push({ tx, viewingKeys, signingData });
        return proofInputs;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF5bWVudF9wcm9vZl9pbnB1dF9jcmVhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3Byb29mcy9wcm9vZl9pbnB1dC9wYXltZW50X3Byb29mX2lucHV0X2NyZWF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzNELE9BQU8sRUFBRSxVQUFVLEVBQUUsZUFBZSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFMUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQU81RCxNQUFNLE9BQU8sd0JBQXdCO0lBQ25DLFlBQW9CLHVCQUFnRDtRQUFoRCw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQXlCO0lBQUcsQ0FBQztJQUVqRSxLQUFLLENBQUMsaUJBQWlCLENBQzVCLEVBQ0UsZ0JBQWdCLEVBQ2hCLE9BQU8sRUFDUCxVQUFVLEVBQ1YsR0FBRyxFQUNILFdBQVcsRUFDWCxTQUFTLEVBQ1QsNEJBQTRCLEVBQzVCLFVBQVUsRUFDVixrQkFBa0IsRUFDbEIsUUFBUSxFQUNSLFVBQVUsRUFDVixlQUFlLEdBQ1MsRUFDMUIsU0FBeUI7UUFFekIsTUFBTSwwQkFBMEIsR0FBRyxDQUFDLGtCQUFrQixDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBRWxHLElBQUksMEJBQTBCLElBQUksa0JBQWtCLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDckYsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO1NBQ3ZEO1FBQ0QsSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxlQUFlLEtBQUssMEJB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