import { EthAddress } from '@aztec/barretenberg/address';
import { BridgeCallData } from '@aztec/barretenberg/bridge_call_data';
import { ProofId } from '@aztec/barretenberg/client_proofs';
export class DefiProofInputCreator {
    constructor(joinSplitTxInputCreator, paymentProofInputCreator) {
        this.joinSplitTxInputCreator = joinSplitTxInputCreator;
        this.paymentProofInputCreator = paymentProofInputCreator;
    }
    async createProofInputs({ accountPublicKey, bridgeCallData, assetValue, fee, inputNotes, spendingKeyAccount, dataRoot, allowChain, }, authAlgos) {
        const notesA = inputNotes.filter(n => n.assetId === bridgeCallData.inputAssetIdA);
        const notesB = inputNotes.filter(n => n.assetId === bridgeCallData.inputAssetIdB);
        const hasTwoAssets = bridgeCallData.numInputAssets === 2;
        const requireFeePayingTx = !!fee.value && fee.assetId !== bridgeCallData.inputAssetIdA;
        const feeNotes = requireFeePayingTx ? inputNotes.filter(n => n.assetId === fee.assetId) : [];
        const chainedProofInputs = [];
        const defiInputNotes = [];
        {
            // Here we need to generate the proof inputs based on the notes provided.
            // For asset A, we need the deposit value + any fee.
            // If there is only 1 input asset (asset A) AND we have more than 2 notes,
            // then remove 1 non-pending note from the pack (if there is one).
            // Also reduce the target value by the value of this note.
            let targetValue = assetValue.value + (!requireFeePayingTx ? fee.value : BigInt(0));
            const reservedNote = !hasTwoAssets && notesA.length > 2 ? notesA.find(n => !n.pending) : undefined;
            if (reservedNote) {
                defiInputNotes.push(reservedNote);
                targetValue -= reservedNote.value;
            }
            // We now need to produce J/S txs as required to give us the required number of notes for asset A.
            // If we have 2 input assets then we require a single note as output from these txs.
            // If we have reserved a note above then we require a single note as output from these txs.
            // Otherwise we can have 2 notes as output from these txs.
            // One thing to note is that we may have a perfect-sized note for asset A here.
            // In this case, this next operation should produce no J/S txs!
            // Another thing to note is that the check for non-pending notes when picking input notes is significant.
            // The output from the following operation will be a pending note and a tx can't have 2 pending input notes.
            const numberOfOutputNotes = hasTwoAssets || reservedNote ? 1 : 2;
            const { proofInputs, outputNotes } = await this.createChainedProofInputs(accountPublicKey, notesA.filter(n => n !== reservedNote), targetValue, numberOfOutputNotes, spendingKeyAccount, dataRoot, allowChain, authAlgos);
            chainedProofInputs.push(...proofInputs);
            defiInputNotes.push(...outputNotes);
        }
        if (hasTwoAssets) {
            // Having produced the required note for asset A above (and any required J/S txs),
            // we now need to do the same for asset B.
            // As we have 2 assets then we must produce a single output note for this asset.
            const numberOfOutputNotes = 1;
            const { proofInputs, outputNotes } = await this.createChainedProofInputs(accountPublicKey, notesB, assetValue.value, numberOfOutputNotes, spendingKeyAccount, dataRoot, allowChain, authAlgos);
            chainedProofInputs.push(...proofInputs);
            defiInputNotes.push(...outputNotes);
        }
        const defiProofInput = await this.createDefiProofInput(accountPublicKey, bridgeCallData, assetValue.value, defiInputNotes, spendingKeyAccount, dataRoot, authAlgos);
        const feeProofInputs = feeNotes.length
            ? await this.paymentProofInputCreator.createFeeProofInputs(accountPublicKey, fee, feeNotes, spendingKeyAccount, dataRoot, allowChain, authAlgos)
            : [];
        return [...chainedProofInputs, defiProofInput, ...feeProofInputs];
    }
    async createChainedProofInputs(accountPublicKey, notes, targetValue, numberOfOutputNotes, spendingKeyAccount, dataRoot, allowChain, authAlgos) {
        const proofInputs = [];
        const outputNotes = [];
        if (notes.length > 2) {
            const chainedTxs = await this.joinSplitTxInputCreator.createChainedTxs(accountPublicKey, notes[0].assetId, notes, spendingKeyAccount, dataRoot, authAlgos);
            notes = chainedTxs.outputNotes;
            proofInputs.push(...chainedTxs.proofInputs);
        }
        const noteSum = notes.reduce((sum, n) => sum + n.value, BigInt(0));
        if (noteSum === targetValue && notes.length <= numberOfOutputNotes) {
            outputNotes.push(...notes);
        }
        else {
            const accountSpendingKeyRequired = !spendingKeyAccount.spendingPublicKey.equals(accountPublicKey);
            const { tx, viewingKeys, signingData, outputNotes: [, changeNote], } = await this.joinSplitTxInputCreator.createTx(accountPublicKey, ProofId.SEND, notes[0].assetId, BigInt(0), // publicValue
            EthAddress.ZERO, noteSum - targetValue, // recipientPrivateOutput
            targetValue, // senderPrivateOutput
            BridgeCallData.ZERO, BigInt(0), accountPublicKey, accountSpendingKeyRequired, notes, spendingKeyAccount, dataRoot, allowChain ? 3 : 2, false, // hideNoteCreator
            authAlgos);
            proofInputs.push({ tx, viewingKeys, signingData });
            outputNotes.push(changeNote);
        }
        return { proofInputs, outputNotes };
    }
    async createDefiProofInput(accountPublicKey, bridgeCallData, depositValue, inputNotes, spendingKeyAccount, dataRoot, authAlgos) {
        const assetId = bridgeCallData.inputAssetIdA;
        const { tx, viewingKeys, partialStateSecretEphPubKey, signingData } = await this.joinSplitTxInputCreator.createTx(accountPublicKey, ProofId.DEFI_DEPOSIT, assetId, BigInt(0), // publicValue
        EthAddress.ZERO, // publicOwner
        BigInt(0), // recipientPrivateOutput
        BigInt(0), // senderPrivateOutput
        bridgeCallData, depositValue, accountPublicKey, // recipient
        false, // recipientSpendingKeyRequired
        inputNotes, spendingKeyAccount, dataRoot, 0, // allowChain
        false, // hideNoteCreator
        authAlgos);
        return { tx, viewingKey: viewingKeys[0], partialStateSecretEphPubKey, signingData };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmaV9wcm9vZl9pbnB1dF9jcmVhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3Byb29mcy9wcm9vZl9pbnB1dC9kZWZpX3Byb29mX2lucHV0X2NyZWF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBbUIsTUFBTSw2QkFBNkIsQ0FBQztBQUMxRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDdEUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBUTVELE1BQU0sT0FBTyxxQkFBcUI7SUFDaEMsWUFDVSx1QkFBZ0QsRUFDaEQsd0JBQWtEO1FBRGxELDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBeUI7UUFDaEQsNkJBQXdCLEdBQXhCLHdCQUF3QixDQUEwQjtJQUN6RCxDQUFDO0lBRUcsS0FBSyxDQUFDLGlCQUFpQixDQUM1QixFQUNFLGdCQUFnQixFQUNoQixjQUFjLEVBQ2QsVUFBVSxFQUNWLEdBQUcsRUFDSCxVQUFVLEVBQ1Ysa0JBQWtCLEVBQ2xCLFFBQVEsRUFDUixVQUFVLEdBQ1csRUFDdkIsU0FBeUI7UUFFekIsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLEtBQUssY0FBYyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ2xGLE1BQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxLQUFLLGNBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNsRixNQUFNLFlBQVksR0FBRyxjQUFjLENBQUMsY0FBYyxLQUFLLENBQUMsQ0FBQztRQUN6RCxNQUFNLGtCQUFrQixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxJQUFJLEdBQUcsQ0FBQyxPQUFPLEtBQUssY0FBYyxDQUFDLGFB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