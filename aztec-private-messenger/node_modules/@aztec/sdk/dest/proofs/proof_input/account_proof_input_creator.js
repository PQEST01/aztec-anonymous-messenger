import { EthAddress, GrumpkinAddress } from '@aztec/barretenberg/address';
import { AccountTx, createAccountProofSigningData, ProofId } from '@aztec/barretenberg/client_proofs';
export class AccountProofInputCreator {
    constructor(paymentProofInputCreator, wasm) {
        this.paymentProofInputCreator = paymentProofInputCreator;
        this.wasm = wasm;
    }
    async createProofInputs({ accountPublicKey, aliasHash, newAccountPublicKey, newSpendingPublicKey1, newSpendingPublicKey2, deposit, fee, depositor, inputNotes, spendingKeyAccount, dataRoot, allowChain, }, authAlgos) {
        // TODO - check AccountProofRequestData
        const accountProofInput = await this.createAccountProofInput(accountPublicKey, aliasHash, newAccountPublicKey, newSpendingPublicKey1, newSpendingPublicKey2, spendingKeyAccount, dataRoot);
        const payFeeViaDeposit = (deposit.value || fee.value) && !depositor.equals(EthAddress.ZERO);
        const depositProofInputs = payFeeViaDeposit
            ? await this.paymentProofInputCreator.createProofInputs({
                accountPublicKey,
                proofId: ProofId.DEPOSIT,
                assetValue: deposit,
                fee,
                publicOwner: depositor,
                recipient: accountPublicKey,
                recipientSpendingKeyRequired: true,
                inputNotes,
                spendingKeyAccount: {
                    ...spendingKeyAccount,
                    // The spending key exists for a request to recover an account, but its private key was discarded after
                    // recovery payload was generated. We only have the siganure for the account proof, and can't use that
                    // spending key to create and sign a deposit tx.
                    spendingPublicKey: accountPublicKey.equals(newAccountPublicKey)
                        ? accountPublicKey
                        : spendingKeyAccount.spendingPublicKey,
                },
                dataRoot,
                allowChain,
                hideNoteCreator: false,
            }, authAlgos)
            : [];
        const feeProofInputs = fee.value && !payFeeViaDeposit
            ? await this.paymentProofInputCreator.createFeeProofInputs(accountPublicKey, fee, inputNotes, spendingKeyAccount, dataRoot, allowChain, authAlgos)
            : [];
        return [accountProofInput, ...depositProofInputs, ...feeProofInputs];
    }
    async createAccountProofInput(accountPublicKey, aliasHash, newAccountPublicKey, newSpendingPublicKey1, newSpendingPublicKey2, { spendingPublicKey, accountIndex, accountPath }, dataRoot) {
        const create = accountPublicKey.equals(spendingPublicKey);
        const migrate = !newAccountPublicKey.equals(accountPublicKey);
        const tx = new AccountTx(dataRoot, accountPublicKey, newAccountPublicKey || accountPublicKey, newSpendingPublicKey1 || GrumpkinAddress.ZERO, newSpendingPublicKey2 || GrumpkinAddress.ZERO, aliasHash, create, migrate, accountIndex, accountPath, spendingPublicKey);
        const signingData = await createAccountProofSigningData(tx, this.wasm);
        return { tx, signingData };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudF9wcm9vZl9pbnB1dF9jcmVhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3Byb29mcy9wcm9vZl9pbnB1dC9hY2NvdW50X3Byb29mX2lucHV0X2NyZWF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxlQUFlLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUMxRSxPQUFPLEVBQUUsU0FBUyxFQUFFLDZCQUE2QixFQUFFLE9BQU8sRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBT3RHLE1BQU0sT0FBTyx3QkFBd0I7SUFDbkMsWUFBb0Isd0JBQWtELEVBQVUsSUFBc0I7UUFBbEYsNkJBQXdCLEdBQXhCLHdCQUF3QixDQUEwQjtRQUFVLFNBQUksR0FBSixJQUFJLENBQWtCO0lBQUcsQ0FBQztJQUVuRyxLQUFLLENBQUMsaUJBQWlCLENBQzVCLEVBQ0UsZ0JBQWdCLEVBQ2hCLFNBQVMsRUFDVCxtQkFBbUIsRUFDbkIscUJBQXFCLEVBQ3JCLHFCQUFxQixFQUNyQixPQUFPLEVBQ1AsR0FBRyxFQUNILFNBQVMsRUFDVCxVQUFVLEVBQ1Ysa0JBQWtCLEVBQ2xCLFFBQVEsRUFDUixVQUFVLEdBQ2MsRUFDMUIsU0FBeUI7UUFFekIsdUNBQXVDO1FBRXZDLE1BQU0saUJBQWlCLEdBQUcsTUFBTSxJQUFJLENBQUMsdUJBQXVCLENBQzFELGdCQUFnQixFQUNoQixTQUFTLEVBQ1QsbUJBQW1CLEVBQ25CLHFCQUFxQixFQUNyQixxQkFBcUIsRUFDckIsa0JBQWtCLEVBQ2xCLFFBQVEsQ0FDVCxDQUFDO1FBRUYsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUYsTUFBTSxrQkFBa0IsR0FBRyxnQkFBZ0I7WUFDekMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLHdCQUF3QixDQUFDLGlCQUFpQixDQUNuRDtnQkFDRSxnQkFBZ0I7Z0JBQ2hCLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTztnQkFDeEIsVUFBVSxFQUFFLE9BQU87Z0JBQ25CLEdBQUc7Z0JBQ0gsV0FBVyxFQUFFLFNBQVM7Z0JBQ3RCLFNBQVMsRUFBRSxnQkFBZ0I7Z0JBQzNCLDRCQUE0QixFQUFFLElBQUk7Z0JBQ2xDLFVBQVU7Z0JBQ1Ysa0JBQWtCLEVBQUU7b0JBQ2xCLEdBQUcsa0JBQWtCO29CQUNyQix1R0FBdUc7b0JBQ3ZHLHNHQUFzRztvQkFDdEcsZ0RBQWdEO29CQUNoRCxpQkFBaUIsRUFBRSxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUM7d0JBQzdELENBQUMsQ0FBQyxnQkFBZ0I7d0JBQ2xCLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxpQkFBaUI7aUJBQ3pDO2dCQUNELFFBQVE7Z0JBQ1IsVUFBVTtnQkFDVixlQUFlLEVBQUUsS0FBSzthQUN2QixFQUNELFNBQVMsQ0FDVjtZQUNILENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDUCxNQUFNLGNBQWMsR0FDbEIsR0FBRyxDQUFDLEtBQUssSUFBSSxDQUFDLGdCQUFnQjtZQUM1QixDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsd0JBQXdCLENBQUMsb0JBQW9CLENBQ3RELGdCQUFnQixFQUNoQixHQUFHLEVBQ0gsVUFBVSxFQUNWLGtCQUFrQixFQUNsQixRQUFRLEVBQ1IsVUFBVSxFQUNWLFNBQVMsQ0FDVjtZQUNILENBQUMsQ0FBQyxFQUFFLENBQUM7UUFFVCxPQUFPLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxrQkFBa0IsRUFBRSxHQUFHLGNBQWMsQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFFTyxLQUFLLENBQUMsdUJBQXVCLENBQ25DLGdCQUFpQyxFQUNqQyxTQUFvQixFQUNwQixtQkFBb0MsRUFDcEMscUJBQXNDLEVBQ3RDLHFCQUFzQyxFQUN0QyxFQUFFLGlCQUFpQixFQUFFLFlBQVksRUFBRSxXQUFXLEVBQXNCLEVBQ3BFLFFBQWdCO1FBRWhCLE1BQU0sTUFBTSxHQUFHLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQzFELE1BQU0sT0FBTyxHQUFHLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDOUQsTUFBTSxFQUFFLEdBQUcsSUFBSSxTQUFTLENBQ3RCLFFBQVEsRUFDUixnQkFBZ0IsRUFDaEIsbUJBQW1CLElBQUksZ0JBQWdCLEVBQ3ZDLHFCQUFxQixJQUFJLGVBQWUsQ0FBQyxJQUFJLEVBQzdDLHFCQUFxQixJQUFJLGVBQWUsQ0FBQyxJQUFJLEVBQzdDLFNBQVMsRUFDVCxNQUFNLEVBQ04sT0FBTyxFQUNQLFlBQVksRUFDWixXQUFXLEVBQ1gsaUJBQWlCLENBQ2xCLENBQUM7UUFFRixNQUFNLFdBQVcsR0FBRyxNQUFNLDZCQUE2QixDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFdkUsT0FBTyxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUUsQ0FBQztJQUM3QixDQUFDO0NBQ0YifQ==