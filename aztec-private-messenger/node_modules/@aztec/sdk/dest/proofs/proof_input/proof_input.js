import { GrumpkinAddress } from '@aztec/barretenberg/address';
import { AccountTx } from '@aztec/barretenberg/client_proofs';
import { ViewingKey } from '@aztec/barretenberg/viewing_key';
import { joinSplitTxInputFromJson, joinSplitTxInputToJson, } from './join_split_tx_input.js';
export { AccountTx } from '@aztec/barretenberg/client_proofs';
export const accountProofInputToJson = ({ tx, signingData }) => ({
    tx: new Uint8Array(tx.toBuffer()),
    signingData: new Uint8Array(signingData),
});
export const accountProofInputFromJson = ({ tx, signingData }) => ({
    tx: AccountTx.fromBuffer(Buffer.from(tx)),
    signingData: Buffer.from(signingData),
});
export const paymentProofInputToJson = ({ tx, viewingKeys, signingData, }) => ({
    tx: joinSplitTxInputToJson(tx),
    viewingKeys: viewingKeys.map(vk => vk.toString()),
    signingData: new Uint8Array(signingData),
});
export const paymentProofInputFromJson = ({ tx, viewingKeys, signingData, }) => ({
    tx: joinSplitTxInputFromJson(tx),
    viewingKeys: viewingKeys.map(vk => ViewingKey.fromString(vk)),
    signingData: Buffer.from(signingData),
});
export const defiProofInputToJson = ({ tx, viewingKey, partialStateSecretEphPubKey, signingData, }) => ({
    tx: joinSplitTxInputToJson(tx),
    viewingKey: viewingKey.toString(),
    partialStateSecretEphPubKey: partialStateSecretEphPubKey.toString(),
    signingData: new Uint8Array(signingData),
});
export const defiProofInputFromJson = ({ tx, viewingKey, partialStateSecretEphPubKey, signingData, }) => ({
    tx: joinSplitTxInputFromJson(tx),
    viewingKey: ViewingKey.fromString(viewingKey),
    partialStateSecretEphPubKey: GrumpkinAddress.fromString(partialStateSecretEphPubKey),
    signingData: Buffer.from(signingData),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvb2ZfaW5wdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcHJvb2ZzL3Byb29mX2lucHV0L3Byb29mX2lucHV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDOUQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzdELE9BQU8sRUFFTCx3QkFBd0IsRUFFeEIsc0JBQXNCLEdBQ3ZCLE1BQU0sMEJBQTBCLENBQUM7QUFFbEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBWTlELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFxQixFQUF5QixFQUFFLENBQUMsQ0FBQztJQUN6RyxFQUFFLEVBQUUsSUFBSSxVQUFVLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2pDLFdBQVcsRUFBRSxJQUFJLFVBQVUsQ0FBQyxXQUFXLENBQUM7Q0FDekMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQXlCLEVBQXFCLEVBQUUsQ0FBQyxDQUFDO0lBQzNHLEVBQUUsRUFBRSxTQUFTLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDekMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO0NBQ3RDLENBQUMsQ0FBQztBQWNILE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLENBQUMsRUFDdEMsRUFBRSxFQUNGLFdBQVcsRUFDWCxXQUFXLEdBQ08sRUFBeUIsRUFBRSxDQUFDLENBQUM7SUFDL0MsRUFBRSxFQUFFLHNCQUFzQixDQUFDLEVBQUUsQ0FBQztJQUM5QixXQUFXLEVBQUUsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNqRCxXQUFXLEVBQUUsSUFBSSxVQUFVLENBQUMsV0FBVyxDQUFDO0NBQ3pDLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLENBQUMsRUFDeEMsRUFBRSxFQUNGLFdBQVcsRUFDWCxXQUFXLEdBQ1csRUFBcUIsRUFBRSxDQUFDLENBQUM7SUFDL0MsRUFBRSxFQUFFLHdCQUF3QixDQUFDLEVBQUUsQ0FBQztJQUNoQyxXQUFXLEVBQUUsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDN0QsV0FBVyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO0NBQ3RDLENBQUMsQ0FBQztBQWdCSCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxDQUFDLEVBQ25DLEVBQUUsRUFDRixVQUFVLEVBQ1YsMkJBQTJCLEVBQzNCLFdBQVcsR0FDSSxFQUFzQixFQUFFLENBQUMsQ0FBQztJQUN6QyxFQUFFLEVBQUUsc0JBQXNCLENBQUMsRUFBRSxDQUFDO0lBQzlCLFVBQVUsRUFBRSxVQUFVLENBQUMsUUFBUSxFQUFFO0lBQ2pDLDJCQUEyQixFQUFFLDJCQUEyQixDQUFDLFFBQVEsRUFBRTtJQUNuRSxXQUFXLEVBQUUsSUFBSSxVQUFVLENBQUMsV0FBVyxDQUFDO0NBQ3pDLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLENBQUMsRUFDckMsRUFBRSxFQUNGLFVBQVUsRUFDViwyQkFBMkIsRUFDM0IsV0FBVyxHQUNRLEVBQWtCLEVBQUUsQ0FBQyxDQUFDO0lBQ3pDLEVBQUUsRUFBRSx3QkFBd0IsQ0FBQyxFQUFFLENBQUM7SUFDaEMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDO0lBQzdDLDJCQUEyQixFQUFFLGVBQWUsQ0FBQyxVQUFVLENBQUMsMkJBQTJCLENBQUM7SUFDcEYsV0FBVyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO0NBQ3RDLENBQUMsQ0FBQyJ9