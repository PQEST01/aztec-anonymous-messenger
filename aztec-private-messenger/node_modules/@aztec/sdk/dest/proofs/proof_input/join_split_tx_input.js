import { AliasHash } from '@aztec/barretenberg/account_id';
import { EthAddress, GrumpkinAddress } from '@aztec/barretenberg/address';
import { JoinSplitTx } from '@aztec/barretenberg/client_proofs';
import { HashPath } from '@aztec/barretenberg/merkle_tree';
import { ClaimNoteTxData } from '@aztec/barretenberg/note_algorithms';
import { noteFromJson, noteToJson } from '../../note/index.js';
export const joinSplitTxInputToJson = ({ publicValue, publicOwner, inputNotes, outputNotes, claimNote, spendingPublicKey, aliasHash, accountPath, dataRoot, backwardLink, ...rest }) => ({
    publicValue: publicValue.toString(),
    publicOwner: publicOwner.toString(),
    inputNotes: inputNotes.map(noteToJson),
    outputNotes: outputNotes.map(noteToJson),
    claimNote: new Uint8Array(claimNote.toBuffer()),
    spendingPublicKey: spendingPublicKey.toString(),
    aliasHash: aliasHash.toString(),
    accountPath: new Uint8Array(accountPath.toBuffer()),
    dataRoot: new Uint8Array(dataRoot),
    backwardLink: new Uint8Array(backwardLink),
    ...rest,
});
export const joinSplitTxInputFromJson = ({ publicValue, publicOwner, inputNotes, outputNotes, claimNote, spendingPublicKey, aliasHash, accountPath, dataRoot, backwardLink, ...rest }) => ({
    publicValue: BigInt(publicValue),
    publicOwner: EthAddress.fromString(publicOwner),
    inputNotes: inputNotes.map(noteFromJson),
    outputNotes: outputNotes.map(noteFromJson),
    claimNote: ClaimNoteTxData.fromBuffer(Buffer.from(claimNote)),
    spendingPublicKey: GrumpkinAddress.fromString(spendingPublicKey),
    aliasHash: AliasHash.fromString(aliasHash),
    accountPath: HashPath.fromBuffer(Buffer.from(accountPath)),
    dataRoot: Buffer.from(dataRoot),
    backwardLink: Buffer.from(backwardLink),
    ...rest,
});
export const toJoinSplitTx = (tx, accountPrivateKey) => {
    const numInputNotes = tx.inputNotes.reduce((count, n) => count + (n.value ? 1 : 0), 0);
    const assetId = tx.inputNotes[0].assetId;
    const accountRequired = !tx.inputNotes[0].owner.equals(tx.spendingPublicKey);
    return new JoinSplitTx(tx.proofId, tx.publicValue, tx.publicOwner, assetId, numInputNotes, tx.inputNotes.map(n => n.index || 0), tx.dataRoot, tx.inputNotes.map(n => HashPath.fromBuffer(n.hashPath)), tx.inputNotes.map(n => n.treeNote), tx.outputNotes.map(n => n.treeNote), tx.claimNote, accountPrivateKey, tx.aliasHash, accountRequired, tx.accountIndex, tx.accountPath, tx.spendingPublicKey, tx.backwardLink, tx.allowChain);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiam9pbl9zcGxpdF90eF9pbnB1dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wcm9vZnMvcHJvb2ZfaW5wdXQvam9pbl9zcGxpdF90eF9pbnB1dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDM0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxlQUFlLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUMxRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDaEUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzNELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUN0RSxPQUFPLEVBQVEsWUFBWSxFQUFZLFVBQVUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBa0MvRSxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxDQUFDLEVBQ3JDLFdBQVcsRUFDWCxXQUFXLEVBQ1gsVUFBVSxFQUNWLFdBQVcsRUFDWCxTQUFTLEVBQ1QsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxXQUFXLEVBQ1gsUUFBUSxFQUNSLFlBQVksRUFDWixHQUFHLElBQUksRUFDVSxFQUF3QixFQUFFLENBQUMsQ0FBQztJQUM3QyxXQUFXLEVBQUUsV0FBVyxDQUFDLFFBQVEsRUFBRTtJQUNuQyxXQUFXLEVBQUUsV0FBVyxDQUFDLFFBQVEsRUFBRTtJQUNuQyxVQUFVLEVBQUUsVUFBVSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUM7SUFDdEMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDO0lBQ3hDLFNBQVMsRUFBRSxJQUFJLFVBQVUsQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDL0MsaUJBQWlCLEVBQUUsaUJBQWlCLENBQUMsUUFBUSxFQUFFO0lBQy9DLFNBQVMsRUFBRSxTQUFTLENBQUMs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