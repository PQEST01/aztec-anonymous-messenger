import { GrumpkinAddress } from '@aztec/barretenberg/address';
import { AccountTx, JoinSplitTx, ProofData } from '@aztec/barretenberg/client_proofs';
import { SchnorrSignature } from '@aztec/barretenberg/crypto';
import { HashPath } from '@aztec/barretenberg/merkle_tree';
import { ViewingKey } from '@aztec/barretenberg/viewing_key';
import { treeNoteToNote } from '../note/index.js';
export const accountProofInputToJson = ({ tx, signingData, signature }) => ({
    tx: new Uint8Array(tx.toBuffer()),
    signingData: new Uint8Array(signingData),
    signature: signature ? signature.toString() : undefined,
});
export const accountProofInputFromJson = ({ tx, signingData, signature, }) => ({
    tx: AccountTx.fromBuffer(Buffer.from(tx)),
    signingData: Buffer.from(signingData),
    signature: signature ? SchnorrSignature.fromString(signature) : undefined,
});
export const joinSplitProofInputToJson = ({ tx, viewingKeys, partialStateSecretEphPubKey, signingData, signature, }) => ({
    tx: new Uint8Array(tx.toBuffer()),
    viewingKeys: viewingKeys.map(vk => vk.toString()),
    partialStateSecretEphPubKey: partialStateSecretEphPubKey ? partialStateSecretEphPubKey.toString() : undefined,
    signingData: new Uint8Array(signingData),
    signature: signature ? signature.toString() : undefined,
});
export const joinSplitProofInputFromJson = ({ tx, viewingKeys, partialStateSecretEphPubKey, signingData, signature, }) => ({
    tx: JoinSplitTx.fromBuffer(Buffer.from(tx)),
    viewingKeys: viewingKeys.map(vk => ViewingKey.fromString(vk)),
    partialStateSecretEphPubKey: partialStateSecretEphPubKey
        ? GrumpkinAddress.fromString(partialStateSecretEphPubKey)
        : undefined,
    signingData: Buffer.from(signingData),
    signature: signature ? SchnorrSignature.fromString(signature) : undefined,
});
export const joinSplitTxInputToJoinSplitTx = (txInput, accountPrivateKey, accountPublicKey) => new JoinSplitTx(txInput.proofId, txInput.publicValue, txInput.publicOwner, (txInput.inputNotes[0] || txInput.outputNotes[0]).assetId, txInput.inputNotes.reduce((count, n) => count + (n.value ? 1 : 0), 0), txInput.inputNotes.map(n => n.index || 0), txInput.dataRoot, txInput.inputNotes.map(n => HashPath.fromBuffer(n.hashPath)), txInput.inputNotes.map(n => n.treeNote), txInput.outputNotes.map(n => n.treeNote), txInput.claimNote, accountPrivateKey, txInput.aliasHash, !txInput.spendingPublicKey.equals(accountPublicKey), txInput.accountIndex, txInput.accountPath, txInput.spendingPublicKey, txInput.backwardLink, txInput.allowChain);
export const joinSplitTxToJoinSplitTxInput = (tx, accountPrivateKey, noteAlgos) => ({
    proofId: tx.proofId,
    publicValue: tx.publicValue,
    publicOwner: tx.publicOwner,
    inputNotes: tx.inputNotes.map((n, i) => treeNoteToNote(n, accountPrivateKey, noteAlgos, {
        gibberish: i >= tx.numInputNotes,
        index: tx.inputNoteIndices[i],
        hashPath: tx.inputNotePaths[i].toBuffer(),
    })),
    outputNotes: tx.outputNotes.map((n, i) => treeNoteToNote(n, accountPrivateKey, noteAlgos, {
        allowChain: !i ? ProofData.allowChainFromNote1(tx.allowChain) : ProofData.allowChainFromNote2(tx.allowChain),
    })),
    claimNote: tx.claimNote,
    spendingPublicKey: tx.spendingPublicKey,
    aliasHash: tx.aliasHash,
    accountIndex: tx.accountIndex,
    accountPath: tx.accountPath,
    dataRoot: tx.merkleRoot,
    backwardLink: tx.backwardLink,
    allowChain: tx.allowChain,
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvb2ZfaW5wdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcHJvb2ZzL3Byb29mX2lucHV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUN0RixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFFM0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzdELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQWVsRCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQXFCLEVBQXlCLEVBQUUsQ0FBQyxDQUFDO0lBQ3BILEVBQUUsRUFBRSxJQUFJLFVBQVUsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDakMsV0FBVyxFQUFFLElBQUksVUFBVSxDQUFDLFdBQVcsQ0FBQztJQUN4QyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVM7Q0FDeEQsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUcsQ0FBQyxFQUN4QyxFQUFFLEVBQ0YsV0FBVyxFQUNYLFNBQVMsR0FDYSxFQUFxQixFQUFFLENBQUMsQ0FBQztJQUMvQyxFQUFFLEVBQUUsU0FBUyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3pDLFdBQVcsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUNy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