import { AccountProver, JoinSplitProver, UnrolledProver } from '@aztec/barretenberg/client_proofs';
import { NetCrs } from '@aztec/barretenberg/crs';
import { randomBytes } from '@aztec/barretenberg/crypto';
import { createDebugLogger } from '@aztec/barretenberg/log';
import { MemorySerialQueue } from '../../serial_queue/index.js';
import { toJoinSplitTx, } from '../proof_input/index.js';
import { AccountProofCreator } from './account_proof_creator.js';
import { DefiProofCreator } from './defi_proof_creator.js';
import { PaymentProofCreator } from './payment_proof_creator.js';
const CREATE_PROOF_TIMEOUT = 60 * 1000;
const createTxRefNo = () => randomBytes(4).readUInt32BE(0);
export class ProofOutputFactory {
    constructor(proverless, noteAlgos, pippenger, fftFactory, barretenberg, workerPool) {
        this.proverless = proverless;
        this.noteAlgos = noteAlgos;
        this.pippenger = pippenger;
        this.fftFactory = fftFactory;
        this.barretenberg = barretenberg;
        this.workerPool = workerPool;
        this.serialQueue = new MemorySerialQueue();
        this.debug = createDebugLogger('bb:provers');
    }
    async destroy() {
        this.debug('destroying...');
        // The serial queue will cancel itself. This ensures that anything currently in the queue finishes, and ensures
        // that once the await to push() returns, nothing else is on, or can be added to the queue.
        await this.serialQueue.push(() => Promise.resolve(this.serialQueue.cancel()));
        this.debug('destroyed.');
    }
    async createProofs(proofInputs, signatures, keyPair) {
        return await this.serialQueue.push(async () => {
            // TODO - init pippenger here instead of the coreSdk.
            // await this.initProvers();
            const txRefNo = proofInputs.length > 1 ? createTxRefNo() : 0;
            const proofOutputs = [];
            for (let i = 0; i < proofInputs.length; ++i) {
                const proofInput = proofInputs[i];
                const signature = signatures[i];
                if (Object.prototype.hasOwnProperty.call(proofInput, 'partialStateSecretEphPubKey')) {
                    proofOutputs.push(await this.createDefiProof(proofInput, signature, txRefNo, keyPair));
                }
                else if (Object.prototype.hasOwnProperty.call(proofInput, 'viewingKeys')) {
                    proofOutputs.push(await this.createPaymentProof(proofInput, signature, txRefNo, keyPair));
                }
                else {
                    proofOutputs.push(await this.createAccountProof(proofInput, signature, txRefNo));
                }
            }
            return proofOutputs;
        });
    }
    // TODO - change it back to private method and only use 'createProofs'.
    async createPaymentProof({ tx, viewingKeys }, signature, txRefNo, keyPair, timeout = CREATE_PROOF_TIMEOUT) {
        await this.createJoinSplitProofCreator();
        await this.computeJoinSplitProvingKey(timeout);
        const accountPrivateKey = await keyPair.getPrivateKey();
        const proofOutput = await this.paymentProofCreator.createProof(toJoinSplitTx(tx, accountPrivateKey), viewingKeys, signature, txRefNo, timeout);
        return { ...proofOutput, outputNotes: tx.outputNotes };
    }
    // TODO - change it back to private method and only use 'createProofs'.
    async createAccountProof({ tx }, signature, txRefNo, timeout = CREATE_PROOF_TIMEOUT) {
        await this.createAccountProofCreator();
        await this.computeAccountProvingKey(timeout);
        const proofOutput = await this.accountProofCreator.createProof(tx, signature, txRefNo, timeout);
        return { ...proofOutput, outputNotes: [] };
    }
    // TODO - change it back to private method and only use 'createProofs'.
    async createDefiProof({ tx, viewingKey, partialStateSecretEphPubKey }, signature, txRefNo, keyPair, timeout = CREATE_PROOF_TIMEOUT) {
        await this.createJoinSplitProofCreator();
        await this.computeJoinSplitProvingKey(timeout);
        const accountPrivateKey = await keyPair.getPrivateKey();
        const proofOutput = await this.defiProofCreator.createProof(toJoinSplitTx(tx, accountPrivateKey), viewingKey, partialStateSecretEphPubKey, signature, txRefNo, timeout);
        return { ...proofOutput, outputNotes: tx.outputNotes };
    }
    async getCrsData(circuitSize) {
        this.debug('downloading crs data...');
        const crs = new NetCrs(circuitSize);
        await crs.init();
        this.debug('done.');
        return Buffer.from(crs.getData());
    }
    async initProvers() {
        if (this.accountProofCreator) {
            return;
        }
        const maxCircuitSize = Math.max(JoinSplitProver.getCircuitSize(), AccountProver.getCircuitSize());
        const crsData = await this.getCrsData(maxCircuitSize);
        await this.pippenger.init(crsData);
        await this.createJoinSplitProofCreator();
        await this.createAccountProofCreator();
    }
    async createJoinSplitProofCreator() {
        if (this.defiProofCreator) {
            return;
        }
        const fft = await this.fftFactory.createFft(JoinSplitProver.getCircuitSize(this.proverless));
        const unrolledProver = new UnrolledProver(this.workerPool ? this.workerPool.workers[0] : this.barretenberg, this.pippenger, fft);
        this.joinSplitProver = new JoinSplitProver(unrolledProver, this.proverless);
        this.paymentProofCreator = new PaymentProofCreator(this.joinSplitProver);
        this.defiProofCreator = new DefiProofCreator(this.joinSplitProver, this.noteAlgos);
    }
    async createAccountProofCreator() {
        if (this.accountProofCreator) {
            return;
        }
        const fft = await this.fftFactory.createFft(AccountProver.getCircuitSize(this.proverless));
        const unrolledProver = new UnrolledProver(this.workerPool ? this.workerPool.workers[0] : this.barretenberg, this.pippenger, fft);
        this.accountProver = new AccountProver(unrolledProver, this.proverless);
        this.accountProofCreator = new AccountProofCreator(this.accountProver);
    }
    async computeJoinSplitProvingKey(timeout) {
        this.debug('release account proving key...');
        await this.accountProver?.releaseKey();
        this.debug('computing join-split proving key...');
        await this.joinSplitProver.computeKey(timeout);
        this.debug('done.');
    }
    async computeAccountProvingKey(timeout) {
        this.debug('release join-split proving key...');
        await this.joinSplitProver?.releaseKey();
        this.debug('computing account proving key...');
        await this.accountProver.computeKey(timeout);
        this.debug('done.');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvb2Zfb3V0cHV0X2ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcHJvb2ZzL3Byb29mX291dHB1dC9wcm9vZl9vdXRwdXRfZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLGVBQWUsRUFBRSxjQUFjLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNuRyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDakQsT0FBTyxFQUFFLFdBQVcsRUFBb0IsTUFBTSw0QkFBNEIsQ0FBQztBQUUzRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUs1RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNoRSxPQUFPLEVBS0wsYUFBYSxHQUNkLE1BQU0seUJBQXlCLENBQUM7QUFDakMsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDakUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDM0QsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFHakUsTUFBTSxvQkFBb0IsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDO0FBRXZDLE1BQU0sYUFBYSxHQUFHLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFNM0QsTUFBTSxPQUFPLGtCQUFrQjtJQVM3QixZQUNVLFVBQW1CLEVBQ25CLFNBQXlCLEVBQ3pCLFNBQW9CLEVBQ3BCLFVBQXNCLEVBQ3RCLFlBQThCLEVBQzlCLFVBQXVCO1FBTHZCLGVBQVUsR0FBVixVQUFVLENBQVM7UUFDbkIsY0FBUyxHQUFULFNBQVMsQ0FBZ0I7UUFDekIsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUNwQixlQUFVLEdBQVYsVUFB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