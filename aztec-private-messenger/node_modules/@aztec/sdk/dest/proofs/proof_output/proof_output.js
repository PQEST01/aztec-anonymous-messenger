import { ProofData, ProofId } from '@aztec/barretenberg/client_proofs';
import { OffchainAccountData, OffchainDefiDepositData, OffchainJoinSplitData, } from '@aztec/barretenberg/offchain_tx_data';
import { coreUserTxFromJson, coreUserTxToJson, } from '../../core_tx/index.js';
import { noteFromJson, noteToJson } from '../../note/index.js';
export const proofOutputToJson = ({ tx, proofData, offchainTxData, outputNotes }) => ({
    tx: coreUserTxToJson(tx),
    proofData: new Uint8Array(proofData.rawProofData),
    offchainTxData: new Uint8Array(offchainTxData.toBuffer()),
    outputNotes: outputNotes.map(n => noteToJson(n)),
});
const offchainTxDataFromBuffer = (proofId, buf) => {
    switch (proofId) {
        case ProofId.DEPOSIT:
        case ProofId.WITHDRAW:
        case ProofId.SEND:
            return OffchainJoinSplitData.fromBuffer(buf);
        case ProofId.ACCOUNT:
            return OffchainAccountData.fromBuffer(buf);
        case ProofId.DEFI_DEPOSIT:
            return OffchainDefiDepositData.fromBuffer(buf);
        default:
            throw new Error(`Unsupported ProofOutput proofId: ${proofId}`);
    }
};
export const proofOutputFromJson = ({ tx, proofData, offchainTxData, outputNotes }) => ({
    tx: coreUserTxFromJson(tx),
    proofData: new ProofData(Buffer.from(proofData)),
    offchainTxData: offchainTxDataFromBuffer(tx.proofId, Buffer.from(offchainTxData)),
    outputNotes: outputNotes.map(n => noteFromJson(n)),
});
export const proofOutputToProofTx = ({ proofData, offchainTxData }, depositSignature) => ({
    proofData: proofData.rawProofData,
    offchainTxData: offchainTxData.toBuffer(),
    depositSignature,
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvb2Zfb3V0cHV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3Byb29mcy9wcm9vZl9vdXRwdXQvcHJvb2Zfb3V0cHV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDdkUsT0FBTyxFQUNMLG1CQUFtQixFQUNuQix1QkFBdUIsRUFDdkIscUJBQXFCLEdBQ3RCLE1BQU0sc0NBQXNDLENBQUM7QUFFOUMsT0FBTyxFQU9MLGtCQUFrQixFQUNsQixnQkFBZ0IsR0FDakIsTUFBTSx3QkFBd0IsQ0FBQztBQUNoQyxPQUFPLEVBQVEsWUFBWSxFQUFZLFVBQVUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBZ0IvRSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUUsV0FBVyxFQUFlLEVBQW1CLEVBQUUsQ0FBQyxDQUFDO0lBQ2xILEVBQUUsRUFBRSxnQkFBZ0IsQ0FBQyxFQUFFLENBQUM7SUFDeEIsU0FBUyxFQUFFLElBQUksVUFBVSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUM7SUFDakQsY0FBYyxFQUFFLElBQUksVUFBVSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN6RCxXQUFXLEVBQUUsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUNqRCxDQUFDLENBQUM7QUFFSCxNQUFNLHdCQUF3QixHQUFHLENBQUMsT0FBZ0IsRUFBRSxHQUFXLEVBQUUsRUFBRTtJQUNqRSxRQUFRLE9BQU8sRUFBRTtRQUNmLEtBQUssT0FBTyxDQUFDLE9BQU8sQ0FBQztRQUNyQixLQUFLLE9BQU8sQ0FBQyxRQUFRLENBQUM7UUFDdEIsS0FBSyxPQUFPLENBQUMsSUFBSTtZQUNmLE9BQU8scUJBQXFCLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQy9DLEtBQUssT0FBTyxDQUFDLE9BQU87WUFDbEIsT0FBTyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDN0MsS0FBSyxPQUFPLENBQUMsWUFBWTtZQUN2QixPQUFPLHVCQUF1QixDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqRDtZQUNFLE1BQU0sSUFBSSxLQUFLLENBQUMsb0NBQW9DLE9BQU8sRUFBRSxDQUFDLENBQUM7S0FDbEU7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUUsV0FBVyxFQUFtQixFQUFlLEVBQUUsQ0FBQyxDQUFDO0lBQ3BILEVBQUUsRUFBRSxrQkFBa0IsQ0FBQyxFQUFFLENBQUM7SUFDMUIsU0FBUyxFQUFFLElBQUksU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDaEQsY0FBYyxFQUFFLHdCQUF3QixDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNqRixXQUFXLEVBQUUsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUNuRCxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxDQUFDLEVBQUUsU0FBUyxFQUFFLGNBQWMsRUFBZSxFQUFFLGdCQUF5QixFQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ2xILFNBQVMsRUFBRSxTQUFTLENBQUMsWUFBWTtJQUNqQyxjQUFjLEVBQUUsY0FBYyxDQUFDLFFBQVEsRUFBRTtJQUN6QyxnQkFBZ0I7Q0FDakIsQ0FBQyxDQUFDIn0=