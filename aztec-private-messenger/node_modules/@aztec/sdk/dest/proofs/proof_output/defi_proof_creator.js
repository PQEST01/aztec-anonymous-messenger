import { toBigIntBE } from '@aztec/barretenberg/bigint_buffer';
import { ProofData } from '@aztec/barretenberg/client_proofs';
import { createDebugLogger } from '@aztec/barretenberg/log';
import { OffchainDefiDepositData } from '@aztec/barretenberg/offchain_tx_data';
import { TxId } from '@aztec/barretenberg/tx_id';
import { CoreDefiTx } from '../../core_tx/index.js';
const debug = createDebugLogger('bb:defi_proof_creator');
export class DefiProofCreator {
    constructor(prover, noteAlgos) {
        this.prover = prover;
        this.noteAlgos = noteAlgos;
    }
    async createProof(tx, viewingKey, partialStateSecretEphPubKey, signature, txRefNo, timeout) {
        debug('creating proof...');
        const start = new Date().getTime();
        tx.signature = signature;
        const proof = await this.prover.createProof(tx, timeout);
        debug(`created proof: ${new Date().getTime() - start}ms`);
        debug(`proof size: ${proof.length}`);
        const proofData = new ProofData(proof);
        const txId = new TxId(proofData.txId);
        const { outputNotes, claimNote: { value: depositValue, bridgeCallData, partialStateSecret }, } = tx;
        const txFee = toBigIntBE(proofData.txFee);
        const { ownerPubKey: accountPublicKey, accountRequired } = outputNotes[1];
        const partialState = this.noteAlgos.valueNotePartialCommitment(partialStateSecret, accountPublicKey, accountRequired);
        const coreTx = new CoreDefiTx(txId, accountPublicKey, bridgeCallData, depositValue, txFee, txRefNo, new Date(), partialState, partialStateSecret);
        const offchainTxData = new OffchainDefiDepositData(bridgeCallData, partialState, partialStateSecretEphPubKey, depositValue, txFee, viewingKey, txRefNo);
        return {
            tx: coreTx,
            proofData,
            offchainTxData,
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmaV9wcm9vZl9jcmVhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3Byb29mcy9wcm9vZl9vdXRwdXQvZGVmaV9wcm9vZl9jcmVhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUMvRCxPQUFPLEVBQWdDLFNBQVMsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBRTVGLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRTVELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQy9FLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUVqRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFcEQsTUFBTSxLQUFLLEdBQUcsaUJBQWlCLENBQUMsdUJBQXVCLENBQUMsQ0FBQztBQUV6RCxNQUFNLE9BQU8sZ0JBQWdCO0lBQzNCLFlBQW9CLE1BQXVCLEVBQVUsU0FBeUI7UUFBMUQsV0FBTSxHQUFOLE1BQU0sQ0FBaUI7UUFBVSxjQUFTLEdBQVQsU0FBUyxDQUFnQjtJQUFHLENBQUM7SUFFM0UsS0FBSyxDQUFDLFdBQVcsQ0FDdEIsRUFBZSxFQUNmLFVBQXNCLEVBQ3RCLDJCQUE0QyxFQUM1QyxTQUEyQixFQUMzQixPQUFlLEVBQ2YsT0FBZ0I7UUFFaEIsS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDM0IsTUFBTSxLQUFLLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNuQyxFQUFFLENBQUMsU0FBUyxHQUFHLFNBQVUsQ0FBQztRQUMxQixNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN6RCxLQUFLLENBQUMsa0JBQWtCLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsS0FBSyxJQUFJLENBQUMsQ0FBQztRQUMxRCxLQUFLLENBQUMsZUFBZSxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUVyQyxNQUFNLFNBQVMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2QyxNQUFNLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdEMsTUFBTSxFQUNKLFdBQVcsRUFDWCxTQUFTLEVBQUUsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLGNBQWMsRUFBRSxrQkFBa0IsRUFBRSxHQUN2RSxHQUFHLEVBQUUsQ0FBQztRQUNQLE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUMsTUFBTSxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxlQUFlLEVBQUUsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUUsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQywwQkFBMEIsQ0FDNUQsa0JBQWtCLEVBQ2xCLGdCQUFnQixFQUNoQixlQUFlLENBQ2hCLENBQUM7UUFDRixNQUFNLE1BQU0sR0FBRyxJQUFJLFVBQVUsQ0FDM0IsSUFBSSxFQUNKLGdCQUFnQixFQUNoQixjQUFjLEVBQ2QsWUFBWSxFQUNaLEtBQUssRUFDTCxPQUFPLEVBQ1AsSUFBSSxJQUFJLEVBQUUsRUFDVixZQUFZLEVBQ1osa0JBQWtCLENBQ25CLENBQUM7UUFDRixNQUFNLGNBQWMsR0FBRyxJQUFJLHVCQUF1QixDQUNoRCxjQUFjLEVBQ2QsWUFBWSxFQUNaLDJCQUEyQixFQUMzQixZQUFZLEVBQ1osS0FBSyxFQUNMLFVBQVUsRUFDVixPQUFPLENBQ1IsQ0FBQztRQUVGLE9BQU87WUFDTCxFQUFFLEVBQUUsTUFBTTtZQUNWLFNBQVM7WUFDVCxjQUFjO1NBQ2YsQ0FBQztJQUNKLENBQUM7Q0FDRiJ9