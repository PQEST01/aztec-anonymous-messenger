import { toBigIntBE } from '@aztec/barretenberg/bigint_buffer';
import { ProofData, ProofId } from '@aztec/barretenberg/client_proofs';
import { createDebugLogger } from '@aztec/barretenberg/log';
import { OffchainDefiDepositData } from '@aztec/barretenberg/offchain_tx_data';
import { TxId } from '@aztec/barretenberg/tx_id';
import { CoreDefiTx } from '../core_tx/index.js';
import { treeNoteToNote } from '../note/index.js';
import { JoinSplitTxFactory } from './join_split_tx_factory.js';
const debug = createDebugLogger('bb:defi_deposit_proof_creator');
export class DefiDepositProofCreator {
    constructor(prover, noteAlgos, worldState, grumpkin, db) {
        this.prover = prover;
        this.noteAlgos = noteAlgos;
        this.txFactory = new JoinSplitTxFactory(noteAlgos, worldState, grumpkin, db);
    }
    async createProofInput(user, bridgeCallData, depositValue, inputNotes, spendingPublicKey) {
        const assetId = bridgeCallData.inputAssetIdA;
        const newNoteOwnerAccountRequired = !spendingPublicKey.equals(user.accountPublicKey);
        const proofInput = await this.txFactory.createTx(user, ProofId.DEFI_DEPOSIT, assetId, inputNotes, spendingPublicKey, {
            bridgeCallData,
            defiDepositValue: depositValue,
            newNoteOwner: user.accountPublicKey,
            newNoteOwnerAccountRequired,
        });
        const signingData = await this.prover.computeSigningData(proofInput.tx);
        return { ...proofInput, signingData };
    }
    async createProof({ accountPublicKey, accountPrivateKey }, { tx, signature, partialStateSecretEphPubKey, viewingKeys }, txRefNo, timeout) {
        debug('creating proof...');
        const start = new Date().getTime();
        tx.signature = signature;
        const proof = await this.prover.createProof(tx, timeout);
        debug(`created proof: ${new Date().getTime() - start}ms`);
        debug(`proof size: ${proof.length}`);
        const proofData = new ProofData(proof);
        const txId = new TxId(proofData.txId);
        const { outputNotes, claimNote: { value: depositValue, bridgeCallData, partialStateSecret }, } = tx;
        const txFee = toBigIntBE(proofData.txFee);
        const accountRequired = outputNotes[1].accountRequired;
        const partialState = this.noteAlgos.valueNotePartialCommitment(partialStateSecret, accountPublicKey, accountRequired);
        const coreTx = new CoreDefiTx(txId, accountPublicKey, bridgeCallData, depositValue, txFee, txRefNo, new Date(), partialState, partialStateSecret);
        const offchainTxData = new OffchainDefiDepositData(bridgeCallData, partialState, partialStateSecretEphPubKey, depositValue, txFee, viewingKeys[0], // contains [value, asset_id, accountRequired, creatorPubKey] of the change note (returned to the sender)
        txRefNo);
        return {
            tx: coreTx,
            proofData,
            offchainTxData,
            outputNotes: [
                treeNoteToNote(outputNotes[0], accountPrivateKey, this.noteAlgos, {
                    allowChain: proofData.allowChainFromNote1,
                }),
                treeNoteToNote(outputNotes[1], accountPrivateKey, this.noteAlgos, {
                    allowChain: proofData.allowChainFromNote2,
                }),
            ],
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmaV9kZXBvc2l0X3Byb29mX2NyZWF0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcHJvb2ZzL2RlZmlfZGVwb3NpdF9wcm9vZl9jcmVhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUUvRCxPQUFPLEVBQW1CLFNBQVMsRUFBRSxPQUFPLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUV4RixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUU1RCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUMvRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFakQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRWpELE9BQU8sRUFBUSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUV4RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUdoRSxNQUFNLEtBQUssR0FBRyxpQkFBaUIsQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO0FBRWpFLE1BQU0sT0FBTyx1QkFBdUI7SUFHbEMsWUFDVSxNQUF1QixFQUN2QixTQUF5QixFQUNqQyxVQUFzQixFQUN0QixRQUFrQixFQUNsQixFQUFZO1FBSkosV0FBTSxHQUFOLE1BQU0sQ0FBaUI7UUFDdkIsY0FBUyxHQUFULFNBQVMsQ0FBZ0I7UUFLakMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLGtCQUFrQixDQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQy9FLENBQUM7SUFFTSxLQUFLLENBQUMsZ0JBQWdCLENBQzNCLElBQWMsRUFDZCxjQUE4QixFQUM5QixZQUFvQixFQUNwQixVQUFrQixFQUNsQixpQkFBa0M7UUFFbEMsTUFBTSxPQUFPLEdB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