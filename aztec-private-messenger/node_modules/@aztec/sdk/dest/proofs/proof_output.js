import { ProofData, ProofId } from '@aztec/barretenberg/client_proofs';
import { OffchainAccountData, OffchainDefiDepositData, OffchainJoinSplitData, } from '@aztec/barretenberg/offchain_tx_data';
import { coreUserTxFromJson, coreUserTxToJson, } from '../core_tx/index.js';
import { noteFromJson, noteToJson } from '../note/index.js';
export const proofOutputToJson = ({ tx, proofData, offchainTxData, outputNotes, signature, }) => ({
    tx: coreUserTxToJson(tx),
    proofData: new Uint8Array(proofData.rawProofData),
    offchainTxData: new Uint8Array(offchainTxData.toBuffer()),
    outputNotes: outputNotes.map(n => noteToJson(n)),
    signature: signature ? new Uint8Array(signature) : undefined,
});
const offchainTxDataFromBuffer = (proofId, buf) => {
    switch (proofId) {
        case ProofId.DEPOSIT:
        case ProofId.WITHDRAW:
        case ProofId.SEND:
            return OffchainJoinSplitData.fromBuffer(buf);
        case ProofId.ACCOUNT:
            return OffchainAccountData.fromBuffer(buf);
        case ProofId.DEFI_DEPOSIT:
            return OffchainDefiDepositData.fromBuffer(buf);
        default:
            throw new Error(`Unsupported ProofOutput proofId: ${proofId}`);
    }
};
export const proofOutputFromJson = ({ tx, proofData, offchainTxData, outputNotes, signature, }) => ({
    tx: coreUserTxFromJson(tx),
    proofData: new ProofData(Buffer.from(proofData)),
    offchainTxData: offchainTxDataFromBuffer(tx.proofId, Buffer.from(offchainTxData)),
    outputNotes: outputNotes.map(n => noteFromJson(n)),
    signature: signature ? Buffer.from(signature) : undefined,
});
export const proofOutputToProofTx = ({ proofData, offchainTxData, signature }) => ({
    proofData: proofData.rawProofData,
    offchainTxData: offchainTxData.toBuffer(),
    depositSignature: signature,
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvb2Zfb3V0cHV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3Byb29mcy9wcm9vZl9vdXRwdXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUN2RSxPQUFPLEVBQ0wsbUJBQW1CLEVBQ25CLHVCQUF1QixFQUN2QixxQkFBcUIsR0FDdEIsTUFBTSxzQ0FBc0MsQ0FBQztBQUU5QyxPQUFPLEVBT0wsa0JBQWtCLEVBQ2xCLGdCQUFnQixHQUNqQixNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFBUSxZQUFZLEVBQVksVUFBVSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFrQjVFLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLENBQUMsRUFDaEMsRUFBRSxFQUNGLFNBQVMsRUFDVCxjQUFjLEVBQ2QsV0FBVyxFQUNYLFNBQVMsR0FDRyxFQUFtQixFQUFFLENBQUMsQ0FBQztJQUNuQyxFQUFFLEVBQUUsZ0JBQWdCLENBQUMsRUFBRSxDQUFDO0lBQ3hCLFNBQVMsRUFBRSxJQUFJLFVBQVUsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDO0lBQ2pELGNBQWMsRUFBRSxJQUFJLFVBQVUsQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDekQsV0FBVyxFQUFFLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDaEQsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVM7Q0FDN0QsQ0FBQyxDQUFDO0FBRUgsTUFBTSx3QkFBd0IsR0FBRyxDQUFDLE9BQWdCLEVBQUUsR0FBVyxFQUFFLEVBQUU7SUFDakUsUUFBUSxPQUFPLEVBQUU7UUFDZixLQUFLLE9BQU8sQ0FBQyxPQUFPLENBQUM7UUFDckIsS0FBSyxPQUFPLENBQUMsUUFBUSxDQUFDO1FBQ3RCLEtBQUssT0FBTyxDQUFDLElBQUk7WUFDZixPQUFPLHFCQUFxQixDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMvQyxLQUFLLE9BQU8sQ0FBQyxPQUFPO1lBQ2xCLE9BQU8sbUJBQW1CLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzdDLEtBQUssT0FBTyxDQUFDLFlBQVk7WUFDdkIsT0FBTyx1QkFBdUIsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakQ7WUFDRSxNQUFNLElBQUksS0FBSyxDQUFDLG9DQUFvQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0tBQ2xFO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxFQUNsQyxFQUFFLEVBQ0YsU0FBUyxFQUNULGNBQWMsRUFDZCxXQUFXLEVBQ1gsU0FBUyxHQUNPLEVBQWUsRUFBRSxDQUFDLENBQUM7SUFDbkMsRUFBRSxFQUFFLGtCQUFrQixDQUFDLEVBQUUsQ0FBQztJQUMxQixTQUFTLEVBQUUsSUFBSSxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNoRCxjQUFjLEVBQUUsd0JBQXdCLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ2pGLFdBQVcsRUFBRSxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xELFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVM7Q0FDMUQsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsQ0FBQyxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUUsU0FBUyxFQUFlLEVBQU0sRUFBRSxDQUFDLENBQUM7SUFDbEcsU0FBUyxFQUFFLFNBQVMsQ0FBQyxZQUFZO0lBQ2pDLGNBQWMsRUFBRSxjQUFjLENBQUMsUUFBUSxFQUFFO0lBQ3pDLGdCQUFnQixFQUFFLFNBQVM7Q0FDNUIsQ0FBQyxDQUFDIn0=