import type { L2BlockId, L2BlockSource, L2Tips } from '../l2_block_source.js';
import type { PublishedL2Block } from '../published_l2_block.js';
/** Creates a stream of events for new blocks, chain tips updates, and reorgs, out of polling an archiver or a node. */
export declare class L2BlockStream {
    private l2BlockSource;
    private localData;
    private handler;
    private readonly log;
    private opts;
    private readonly runningPromise;
    private isSyncing;
    private hasStarted;
    constructor(l2BlockSource: Pick<L2BlockSource, 'getPublishedBlocks' | 'getBlockHeader' | 'getL2Tips'>, localData: L2BlockStreamLocalDataProvider, handler: L2BlockStreamEventHandler, log?: import("@aztec/foundation/log").Logger, opts?: {
        proven?: boolean;
        pollIntervalMS?: number;
        batchSize?: number;
        startingBlock?: number;
    });
    start(): void;
    stop(): Promise<void>;
    isRunning(): boolean;
    sync(): Promise<void>;
    protected work(): Promise<void>;
    /**
     * Returns whether the source and local agree on the block hash at a given height.
     * @param blockNumber - The block number to test.
     * @param args - A cache of data already requested from source, to avoid re-requesting it.
     */
    private areBlockHashesEqualAt;
    private getBlockHashFromSource;
    private emitEvent;
}
/** Interface to the local view of the chain. Implemented by world-state and l2-tips-store. */
export interface L2BlockStreamLocalDataProvider {
    getL2BlockHash(number: number): Promise<string | undefined>;
    getL2Tips(): Promise<L2Tips>;
}
/** Interface to a handler of events emitted. */
export interface L2BlockStreamEventHandler {
    handleBlockStreamEvent(event: L2BlockStreamEvent): Promise<void>;
}
export type L2BlockStreamEvent = /** Emits blocks added to the chain. */ {
    type: 'blocks-added';
    blocks: PublishedL2Block[];
} | /** Reports last correct block (new tip of the unproven chain). */ {
    type: 'chain-pruned';
    block: L2BlockId;
} | /** Reports new proven block. */ {
    type: 'chain-proven';
    block: L2BlockId;
} | /** Reports new finalized block (proven and finalized on L1). */ {
    type: 'chain-finalized';
    block: L2BlockId;
};
//# sourceMappingURL=l2_block_stream.d.ts.map