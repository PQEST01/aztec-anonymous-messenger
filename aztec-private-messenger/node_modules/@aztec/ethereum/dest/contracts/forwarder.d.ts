import type { Logger } from '@aztec/foundation/log';
import { type Hex } from 'viem';
import type { L1BlobInputs, L1GasConfig, L1TxRequest, L1TxUtils } from '../l1_tx_utils.js';
import type { L1Clients, ViemPublicClient, ViemWalletClient } from '../types.js';
export declare class ForwarderContract {
    readonly client: L1Clients['publicClient'];
    readonly rollupAddress: Hex;
    private readonly forwarder;
    constructor(client: L1Clients['publicClient'], address: Hex, rollupAddress: Hex);
    static expectedAddress(owner: Hex): `0x${string}`;
    static create(owner: Hex, walletClient: ViemWalletClient, publicClient: ViemPublicClient, logger: Logger, rollupAddress: Hex): Promise<ForwarderContract>;
    getAddress(): `0x${string}`;
    forward(requests: L1TxRequest[], l1TxUtils: L1TxUtils, gasConfig: L1GasConfig | undefined, blobConfig: L1BlobInputs | undefined, logger: Logger): Promise<{
        receipt: import("viem").TransactionReceipt;
        gasPrice: import("../l1_tx_utils.js").GasPrice;
        stats: import("../l1_tx_utils.js").TransactionStats | undefined;
        errorMsg?: undefined;
    } | {
        receipt: import("viem").TransactionReceipt;
        gasPrice: import("../l1_tx_utils.js").GasPrice;
        errorMsg: string | undefined;
        stats?: undefined;
    }>;
}
//# sourceMappingURL=forwarder.d.ts.map