import { EthAddress } from '@aztec/foundation/eth-address';
import type { Logger } from '@aztec/foundation/log';
import { type Hex, type Log } from 'viem';
import type { L1ContractAddresses } from '../l1_contract_addresses.js';
import type { ViemPublicClient, ViemWalletClient } from '../types.js';
export type L1GovernanceContractAddresses = Pick<L1ContractAddresses, 'governanceAddress' | 'rollupAddress' | 'registryAddress' | 'governanceProposerAddress'>;
export declare enum ProposalState {
    Pending = 0,
    Active = 1,
    Queued = 2,
    Executable = 3,
    Rejected = 4,
    Executed = 5,
    Dropped = 6,
    Expired = 7
}
export declare function extractProposalIdFromLogs(logs: Log[]): bigint;
export declare class GovernanceContract {
    readonly publicClient: ViemPublicClient;
    readonly walletClient: ViemWalletClient | undefined;
    private readonly publicGovernance;
    private readonly walletGovernance;
    constructor(address: Hex, publicClient: ViemPublicClient, walletClient: ViemWalletClient | undefined);
    get address(): EthAddress;
    getGovernanceProposerAddress(): Promise<EthAddress>;
    getConfiguration(): Promise<{
        proposeConfig: {
            lockDelay: bigint;
            lockAmount: bigint;
        };
        votingDelay: bigint;
        votingDuration: bigint;
        executionDelay: bigint;
        gracePeriod: bigint;
        quorum: bigint;
        voteDifferential: bigint;
        minimumVotes: bigint;
    }>;
    getProposal(proposalId: bigint): Promise<{
        config: {
            proposeConfig: {
                lockDelay: bigint;
                lockAmount: bigint;
            };
            votingDelay: bigint;
            votingDuration: bigint;
            executionDelay: bigint;
            gracePeriod: bigint;
            quorum: bigint;
            voteDifferential: bigint;
            minimumVotes: bigint;
        };
        state: number;
        payload: `0x${string}`;
        governanceProposer: `0x${string}`;
        creation: bigint;
        summedBallot: {
            yea: bigint;
            nea: bigint;
        };
    }>;
    getProposalState(proposalId: bigint): Promise<ProposalState>;
    private assertWalletGovernance;
    deposit(onBehalfOf: Hex, amount: bigint): Promise<void>;
    proposeWithLock({ payloadAddress, withdrawAddress, }: {
        payloadAddress: Hex;
        withdrawAddress: Hex;
    }): Promise<bigint>;
    awaitProposalActive({ proposalId, logger }: {
        proposalId: bigint;
        logger: Logger;
    }): Promise<void>;
    awaitProposalExecutable({ proposalId, logger }: {
        proposalId: bigint;
        logger: Logger;
    }): Promise<void>;
    getPower(): Promise<bigint>;
    vote({ proposalId, voteAmount, inFavor, retries, logger, }: {
        proposalId: bigint;
        voteAmount: bigint | undefined;
        inFavor: boolean;
        retries: number;
        logger: Logger;
    }): Promise<void>;
    executeProposal({ proposalId, retries, logger, }: {
        proposalId: bigint;
        retries: number;
        logger: Logger;
    }): Promise<void>;
}
//# sourceMappingURL=governance.d.ts.map