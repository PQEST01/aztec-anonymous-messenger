{
  "transpiled": true,
  "noir_version": "1.0.0-beta.3+0000000000000000000000000000000000000000",
  "name": "ContractClassRegisterer",
  "functions": [
    {
      "name": "assert_class_id_is_registered",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "contract_class_id",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::contract_class_id::ContractClassId",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "7ZXNboQgFIXfhbULLn+Cr9I0E39wQmLUoDZpzLx7GQPFtthZTTILd/dyP+45OSxYUaOr5XoxfTtMqHhbUTfU5WyG3nUrArqdTWPZ39tpLu2MCsJZniHdN64UQG4Zak2nUQGE3rK/NGE40EREWrEETLHiHqYg5P8wcMWZp129w4mElBMgIjgBxiOtZGo7FTQsZ4B/0O8ZAnZGcxQNP6M5ikac0RxFkyejYRJiNPRBNAyE8jQjOBoS+aYgn66gUgoqV9LfUZJGBZ5MCdNvBVdLsZdIPUGu4htI8tsRwa/lyDWVNV1nrpf9T+OOP0pryqrTvm2Xvt5N588xTML90Q61bhar75u2mVv/BQ==",
      "brillig_names": [],
      "verification_key": "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"
    },
    {
      "name": "broadcast_private_function",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "contract_class_id",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::contract_class_id::ContractClassId",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "artifact_metadata_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "unconstrained_functions_artifact_tree_root",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "private_function_tree_sibling_path",
            "type": {
              "kind": "array",
              "length": 5,
              "type": {
                "kind": "field"
              }
            },
            "visibility": "private"
          },
          {
            "name": "private_function_tree_leaf_index",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "artifact_function_tree_sibling_path",
            "type": {
              "kind": "array",
              "length": 5,
              "type": {
                "kind": "field"
              }
            },
            "visibility": "private"
          },
          {
            "name": "artifact_function_tree_leaf_index",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "function_data",
            "type": {
              "kind": "struct",
              "path": "events::private_function_broadcasted::InnerPrivateFunction",
              "fields": [
                {
                  "name": "selector",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "metadata_hash",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "vk_hash",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "load",
        "debug_log_oracle_wrapper",
        "unsafe_padded_array_length",
        "notify_created_contract_class_log"
      ],
      "verification_key": "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"
    },
    {
      "name": "sync_notes",
      "is_unconstrained": true,
      "custom_attributes": [
        "aztec::macros::functions::utility"
      ],
      "abi": {
        "parameters": [],
        "return_type": null,
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2588366281349374274": {
            "error_kind": "fmtstring",
            "length": 136,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "3473764466780631008": {
            "error_kind": "fmtstring",
            "length": 106,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5533887251808526417": {
            "error_kind": "fmtstring",
            "length": 120,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16775516380094354375": {
            "error_kind": "fmtstring",
            "length": 40,
            "item_types": []
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "sync_notes"
      ]
    },
    {
      "name": "register",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "artifact_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "private_functions_root",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "public_bytecode_commitment",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "load",
        "notify_created_nullifier_oracle_wrapper",
        "debug_log_oracle_wrapper",
        "unsafe_padded_array_length",
        "notify_created_contract_class_log",
        "directive_integer_quotient",
        "directive_invert"
      ],
      "verification_key": "AAAAAAAIAAAAAAAAAAAAEwAAAAAAAAAQAAAAAAAAVgkBAAAAAAAAAAEAAAACAAAAAwAAAAQAAAAFAAAABgAAAAcAAAAIAAAACQAAAAoAAAALAAAADAAAAA0AAAAOAAAADwAAAAAAAAAAAAAACZsHNiqRdNmCqbCEO+GRHmG8oSo9ljzBBq33jdm1csABC/LlQoQ8b+ybjvi7PtY4dsnEDiOQgv9SMFpHUF+ogQ78i/6hYtpodHimuPsTTaMVuYMWlYCX1OmRbXvv+vaCG1M7+cDpofDhvVJLXpqfAu3KevZMG+xOBeR9tPhDFWEDxl6Rabdnc0yfyZm6OMqPKiCJvA/zxR+7NW29uV13VRDWgP1MzWSpqcv/N4roHrllPz3+aJuLSeZzuHnDjsagB7bmjXUyW5hv1/ivj/IcApdLEH5QhIryPgLSje5JRhkWGaVb6c7o3ajsuQ8M7oVtIYTeInoNBDGShTgjLMRu1AO4md3AWwdw1u9oUkbB62ZozV7YNy+wsJ41jHCwW8JoLJ8Sv6huamC1heHGUzyli9WhMiMAM/OnaoluEkuDJSMqdIlDtrsJQjEGOSILdbVuYldQ8wFpdJcBxitUjXpadRaV35h9A26Zpa1wtyJFNaLnFFLPAEur509VwvLak2pvIuSmLVifXcWOAD4X0sKeZqqcjXq3WBuYEO2nPlPhfd8OP4PTyf+mJHwLpRXOLm9SrLCVbfb6d5ltuCSwof5icCmMMxH8kXD5LelAsEKquZDVPGo7JjOc2mtz35IIMUFZB7BfQIphKEclkBa5IErkvzdTfrGWsFwdmPpRAWqbrLsFUgq9PgDples0Wk4AowT3HtzBojDmiLc47Sfe5MkVkyY+ZvIESwe8t9aCUUsEvHiXxqCMdD8jo9QcUCIs31pPCCM2vsTUhKFfY8IY8xvNxUgwD/CXkpOwfMklkcPUPYIe8BiXHnI2bqb0WGpYlgj8Os82tDaUFWEXNuGRRPUVgiHrSJuRmKhkLL92LlSOA5ve52T8+85x9jwkt2+sZv9oEf1BtfmTbZMquuTG6TPg05wk6o4uDu5wKlMm81nJR8ALK0d7qPu4eemRvD4bP47YIaa+8G6YCH0ZiWhg09tSXw5tJXTI2qxjVV6qDUcFC5rRDkzSJHe2Gtcb3eZxFXmfENYXlxZPmkhDuoctlff9kUwCFDGeaZAoMq65nXUdYrAcKn0ob4olbQ9s2e4/W+nKtDfeH/pdQNu6zpq0VpZHICfinIiR4FbphzHXnXZMG4NUJqXwwWCzouyxtIMFxEUnLeXow/hq4TzPIVkHNOG60B9xfhgIWEHmOVNI/rwdFMMSzgDtASYvmB8UDc1yYSOLV+eWtga3s90xYqerr9MPbQJsRDia6H7X864a7ImYJr+OBUM6z9vYLLaHz1IR4IuYJlifBoBmiCU+fkri6VBWAnXU+3fYm0TbSvQsBwrc1BMd3PNAY5/ZwWge8MRZb4SHZqvyMdHn650arjDxNZE71CUDRwjjOaICkIGSiOaczcLcdfrCWPvrofmu2Jvcd91xDqszCgjMSHAQlrhNrFWtGoQlL1VJW7RCisxdXPUyUy4W6n0DbRl0VBYYoVSaR1w8wkYIlc5LrV39MygXQ0LRSxeX40Zw2og8xTmiQWf9AjZcm1+Kg+9YJ3ENCfZuwKr5GN4yxyze/mjCdAPbk83Fbfs1NMDhyo/hl7JNjAa/0rYNZvhjU+JYdeDa6gqw4zTEIoOIi1/z/A6z3H+JyFoI5QLb99Ez64GLfaGz7nl803AcUVwhOnz/MSxGDZt9kgrIAaoUeNku0LoZEziQYkc43XZ/b5sR0RhrD8WuTKo1o/MBvxJDGDy0fRaBzlJkx+aDTbGGGyIiRxqd1uVU05JCJS0Lpatznix6NlmVZm/detPKL9Sv8ElsQwBU270X8kb1IX8tN5CNekWxYnGglmkrlaqCLZQXLb896aJ1wwCIGRIcDQm56CnW8lAqmhQozmb5QMmVsF7CxuV+F7jwwpXkfwrcicSNdbVxY29bvrSoBvb0WWICMBtq5OsOu+rdIDNABm8oE1dI8RljHD/gf6nXAANOPidFTvmStL+EuXuqdHEuJXg1Ud9QwATsfNH03Ys7ZKZvKsSXm2XlZWjFoxsU7Rj3bPDO7MtHmN50GuibZOglj4RHfBtiVlpVm6e7OIMuLSmftoZ40BULzFsW3IJSNT1D+nDpkjnBwcZ+JxoO6sUV06xaGZq7dJM6TvyYxZsoFO3nzSfa7QDDPBKGC8SwRi041tS6Hkdjp07NsRyh80aWgMJw5VFRU0RZL1kYj6dlEts56JKCazJhDuCCUeAF/OkXwNXcoBlHfFL2B1MythIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACA8MUQTLtn9a8CsAQI3HEJVXH108pO9Ib0WXzz+72YP4hA9GO58oMj1sjV2zL/Y4FnmVSuxtvKptP8/OlsZCpfQDENyb3W2/aDeIs4ODfq2vMegX/lalrKJQkxfczZw2WL5tuC04sAZaN5cMkgqp9HQoJ1xeOyTuteFj5bmTwtI0Yx9fnPbrJvJUf+wMEiu793Dk/CafQMc0yN4/5DxvjJCzmrNEh5iNYa21VdtY3uxBEsskiA7JJ/wR5mH1uGbJH"
    },
    {
      "name": "broadcast_unconstrained_function",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "contract_class_id",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::contract_class_id::ContractClassId",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "artifact_metadata_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "private_functions_artifact_tree_root",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "artifact_function_tree_sibling_path",
            "type": {
              "kind": "array",
              "length": 5,
              "type": {
                "kind": "field"
              }
            },
            "visibility": "private"
          },
          {
            "name": "artifact_function_tree_leaf_index",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "function_data",
            "type": {
              "kind": "struct",
              "path": "events::unconstrained_function_broadcasted::InnerUnconstrainedFunction",
              "fields": [
                {
                  "name": "selector",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "metadata_hash",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "load",
        "debug_log_oracle_wrapper",
        "unsafe_padded_array_length",
        "notify_created_contract_class_log"
      ],
      "verification_key": "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"
    },
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "1752556835457866331": {
            "error_kind": "string",
            "string": "No public functions"
          }
        }
      },
      "bytecode": "JwAABAEqAAABBRhSVSgKJhpbPAABAA==",
      "debug_symbols": "XYxLCoAwDAXvkrUn8Coi0k9aAqEpsRWk9O5+cCFdzhveNPBoa9woBdlhXhqwOFNI0k2tT2CVmCluw3wYJWMZPww1uZ8tZ8bhn1Uc+qr4lF7X134B",
      "brillig_names": [
        "public_dispatch"
      ]
    }
  ],
  "outputs": {
    "globals": {},
    "structs": {
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "artifact_hash",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "private_functions_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_bytecode_commitment",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "ContractClassRegisterer::register_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "ContractClassRegisterer::register_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "contract_class_id",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::contract_class_id::ContractClassId"
                    }
                  },
                  {
                    "name": "artifact_metadata_hash",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "unconstrained_functions_artifact_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "private_function_tree_sibling_path",
                    "type": {
                      "kind": "array",
                      "length": 5,
                      "type": {
                        "kind": "field"
                      }
                    }
                  },
                  {
                    "name": "private_function_tree_leaf_index",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "artifact_function_tree_sibling_path",
                    "type": {
                      "kind": "array",
                      "length": 5,
                      "type": {
                        "kind": "field"
                      }
                    }
                  },
                  {
                    "name": "artifact_function_tree_leaf_index",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_data",
                    "type": {
                      "fields": [
                        {
                          "name": "selector",
                          "type": {
                            "fields": [
                              {
                                "name": "inner",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 32
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "aztec::protocol_types::abis::function_selector::FunctionSelector"
                          }
                        },
                        {
                          "name": "metadata_hash",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "vk_hash",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "events::private_function_broadcasted::InnerPrivateFunction"
                    }
                  }
                ],
                "kind": "struct",
                "path": "ContractClassRegisterer::broadcast_private_function_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "ContractClassRegisterer::broadcast_private_function_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "contract_class_id",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::contract_class_id::ContractClassId"
                    }
                  },
                  {
                    "name": "artifact_metadata_hash",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "private_functions_artifact_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "artifact_function_tree_sibling_path",
                    "type": {
                      "kind": "array",
                      "length": 5,
                      "type": {
                        "kind": "field"
                      }
                    }
                  },
                  {
                    "name": "artifact_function_tree_leaf_index",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_data",
                    "type": {
                      "fields": [
                        {
                          "name": "selector",
                          "type": {
                            "fields": [
                              {
                                "name": "inner",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 32
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "aztec::protocol_types::abis::function_selector::FunctionSelector"
                          }
                        },
                        {
                          "name": "metadata_hash",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "events::unconstrained_function_broadcasted::InnerUnconstrainedFunction"
                    }
                  }
                ],
                "kind": "struct",
                "path": "ContractClassRegisterer::broadcast_unconstrained_function_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "ContractClassRegisterer::broadcast_unconstrained_function_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "contract_class_id",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::contract_class_id::ContractClassId"
                    }
                  }
                ],
                "kind": "struct",
                "path": "ContractClassRegisterer::assert_class_id_is_registered_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "ContractClassRegisterer::assert_class_id_is_registered_abi"
        }
      ]
    }
  },
  "file_map": {
    "115": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/macros/aztec.nr",
      "source": "use crate::{\n    discovery::private_notes::MAX_NOTE_PACKED_LEN,\n    macros::{\n        dispatch::generate_public_dispatch,\n        functions::{\n            stub_registry,\n            utils::{check_each_fn_macroified, create_message_discovery_call},\n        },\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_notes` utility function PXE requires in order to discover notes.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_notes = generate_sync_notes();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_notes\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(nonce).into() \n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                nonce: Field,\n            ) -> Option<aztec::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_notes() -> Quoted {\n    let message_discovery_call = create_message_discovery_call();\n\n    // TODO(https://github.com/noir-lang/noir/issues/7912): Doing the following unfortunately doesn't work. Once\n    // the issue is fixed uncomment the following and remove the workaround from TS (look for the issue link in the\n    // codebase).\n    // let utility: fn(FunctionDefinition) -> () = crate::macros::functions::utility;\n    // quote {\n    //     #[$utility]\n    //     unconstrained fn sync_notes() {\n    //         $message_discovery_call\n    //     }\n    // }\n\n    quote {\n        #[aztec::macros::functions::utility]\n        unconstrained fn sync_notes() {\n            $message_discovery_call\n        }\n    }\n}\n"
    },
    "123": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr",
      "source": "use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, &[], false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n"
    },
    "145": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr",
      "source": "use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n"
    },
    "147": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "156": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/logs.nr",
      "source": "use crate::discovery::MAX_LOG_CONTENT_LEN;\nuse protocol_types::{abis::event_selector::EventSelector, address::AztecAddress};\n\n/// The below only exists to broadcast the raw log, so we can provide it to the base rollup later to be constrained.\npub unconstrained fn notify_created_contract_class_log<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {\n    notify_created_contract_class_log_private_oracle(contract_address, message, counter)\n}\n\n#[oracle(notifyCreatedContractClassLog)]\nunconstrained fn notify_created_contract_class_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {}\n\npub unconstrained fn store_private_event_log(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    log_content: BoundedVec<Field, MAX_LOG_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n) {\n    store_private_event_log_oracle(\n        contract_address,\n        recipient,\n        event_selector,\n        log_content,\n        tx_hash,\n        log_index_in_tx,\n    )\n}\n\n#[oracle(storePrivateEventLog)]\nunconstrained fn store_private_event_log_oracle(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    log_content: BoundedVec<Field, MAX_LOG_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n) {}\n"
    },
    "157": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/message_discovery.nr",
      "source": "use crate::discovery::private_notes::MAX_NOTE_PACKED_LEN;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PUBLIC_LOG_DATA_SIZE_IN_FIELDS},\n};\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn sync_notes(pending_tagged_log_array_base_slot: Field) {\n    sync_notes_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n/// Informs PXE of a note's existence so that it can later be retrieved by the `getNotes` oracle. The note will be\n/// scoped to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The packed note is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was successfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        packed_note,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n/// The contents of a public log, plus contextual information about the transaction in which the log was emitted. This\n/// is the data required in order to discover notes that are being delivered in a log.\n// TODO(#11639): this could also be used to fetch private logs, but the `BoundedVec` maximum length is that of a public\n// log.\npub struct LogWithTxData {\n    pub log_content: BoundedVec<Field, PUBLIC_LOG_DATA_SIZE_IN_FIELDS>,\n    pub tx_hash: Field,\n    /// The array of new note hashes created by `tx_hash`\n    pub unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    /// The first nullifier created by `tx_hash`\n    pub first_nullifier_in_tx: Field,\n}\n\n/// Fetches a log from the node that has the corresponding `tag`. The log can be either a public or a private log, and\n/// the tag is the first field in the log's content. Returns `Option::none` if no such log exists. Throws if more than\n/// one log with that tag exists.\n/// Public logs have an extra field included at the beginning with the address of the contract that emitted them.\n// TODO(#11627): handle multiple logs with the same tag.\n// TODO(#10273): improve contract siloing of logs, don't introduce an extra field.\npub unconstrained fn get_log_by_tag(tag: Field) -> Option<LogWithTxData> {\n    get_log_by_tag_oracle(tag)\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n\n#[oracle(getLogByTag)]\nunconstrained fn get_log_by_tag_oracle(tag: Field) -> Option<LogWithTxData> {}\n"
    },
    "159": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/notes.nr",
      "source": "use crate::{\n    note::{note_interface::NoteType, note_metadata::NoteMetadata, retrieved_note::RetrievedNote},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::IndexedTaggingSecret,\n    traits::{FromField, Packable},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_created_note_oracle(storage_slot, note_type_id, packed_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {\n    // This wrapper exists to extract the ORACLE_RETURN_FIELD_LENGTH generic numeric param into a value and pass it to\n    // the oracle, so that it knows how big the return array must be.\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        ORACLE_RETURN_FIELD_LENGTH,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let MAX_NOTES: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    _placeholder_fields: [Field; ORACLE_RETURN_FIELD_LENGTH], // TODO: Compute this value automatically from MAX_NOTES\n) -> [Option<RetrievedNote<Note>>; MAX_NOTES]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let fields: [_; ORACLE_RETURN_FIELD_LENGTH] = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n\n    let mut opt_notes = [Option::none(); MAX_NOTES];\n    for i in 0..opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let maybe_nonce = fields[read_offset];\n            let maybe_note_hash_counter = fields[read_offset + 1] as u32;\n            let packed_note = array::subarray(fields, read_offset + 2);\n\n            let note = Note::unpack(packed_note);\n            let retrieved_note = RetrievedNote {\n                note,\n                contract_address,\n                metadata: NoteMetadata::from_raw_data(maybe_note_hash_counter != 0, maybe_nonce),\n            };\n\n            opt_notes[i] = Option::some(retrieved_note);\n        };\n    }\n    opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier)\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> bool {}\n\n/// Returns the derived app tagging secret ready to be included in a log for a given sender and recipient pair,\n/// siloed for the current contract address.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender_oracle(sender, recipient).compute_tag(recipient)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> IndexedTaggingSecret {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n"
    },
    "161": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr",
      "source": "use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n"
    },
    "17": {
      "path": "std/field/bn254.nr",
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
    },
    "18": {
      "path": "std/field/mod.nr",
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
    },
    "187": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/utils/array/append.nr",
      "source": "/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n"
    },
    "189": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/utils/array/mod.nr",
      "source": "pub mod append;\npub mod collapse;\npub mod subarray;\npub mod subbvec;\n\npub use append::append;\npub use collapse::collapse;\npub use subarray::subarray;\npub use subbvec::subbvec;\n\n// This will eventually be replaced by `BoundedVec::for_each`, once that's implemented.\npub unconstrained fn for_each_in_bounded_vec<T, let MaxLen: u32, Env>(\n    vec: BoundedVec<T, MaxLen>,\n    f: fn[Env](T, u32) -> (),\n) {\n    for i in 0..vec.len() {\n        f(vec.get_unchecked(i), i);\n    }\n}\n"
    },
    "190": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr",
      "source": "/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n"
    },
    "191": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr",
      "source": "use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n"
    },
    "193": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr",
      "source": "use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n"
    },
    "194": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr",
      "source": "// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n"
    },
    "196": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/utils/field.nr",
      "source": "use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n"
    },
    "198": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/utils/point.nr",
      "source": "use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n"
    },
    "218": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/abis/event_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"
    },
    "24": {
      "path": "std/hash/poseidon2.nr",
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "272": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/contract_class_id.nr",
      "source": "use crate::constants::GENERATOR_INDEX__CONTRACT_LEAF;\nuse crate::traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField};\n\npub struct ContractClassId {\n    pub inner: Field,\n}\n\nimpl Eq for ContractClassId {\n    fn eq(self, other: ContractClassId) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl ToField for ContractClassId {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for ContractClassId {\n    fn from_field(value: Field) -> Self {\n        Self { inner: value }\n    }\n}\n\nimpl Serialize<1> for ContractClassId {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<1> for ContractClassId {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] }\n    }\n}\n\nimpl Empty for ContractClassId {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n// Implement the Packable trait so ContractClassId can be stored in contract's storage.\nimpl Packable<1> for ContractClassId {\n    fn pack(self) -> [Field; 1] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; 1]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl ContractClassId {\n    pub fn compute(\n        artifact_hash: Field,\n        private_functions_root: Field,\n        public_bytecode_commitment: Field,\n    ) -> Self {\n        let hash = crate::hash::poseidon2_hash_with_separator(\n            [artifact_hash, private_functions_root, public_bytecode_commitment],\n            GENERATOR_INDEX__CONTRACT_LEAF,\n        ); // TODO(@spalladino): Update generator index\n        ContractClassId::from_field(hash)\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"
    },
    "280": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr",
      "source": "/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"
    },
    "281": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"
    },
    "295": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr",
      "source": "use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `omit`: A list of field names (as `Quoted`) to be excluded from the serialized output.\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, &[], false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, &[], false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], &[], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, &[], false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with Omitted Field and packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// Serializing while omitting `value2`:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, MyStruct, &[quote { self.value2 }], true)\n/// // Returns:\n/// // ([`value_packed[0]`], [`let value_packed = self.value.pack()`])\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    omit: [Quoted],\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // Proceed if none of the omit rules omits this name\n    if !omit.any(|to_omit| to_omit == name) {\n        // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n        let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n        let packable_constraint =\n            quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n        if (should_pack & typ.implements(packable_constraint)) {\n            // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n            // method, add the resulting field array to `aux_vars` and each field to `fields`.\n            let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n            // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n            let name_at_one_token = collapse_to_one_token(name);\n            let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n            // We add the individual fields to the fields array\n            let pack_method = get_trait_impl_method(\n                typ,\n                quote { crate::traits::Packable<$packed_len> },\n                quote { pack },\n            );\n            let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n            for i in 0..packed_len {\n                fields = fields.push_back(quote { $packed_struct_name[$i] });\n            }\n\n            // We add the new auxiliary variable to the aux_vars array\n            aux_vars = aux_vars.push_back(packed_struct);\n        } else if typ.is_field() {\n            // For field we just add the value to fields\n            fields = fields.push_back(name);\n        } else if typ.as_integer().is_some() | typ.is_bool() {\n            // For integer and bool we just cast to Field and add the value to fields\n            fields = fields.push_back(quote { $name as Field });\n        } else if typ.as_data_type().is_some() {\n            // For struct we pref\n            let nested_struct = typ.as_data_type().unwrap();\n            let params = nested_struct.0.fields(nested_struct.1);\n            let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {\n                let maybe_prefixed_name = if name == quote {} {\n                    // Triggered when the param name is of a value available in the current scope (e.g. a function\n                    // argument) --> then we don't prefix the name with anything.\n                    param_name\n                } else {\n                    // Triggered when we want to prefix the param name with the `name` from function input. This\n                    // can typically be `self` when implementing a method on a struct.\n                    quote { $name.$param_name }\n                };\n                generate_serialize_to_fields(\n                    quote {$maybe_prefixed_name},\n                    param_type,\n                    omit,\n                    should_pack,\n                )\n            });\n            let struct_flattened_fields = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n            );\n            let struct_flattened_aux_vars = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n            );\n            fields = fields.append(struct_flattened_fields);\n            aux_vars = aux_vars.append(struct_flattened_aux_vars);\n        } else if typ.as_array().is_some() {\n            // For array we recursively call `generate_serialize_to_fields(...)` for each element\n            let (element_type, array_len) = typ.as_array().unwrap();\n            let array_len = array_len.as_constant().unwrap();\n            for i in 0..array_len {\n                let (element_fields, element_aux_vars) = generate_serialize_to_fields(\n                    quote { $name[$i] },\n                    element_type,\n                    omit,\n                    should_pack,\n                );\n                fields = fields.append(element_fields);\n                aux_vars = aux_vars.append(element_aux_vars);\n            }\n        } else if typ.as_str().is_some() {\n            // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n            // then we add each byte to fields as a Field\n            let length_type = typ.as_str().unwrap();\n            let str_len = length_type.as_constant().unwrap();\n            let as_member = name.as_expr().unwrap().as_member_access();\n            let var_name = if as_member.is_some() {\n                as_member.unwrap().1\n            } else {\n                name\n            };\n            let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n            let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n            for i in 0..str_len {\n                fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n            }\n            aux_vars = aux_vars.push_back(as_bytes);\n        } else {\n            panic(\n                f\"Unsupported type for serialization of argument {name} and type {typ}\",\n            )\n        }\n    }\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub(crate) comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    quote {\n        impl Serialize<$serialized_len> for $typ {\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) =\n        generate_serialize_to_fields(quote { self }, typ, &[], packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n"
    },
    "298": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
      "source": "use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
    },
    "332": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr",
      "source": "use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n}\n\nimpl<T> Empty for Option<T> {\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n"
    },
    "337": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"
    },
    "353": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr",
      "source": "pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n"
    },
    "356": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "362": {
      "path": "/home/aztec-dev/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr",
      "source": "use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n"
    },
    "46": {
      "path": "std/option.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"
    },
    "47": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "5": {
      "path": "std/cmp.nr",
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n"
    },
    "58": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-contracts/contracts/contract_class_registerer_contract/src/main.nr",
      "source": "mod events;\n\nuse dep::aztec::macros::aztec;\n\n#[aztec]\npub contract ContractClassRegisterer {\n    use dep::aztec::protocol_types::{\n        abis::log_hash::LogHash,\n        constants::{\n            ARTIFACT_FUNCTION_TREE_MAX_HEIGHT, CONTRACT_CLASS_LOG_DATA_SIZE_IN_FIELDS,\n            FUNCTION_TREE_HEIGHT, MAX_PACKED_BYTECODE_SIZE_PER_PRIVATE_FUNCTION_IN_FIELDS,\n            MAX_PACKED_BYTECODE_SIZE_PER_UNCONSTRAINED_FUNCTION_IN_FIELDS,\n            MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS, REGISTERER_CONTRACT_BYTECODE_CAPSULE_SLOT,\n        },\n        contract_class_id::ContractClassId,\n        hash::poseidon2_hash,\n        utils::arrays::{array_concat, unsafe_padded_array_length},\n    };\n\n    use dep::aztec::{\n        context::PrivateContext, macros::functions::private,\n        oracle::logs::notify_created_contract_class_log,\n    };\n\n    use crate::events::{\n        class_registered::ContractClassRegistered,\n        private_function_broadcasted::{\n            ClassPrivateFunctionBroadcasted, InnerPrivateFunction, PrivateFunction,\n        },\n        unconstrained_function_broadcasted::{\n            ClassUnconstrainedFunctionBroadcasted, InnerUnconstrainedFunction,\n            UnconstrainedFunction,\n        },\n    };\n\n    use dep::aztec::protocol_types::traits::ToField;\n\n    // docs:start:import_capsules\n    use dep::aztec::oracle::capsules;\n    // docs:end:import_capsules\n\n    #[private]\n    fn register(\n        artifact_hash: Field,\n        private_functions_root: Field,\n        public_bytecode_commitment: Field,\n    ) {\n        // TODO: Validate public_bytecode_commitment is the correct commitment of packed_public_bytecode\n        // TODO: We should be able to remove public_bytecode_commitment from the input if it's calculated in this function\n        // docs:start:load_capsule\n        let packed_public_bytecode: [Field; MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS] = unsafe {\n            capsules::load(\n                context.this_address(),\n                REGISTERER_CONTRACT_BYTECODE_CAPSULE_SLOT,\n            )\n                .unwrap()\n        };\n        // docs:end:load_capsule\n        // First field element contains the length of the bytecode\n        let bytecode_length_in_bytes: u32 = packed_public_bytecode[0] as u32;\n        let bytecode_length_in_fields: u32 =\n            (bytecode_length_in_bytes / 31) + (bytecode_length_in_bytes % 31 != 0) as u32;\n        // We don't allow registering classes with empty public bytecode.\n        // Since the AVM doesn't handle execution of empty bytecode at the moment.\n        assert(bytecode_length_in_fields != 0);\n        assert(bytecode_length_in_fields < MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS);\n\n        // The first value in the running hash is the bytecode length in bytes\n        let mut computed_public_bytecode_commitment = packed_public_bytecode[0];\n        // We can hash up to MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS - 1, since the first element is the length\n        for i in 0..(MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS - 1) {\n            // While we are forced to run the hash MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS times in the circuit,\n            // we want the bytecode commitment to be based on the actual length\n            if (i < bytecode_length_in_fields) {\n                // We skip the first element when hashing since it is the length\n                computed_public_bytecode_commitment = std::hash::poseidon2::Poseidon2::hash(\n                    [packed_public_bytecode[i + 1], computed_public_bytecode_commitment],\n                    2,\n                );\n            } else {\n                // Any bytes after the bytecode length must be 0\n                assert_eq(packed_public_bytecode[i + 1], 0);\n            }\n        }\n        assert_eq(computed_public_bytecode_commitment, public_bytecode_commitment);\n\n        // Compute contract class id from preimage\n        let contract_class_id = ContractClassId::compute(\n            artifact_hash,\n            private_functions_root,\n            public_bytecode_commitment,\n        );\n\n        // Emit the contract class id as a nullifier to be able to prove that this class has been (not) registered\n        context.push_nullifier(contract_class_id.to_field());\n\n        // Broadcast class info including public bytecode\n        dep::aztec::oracle::debug_log::debug_log_format(\n            \"ContractClassRegistered: {}\",\n            [\n                contract_class_id.to_field(),\n                artifact_hash,\n                private_functions_root,\n                public_bytecode_commitment,\n            ],\n        );\n\n        let event = ContractClassRegistered {\n            contract_class_id,\n            version: 1,\n            artifact_hash,\n            private_functions_root,\n            packed_public_bytecode,\n        };\n        emit_contract_class_log(&mut context, event.serialize_non_standard());\n    }\n\n    #[private]\n    fn broadcast_private_function(\n        contract_class_id: ContractClassId,\n        artifact_metadata_hash: Field,\n        unconstrained_functions_artifact_tree_root: Field,\n        private_function_tree_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n        private_function_tree_leaf_index: Field,\n        artifact_function_tree_sibling_path: [Field; ARTIFACT_FUNCTION_TREE_MAX_HEIGHT],\n        artifact_function_tree_leaf_index: Field,\n        function_data: InnerPrivateFunction,\n    ) {\n        let private_bytecode: [Field; MAX_PACKED_BYTECODE_SIZE_PER_PRIVATE_FUNCTION_IN_FIELDS] = unsafe {\n            capsules::load(\n                context.this_address(),\n                REGISTERER_CONTRACT_BYTECODE_CAPSULE_SLOT,\n            )\n                .unwrap()\n        };\n\n        let event = ClassPrivateFunctionBroadcasted {\n            contract_class_id,\n            artifact_metadata_hash,\n            unconstrained_functions_artifact_tree_root,\n            private_function_tree_sibling_path,\n            private_function_tree_leaf_index,\n            artifact_function_tree_sibling_path,\n            artifact_function_tree_leaf_index,\n            function: PrivateFunction {\n                selector: function_data.selector,\n                metadata_hash: function_data.metadata_hash,\n                vk_hash: function_data.vk_hash,\n                bytecode: private_bytecode,\n            },\n        };\n        dep::aztec::oracle::debug_log::debug_log_format(\n            \"ClassPrivateFunctionBroadcasted: {}\",\n            [\n                contract_class_id.to_field(),\n                artifact_metadata_hash,\n                unconstrained_functions_artifact_tree_root,\n                function_data.selector.to_field(),\n                function_data.vk_hash,\n                function_data.metadata_hash,\n            ],\n        );\n        emit_contract_class_log(&mut context, event.serialize_non_standard());\n    }\n\n    #[private]\n    fn broadcast_unconstrained_function(\n        contract_class_id: ContractClassId,\n        artifact_metadata_hash: Field,\n        private_functions_artifact_tree_root: Field,\n        artifact_function_tree_sibling_path: [Field; ARTIFACT_FUNCTION_TREE_MAX_HEIGHT],\n        artifact_function_tree_leaf_index: Field,\n        function_data: InnerUnconstrainedFunction,\n    ) {\n        let unconstrained_bytecode: [Field; MAX_PACKED_BYTECODE_SIZE_PER_UNCONSTRAINED_FUNCTION_IN_FIELDS] = unsafe {\n            capsules::load(\n                context.this_address(),\n                REGISTERER_CONTRACT_BYTECODE_CAPSULE_SLOT,\n            )\n                .unwrap()\n        };\n        let event = ClassUnconstrainedFunctionBroadcasted {\n            contract_class_id,\n            artifact_metadata_hash,\n            private_functions_artifact_tree_root,\n            artifact_function_tree_sibling_path,\n            artifact_function_tree_leaf_index,\n            function: UnconstrainedFunction {\n                selector: function_data.selector,\n                metadata_hash: function_data.metadata_hash,\n                bytecode: unconstrained_bytecode,\n            },\n        };\n        dep::aztec::oracle::debug_log::debug_log_format(\n            \"ClassUnconstrainedFunctionBroadcasted: {}\",\n            [\n                contract_class_id.to_field(),\n                artifact_metadata_hash,\n                private_functions_artifact_tree_root,\n                function_data.selector.to_field(),\n                function_data.metadata_hash,\n            ],\n        );\n        emit_contract_class_log(&mut context, event.serialize_non_standard());\n    }\n\n    #[contract_library_method]\n    fn emit_contract_class_log<let N: u32>(context: &mut PrivateContext, log: [Field; N]) {\n        let contract_address = context.this_address();\n        let counter = context.next_counter();\n\n        let log_to_emit: [Field; CONTRACT_CLASS_LOG_DATA_SIZE_IN_FIELDS] =\n            array_concat(log, [0; CONTRACT_CLASS_LOG_DATA_SIZE_IN_FIELDS - N]);\n        // Note: the length is not always N, it is the number of fields we want to broadcast, omitting trailing zeros to save blob space.\n        // Safety: The below length is constrained in the base rollup.\n        let length = unsafe { unsafe_padded_array_length(log_to_emit) };\n        // We hash the entire padded log to ensure a user cannot pass a shorter length and so emit incorrect shorter bytecode.\n        let log_hash = poseidon2_hash(log_to_emit);\n        // Safety: the below only exists to broadcast the raw log, so we can provide it to the base rollup later to be constrained.\n        unsafe {\n            notify_created_contract_class_log(contract_address, log_to_emit, counter);\n        }\n\n        context.contract_class_logs_hashes.push(LogHash { value: log_hash, counter, length });\n    }\n\n    #[private]\n    fn assert_class_id_is_registered(contract_class_id: ContractClassId) {\n        context.push_nullifier_read_request(contract_class_id.to_field());\n    }\n}\n"
    },
    "59": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/capsules/mod.nr",
      "source": "use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push<let N: u32>(self, value: T)\n    where\n        T: Serialize<N>,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get<let N: u32>(self, index: u32) -> T\n    where\n        T: Deserialize<N>,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().utility().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n}\n"
    },
    "6": {
      "path": "std/collections/bounded_vec.nr",
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n"
    },
    "67": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use dep::protocol_types::debug_log::debug_log_format;\n\nuse crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n\n        // WARNING(https://github.com/AztecProtocol/aztec-packages/issues/10558): if you delete this debug_log_format line, some tests fail.\n        debug_log_format(\n            \"Context.note_hashes, after pushing new note hash: {0}\",\n            self.note_hashes.storage().map(|nh: NoteHash| nh.value),\n        );\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request =\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index],\n                },\n            );\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "70": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/context/utility_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    },
    "72": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/discovery/mod.nr",
      "source": "use crate::encrypted_logs::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\nuse protocol_types::{address::AztecAddress, debug_log::debug_log};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod pending_tagged_log;\npub mod private_logs;\npub mod private_notes;\n\n/// We reserve two fields in the note private log that are not part of the note content: one for the storage slot, and\n/// one for the combined log and note type ID.\nglobal PRIVATE_LOG_EXPANDED_METADATA_LEN: u32 = 1;\n\n/// The maximum length of the log's content, i.e. after log type ID and metadata extraction.\npub global MAX_LOG_CONTENT_LEN: u32 =\n    PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS - PRIVATE_LOG_EXPANDED_METADATA_LEN;\n\nuse private_notes::MAX_NOTE_PACKED_LEN;\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, nonce, storage slot and note type\n/// ID and attempts to compute its note hash (not siloed by nonce nor address) and inner nullifier (not siloed by\n/// address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    private_logs::fetch_and_process_private_tagged_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    partial_notes::fetch_and_process_public_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n}\n"
    },
    "73": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/discovery/nonce_discovery.nr",
      "source": "use crate::{\n    discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    array::for_each_in_bounded_vec(\n        unique_note_hashes_in_tx,\n        |expected_unique_note_hash, i| {\n            // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n            // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n            let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n            // Given nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n            // the note hash at the array index we're currently processing.\n            // TODO(#11157): handle failed note_hash_and_nullifier computation\n            let hashes = compute_note_hash_and_nullifier(\n                packed_note,\n                storage_slot,\n                note_type_id,\n                contract_address,\n                candidate_nonce,\n            )\n                .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n            let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n            let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n            if unique_note_hash == expected_unique_note_hash {\n                // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n                // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n                // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n                // PXE may fail to realize that a given note has been nullified already, and calls to the application\n                // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n                // application already has more direct means of making a call to it fail the transaction.\n                discovered_notes.push(\n                    DiscoveredNoteInfo {\n                        nonce: candidate_nonce,\n                        note_hash: hashes.note_hash,\n                        inner_nullifier: hashes.inner_nullifier,\n                    },\n                );\n\n                // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n                // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n                // notes containing random values in order to hide their contents.\n            }\n        },\n    );\n\n    debug_log_format(\n        \"Discovered a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n"
    },
    "74": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/discovery/partial_notes.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    discovery::{\n        ComputeNoteHashAndNullifier,\n        MAX_LOG_CONTENT_LEN,\n        nonce_discovery::{attempt_note_nonce_discovery, DiscoveredNoteInfo},\n    },\n    oracle::message_discovery::{deliver_note, get_log_by_tag},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::PUBLIC_LOG_DATA_SIZE_IN_FIELDS,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private log (e.g.\n/// the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_LOG_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// Public logs contain an extra field at the beginning with the address of the contract that emitted them, and partial\n/// notes emit their completion tag in the log, resulting in the first two fields in the public log not being part of\n/// the packed public content.\n// TODO(#10273): improve how contract log siloing is handled\npub global NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG: u32 = 2;\n\n/// The maximum length of the packed representation of public fields in a partial note. This is limited by public log\n/// size and extra fields in the log (e.g. the tag).\npub global MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH: u32 =\n    PUBLIC_LOG_DATA_SIZE_IN_FIELDS - NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG;\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_log(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    log_metadata: u64,\n    log_content: BoundedVec<Field, MAX_LOG_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_log(log_metadata, log_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for public logs that would result in the completion of pending partial notes, ultimately resulting in the\n/// notes being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_public_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    let mut i = 0;\n    while i < pending_partial_notes.len() {\n        let pending_partial_note: DeliveredPendingPartialNote = pending_partial_notes.get(i);\n\n        let maybe_log = get_log_by_tag(pending_partial_note.note_completion_log_tag);\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            i += 1 as u32;\n            // Note that we're not removing the pending partial note from the PXE DB, so we will continue searching\n            // for this tagged log when performing message discovery in the future until we either find it or the\n            // entry is somehow removed from the PXE DB.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public logs have an extra field at the beginning with the contract address, which we use to verify\n            // that we're getting the logs from the expected contract.\n            // TODO(#10273): improve how contract log siloing is handled\n            assert_eq(\n                log.log_content.get(0),\n                contract_address.to_field(),\n                \"Got a public log emitted by a different contract\",\n            );\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the log sans the extra fields) to get the\n            // complete packed content.\n            let packed_public_note_content: BoundedVec<_, MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH> =\n                array::subbvec(log.log_content, NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG);\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                packed_public_note_content,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            array::for_each_in_bounded_vec(\n                discovered_notes,\n                |discovered_note: DiscoveredNoteInfo, _| {\n                    // TODO:(#10728): decide how to handle notes that fail delivery. This could be due to e.g. a\n                    // temporary node connectivity issue - is simply throwing good enough here?\n                    assert(\n                        deliver_note(\n                            contract_address,\n                            pending_partial_note.storage_slot,\n                            discovered_note.nonce,\n                            complete_packed_note,\n                            discovered_note.note_hash,\n                            discovered_note.inner_nullifier,\n                            log.tx_hash,\n                            pending_partial_note.recipient,\n                        ),\n                        \"Failed to deliver note\",\n                    );\n                },\n            );\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            // TODO(#11627): only remove the pending entry if we actually process a log that results in the note\n            // being completed.\n            pending_partial_notes.remove(i);\n\n            // We don't increment `i` here, because CapsuleArray is contiguous and its `remove(...)` function\n            // shifts the elements to the left if the removed element is not the last element.\n        }\n    }\n}\n\nfn decode_partial_note_private_log(\n    log_metadata: u64,\n    log_content: BoundedVec<Field, MAX_LOG_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = log_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        log_content.len() > PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note log: all partial note private logs must have at least {PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private log encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = log_content.get(0);\n    let note_completion_log_tag = log_content.get(1);\n\n    let packed_private_note_content = array::subbvec(log_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n"
    },
    "76": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/discovery/private_logs.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    discovery::{\n        ComputeNoteHashAndNullifier,\n        MAX_LOG_CONTENT_LEN,\n        partial_notes::process_partial_note_private_log,\n        pending_tagged_log::{PENDING_TAGGED_LOG_ARRAY_BASE_SLOT, PendingTaggedLog},\n        PRIVATE_LOG_EXPANDED_METADATA_LEN,\n        private_notes::process_private_note_log,\n    },\n    encrypted_logs::{\n        log_assembly_strategies::default_aes128::aes128::AES128,\n        log_encryption::LogEncryption,\n        log_type::{\n            PARTIAL_NOTE_PRIVATE_LOG_TYPE_ID, PRIVATE_EVENT_LOG_TYPE_ID, PRIVATE_NOTE_LOG_TYPE_ID,\n        },\n        metadata_packing::from_expanded_metadata,\n    },\n    oracle::{logs::store_private_event_log, message_discovery::sync_notes},\n    utils::array,\n};\n\nuse protocol_types::{\n    abis::event_selector::EventSelector,\n    address::AztecAddress,\n    debug_log::{debug_log, debug_log_format},\n    traits::FromField,\n};\n\n// TODO(#12750): don't make these values assume we're using AES.\nuse crate::encrypted_logs::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\n/// Searches for private logs that signal new private notes that are then delivered to PXE, or new partial notes that\n/// are stored in the PXE capsules so that `fetch_and_process_public_partial_note_completion_logs` can later search for\n/// public logs that will complete them.\npub unconstrained fn fetch_and_process_private_tagged_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `syncNotes` oracle.\n    // This makes PXE synchronize tags, download logs and store the pending tagged logs in capsule array which are then\n    // retrieved and processed here.\n    sync_notes(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    // Get logs from capsules\n    let logs =\n        CapsuleArray::<PendingTaggedLog>::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n    let len = logs.len();\n\n    // We iterate over the logs in reverse order to avoid shifting elements.\n    let mut i = len;\n    while i > 0 {\n        i -= 1;\n\n        // Get and process each log\n        let log = logs.get(i);\n        process_log(contract_address, compute_note_hash_and_nullifier, log);\n\n        // Remove the log from the capsule array\n        logs.remove(i);\n    }\n}\n\n/// Processes a log's ciphertext by decrypting it and then searching the plaintext for private notes or partial notes.\n///\n/// Private notes result in nonce discovery being performed prior to delivery, which requires knowledge of the\n/// transaction hash in which the notes would've been created (typically the same transaction in which the log was\n/// emitted), along with the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier`\n/// function.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\nunconstrained fn process_log<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    pending_tagged_log: PendingTaggedLog,\n) {\n    debug_log_format(\n        \"Processing log with tag {0}\",\n        [pending_tagged_log.log.get(0)],\n    );\n\n    // The tag is ignored for now.\n    let ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n    let log_plaintext = AES128::decrypt_log(ciphertext, pending_tagged_log.recipient);\n\n    // The first thing to do after decrypting the log is to determine what type of private log we're processing. We\n    // have 3 log types: private note logs, partial note logs and event logs.\n\n    let (log_type_id, log_metadata, log_content) = decode_log_plaintext(log_plaintext);\n\n    if log_type_id == PRIVATE_NOTE_LOG_TYPE_ID {\n        debug_log(\"Processing private note log\");\n\n        process_private_note_log(\n            contract_address,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.unique_note_hashes_in_tx,\n            pending_tagged_log.first_nullifier_in_tx,\n            pending_tagged_log.recipient,\n            compute_note_hash_and_nullifier,\n            log_metadata,\n            log_content,\n        );\n    } else if log_type_id == PARTIAL_NOTE_PRIVATE_LOG_TYPE_ID {\n        debug_log(\"Processing partial note private log\");\n\n        process_partial_note_private_log(\n            contract_address,\n            pending_tagged_log.recipient,\n            log_metadata,\n            log_content,\n        );\n    } else if log_type_id == PRIVATE_EVENT_LOG_TYPE_ID {\n        debug_log(\"Processing private event log\");\n\n        // In the case of event logs, the log metadata is the event selector.\n        let event_selector = EventSelector::from_field(log_metadata as Field);\n\n        store_private_event_log(\n            contract_address,\n            pending_tagged_log.recipient,\n            event_selector,\n            log_content,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.log_index_in_tx,\n        );\n    } else {\n        debug_log_format(\n            \"Unknown log type id {0} (probably belonging to an event log)\",\n            [log_type_id as Field],\n        );\n    }\n}\n\n/// Decodes a log's plaintext following aztec-nr's standard log encoding.\n///\n/// The standard private log layout is composed of:\n///  - an initial field called the 'expanded metadata'\n///  - an arbitrary number of fields following that called the 'log content'\n///\n/// ```\n/// log_plaintext: [ log_expanded_metadata, ...log_content ]\n/// ```\n///\n/// The expanded metadata itself is (currently) interpreted as a u128, of which:\n///  - the upper 64 bits are the log type id\n///  - the lower 64 bits are called the 'log metadata'\n///\n/// ```\n/// log_expanded_metadata: [  log_type_id    |  log_metadata  ]\n///                        <---  64 bits --->|<--- 64 bits --->\n/// ```\n///\n/// The meaning of the log metadata and log content depend on the value of the log type id. Note that there is\n/// nothing special about the log metadata, it _can_ be considered part of the content. It just has a different name\n/// to make it distinct from the log content given that it is not a full field.\nunconstrained fn decode_log_plaintext(\n    log_plaintext: BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>,\n) -> (u64, u64, BoundedVec<Field, MAX_LOG_CONTENT_LEN>) {\n    assert(\n        log_plaintext.len() >= PRIVATE_LOG_EXPANDED_METADATA_LEN,\n        f\"Invalid log plaintext: all logs must be decrypted into at least {PRIVATE_LOG_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If PRIVATE_LOG_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the log encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_LOG_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for PRIVATE_LOG_EXPANDED_METADATA_LEN\",\n    );\n\n    // See the documentation of this function for a description of the log layout\n    let expanded_log_metadata = log_plaintext.get(0);\n    let (log_metadata, log_type_id) = from_expanded_metadata(expanded_log_metadata);\n    let log_content = array::subbvec(log_plaintext, PRIVATE_LOG_EXPANDED_METADATA_LEN);\n\n    (log_type_id, log_metadata, log_content)\n}\n"
    },
    "77": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/discovery/private_notes.nr",
      "source": "use crate::{\n    discovery::{\n        ComputeNoteHashAndNullifier,\n        MAX_LOG_CONTENT_LEN,\n        nonce_discovery::{attempt_note_nonce_discovery, DiscoveredNoteInfo},\n    },\n    oracle,\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note log content that are not the note's packed representation.\nglobal PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the log (e.g. log type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_LOG_CONTENT_LEN - PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_log<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    log_metadata: u64,\n    log_content: BoundedVec<Field, MAX_LOG_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_log(log_metadata, log_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private log\",\n        [discovered_notes.len() as Field],\n    );\n\n    array::for_each_in_bounded_vec(\n        discovered_notes,\n        |discovered_note: DiscoveredNoteInfo, _| {\n            // TODO:(#10728): handle notes that fail delivery. This could be due to e.g. a temporary node connectivity\n            // issue, and we should perhaps not have marked the tag index as taken.\n            assert(\n                oracle::message_discovery::deliver_note(\n                    contract_address,\n                    storage_slot,\n                    discovered_note.nonce,\n                    packed_note,\n                    discovered_note.note_hash,\n                    discovered_note.inner_nullifier,\n                    tx_hash,\n                    recipient,\n                ),\n                \"Failed to deliver note\",\n            );\n        },\n    );\n}\n\nfn decode_private_note_log(\n    log_metadata: u64,\n    log_content: BoundedVec<Field, MAX_LOG_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = log_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        log_content.len() > PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note log: all private note logs must have at least {PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the private note log encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = log_content.get(0);\n    let packed_note = array::subbvec(log_content, PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n"
    },
    "78": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypt/aes128.nr",
      "source": "use dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::utils::point::point_to_bytes;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n"
    },
    "81": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/encrypted_logs/log_assembly_strategies/default_aes128/aes128.nr",
      "source": "use crate::{\n    encrypted_logs::{\n        encrypt::aes128::derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256,\n        log_assembly_strategies::default_aes128::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n        log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_CIPHERTEXT_LEN,\n            PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n    },\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign},\n        random::get_random_bytes,\n    },\n};\nuse std::aes128::aes128_encrypt;\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) as bool;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        encrypted_logs::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n"
    },
    "90": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/encrypted_logs/metadata_packing.nr",
      "source": "global U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\npub fn to_expanded_metadata(log_metadata: u64, log_type: u64) -> Field {\n    let metadata_field = log_metadata as Field;\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (log_type as Field) * U64_SHIFT_MULTIPLIER;\n    type_field + metadata_field\n}\n\npub fn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let metadata = (input as u64);\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    let log_type = ((input - (metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    (metadata, log_type)\n}\n\nmod tests {\n    use super::{from_expanded_metadata, to_expanded_metadata};\n\n    global U64_MAX: Field = 2.pow_32(64) - 1;\n    global U128_MAX: Field = 2.pow_32(128) - 1;\n\n    #[test]\n    fn packing_metadata() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX as u64, U64_MAX as u64);\n        let (metadata, log_type) = from_expanded_metadata(packed);\n        assert(metadata == U64_MAX as u64, \"Metadata bits should be all 1s\");\n        assert(log_type == U64_MAX as u64, \"Log type bits should be all 1s\");\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(0, U64_MAX as u64);\n        let (metadata, log_type) = from_expanded_metadata(packed);\n        assert(metadata == 0, \"Metadata bits should be 0\");\n        assert(log_type == U64_MAX as u64, \"Log type bits should be all 1s\");\n\n        // Test case 3: Only metadata bits set\n        let packed = to_expanded_metadata(U64_MAX as u64, 0);\n        let (metadata, log_type) = from_expanded_metadata(packed);\n        assert(metadata == U64_MAX as u64, \"Metadata bits should be all 1s\");\n        assert(log_type == 0, \"Log type bits should be 0\");\n\n        // Test case 4: Zero\n        let packed = to_expanded_metadata(0, 0);\n        let (metadata, log_type) = from_expanded_metadata(packed);\n        assert(metadata == 0, \"Metadata bits should be 0\");\n        assert(log_type == 0, \"Log type bits should be 0\");\n    }\n\n    #[test]\n    fn unpacking_metadata() {\n        // Test case 1: All bits set\n        let input = U128_MAX;\n        let (metadata, log_type) = from_expanded_metadata(input);\n        assert(metadata == U64_MAX as u64, \"Metadata bits should be all 1s\");\n        assert(log_type == U64_MAX as u64, \"Log type bits should be all 1s\");\n\n        // Test case 2: Only log type bits set\n        let input = U128_MAX - U64_MAX;\n        let (metadata, log_type) = from_expanded_metadata(input);\n        assert(metadata == 0, \"Metadata bits should be 0\");\n        assert(log_type == U64_MAX as u64, \"Log type bits should be all 1s\");\n\n        // Test case 3: Only metadata bits set\n        let input = U64_MAX;\n        let (metadata, log_type) = from_expanded_metadata(input);\n        assert(metadata == U64_MAX as u64, \"Metadata bits should be all 1s\");\n        assert(log_type == 0, \"Log type bits should be 0\");\n\n        // Test case 4: Zero\n        let input = 0;\n        let (metadata, log_type) = from_expanded_metadata(input);\n        assert(metadata == 0, \"Metadata bits should be 0\");\n        assert(log_type == 0, \"Log type bits should be 0\");\n    }\n\n    #[test]\n    fn roundtrip_metadata(original_metadata: u64, original_type: u64) {\n        let packed = to_expanded_metadata(original_metadata, original_type);\n        let (unpacked_metadata, unpacked_type) = from_expanded_metadata(packed);\n        assert(original_type == unpacked_type, \"Log type bits should match after roundtrip\");\n        assert(\n            original_metadata == unpacked_metadata,\n            \"Metadata bits should match after roundtrip\",\n        );\n    }\n}\n"
    },
    "94": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_CALLDATA, GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
    }
  }
}
