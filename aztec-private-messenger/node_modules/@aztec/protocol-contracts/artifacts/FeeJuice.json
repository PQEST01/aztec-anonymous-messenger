{
  "transpiled": true,
  "noir_version": "1.0.0-beta.3+0000000000000000000000000000000000000000",
  "name": "FeeJuice",
  "functions": [
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2830029349304997821": {
            "error_kind": "fmtstring",
            "length": 27,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "3219842053230618354": {
            "error_kind": "string",
            "string": "Function check_balance can only be called statically"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6067862452620309358": {
            "error_kind": "string",
            "string": "Function balance_of_public can only be called statically"
          },
          "10502589790419500451": {
            "error_kind": "string",
            "string": "Function _increase_public_balance can only be called internally"
          },
          "15238796416211288225": {
            "error_kind": "string",
            "string": "Balance too low"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "public_dispatch"
      ]
    },
    {
      "name": "balance_of_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "parameters": [
          {
            "name": "owner",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 128
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6067862452620309358": {
            "error_kind": "string",
            "string": "Function balance_of_public can only be called statically"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "7Z3bbuM4DIbfJde9EKnzvMpgUfSQKQIESZG2CyyKvvs6mTh2KyEei0KRjP6bok5Ek/oii5REye+Lx+X929PtavNr+7L48fN9sd4+3L2utpvu6v3jZnG/W63Xq6fb8ccLtf9Dig8CL893m/31y+vd7nXxg9gy3SyWm8fD/0Z3N/m1Wi/3V/HjJinvScVjcd+VP5X2JlM4suNj4cjhU+F/bjqL/J9YZD9ZtJcjLpQr1Me2TE6rnBwr545irEZQrM0QJOV0r4No9ON4lSsd+jtTDKeymn/j1uayzIkXZY65LDrmsujYy6Jjw0WZ4/iyzPEXZY6n7zbHDnfmT+Zk/Fk0tvdnMQ535uAzpfXpzobVUDZ3Y6ZoeiuY+Hxhy/19Lftx0QM/B34SfkGBn4ifBT8Jv4j2J+OH9ifhxwrtT8bPgJ+IXwA/CT/S4Cfi58FPwo8Z/ET8MH6b5OdUz8/RV34a8YuMH+JnGb8IflP8TmXd56J7fg7Pr4yfAT8RPzy/In4e7U/GD+1PxC+g/cn4Yf5FxC9i/Cvjh/kXCT+tsH4u44f5FxE/wvhNxg/zLzJ+iJ9TKIxFoQwURLopFI3wNQMFMUEKxSDQzECB985AgUtOoXx/jvw1QIFLTqE4uOQMFEwTpVCwdyIHBS45hYJdDjkoCPNTKNiPkIOCPiWBYrBzIAOF24TCeoAy2ut+hKLbDPM99YchsNe6uPCeoGlzTDCHILmhfi5QQrDNAURFgrZNJ1iRYKO5rjUJGhCcIuh9f2PyMfHFjea7ViTo21xcrUkQvlhIMLQ581eTIKIZKUF4EiHBaEBQSBBtUEbQKkQzUoKIZoQECdGMlCCiGSlBeBIhwUaTjmsShCcREmw0nbkmwTaTImYRjNQfXE6RE4Lff1b0X0ewwnoxhdBrGK9I5wla6/vS3aLDwJA05xi6/mR378Pozodz3a3V12z8NZN37oqN/4NczuinjD8923QweKQiY44Nfc6Gd2qoavZdDV6HvkPyhvl84a7HGlwMGRXHxQ919d9eVz/UddST5c135PtbO22GDtXwwfrAV239NbN3je7W1upkhSbzxV26RqdPJqCgpaRQ2ABKCqXNmZ/zUDRaSgYKWkoKxbQ57ceRT1CUnRjuqtPYuKtqSAi2Oe1XkaBtMwKaRZD0UD9LCcE2w6WKBBtNTa1JsE33WpFgo6mp8wi6YfIiJJ6k0ZSsWQSN6s9D7/5N2mBsc7NXPYJetbmIWZMgohkhwUaPdZxF0PKpftaqhGCbKVkVCba6l7oiQfhiIUGNiFpKEKM6IUGDaEZIEPODYoKYoxYSbPRYv5oE0QaFBBs9MHAeQX9KTbWRE4KIZoQEG31hU0WCjb5yqCZBeBIZwdDoa4dqEsT8oJQgfLGQIGF+cJKgHrYqaf11nSQ0uum1JkH4YiFBDV8sJQhfLCUIXywkiDxqMUFEM0KCFm1QShDRjJCgQzQjJYhoRkoQ0cw0QXPaqa3d15Wm0OhbmCoSDJjllxKELxYSjIgHpQQxJpERjMjllxJELr9wN0QkA4JCgugHhQQbPbulIkHk8n8h2EEhxdmRmtf9eQve6EQmn5EeTa8o2lSPVQUypkAmzJfJ5+aeP3Si+8iXSOVzMCelXIlUKNIVinTFIl2xRBcpKpIq+b2IinRRUb3yO94mpUyRVCiR0lwk5Wf3MWSy3KPqDxOMnJGZ3y9R/ik+r8cX2JafEZuQifNlgp7PIMzvMynO18P553ZCZv5vylSghwr05J/XaPt2HT2nMna+jC7Qk3/p7nmZ/Br0hEyBHlugJ7+yNvp9MjJ5v37+N3V+vowv0BNUgYydLxMLnoU4vz/QShfIxPkyZApkCvRwQX14ftvRmgpkZraDj+7q37vd6u5+vXzpJPZfvm0eXlfbzfHy9b/n/pv73Wq9Xj3dPu+2D8vHt93ydr192H+3UMc/P7sGf8NRHyK47nJ/aDb9vtxXhqPpvnWd1k7z/w==",
      "brillig_names": [
        "balance_of_public"
      ]
    },
    {
      "name": "claim",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "secret",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "message_leaf_index",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17288131482828810359": {
            "error_kind": "string",
            "string": "Message not in state"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "build_msg_block",
        "attach_len_to_msg_block",
        "build_msg_block",
        "get_l1_to_l2_membership_witness",
        "notify_created_nullifier_oracle_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "directive_to_radix",
        "directive_invert",
        "directive_integer_quotient"
      ],
      "verification_key": "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"
    },
    {
      "name": "_increase_public_balance",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "to",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "10502589790419500451": {
            "error_kind": "string",
            "string": "Function _increase_public_balance can only be called internally"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "_increase_public_balance"
      ]
    },
    {
      "name": "check_balance",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "parameters": [
          {
            "name": "fee_limit",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "3219842053230618354": {
            "error_kind": "string",
            "string": "Function check_balance can only be called statically"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "15238796416211288225": {
            "error_kind": "string",
            "string": "Balance too low"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "check_balance"
      ]
    },
    {
      "name": "sync_notes",
      "is_unconstrained": true,
      "custom_attributes": [
        "aztec::macros::functions::utility"
      ],
      "abi": {
        "parameters": [],
        "return_type": null,
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2588366281349374274": {
            "error_kind": "fmtstring",
            "length": 136,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "3473764466780631008": {
            "error_kind": "fmtstring",
            "length": 106,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5533887251808526417": {
            "error_kind": "fmtstring",
            "length": 120,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16775516380094354375": {
            "error_kind": "fmtstring",
            "length": 40,
            "item_types": []
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "sync_notes"
      ]
    }
  ],
  "outputs": {
    "globals": {
      "storage": [
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "ContractInstanceDeployer"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "updated_class_ids",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        },
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "FeeJuice"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        }
      ]
    },
    "structs": {
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  }
                ],
                "kind": "struct",
                "path": "FeeJuice::_increase_public_balance_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "FeeJuice::_increase_public_balance_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "owner",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "FeeJuice::balance_of_public_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 128
              }
            }
          ],
          "kind": "struct",
          "path": "FeeJuice::balance_of_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "secret",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "message_leaf_index",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "FeeJuice::claim_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "FeeJuice::claim_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "fee_limit",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  }
                ],
                "kind": "struct",
                "path": "FeeJuice::check_balance_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "FeeJuice::check_balance_abi"
        }
      ]
    }
  },
  "file_map": {
    "100": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_CALLDATA, GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
    },
    "121": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/macros/aztec.nr",
      "source": "use crate::{\n    discovery::private_notes::MAX_NOTE_PACKED_LEN,\n    macros::{\n        dispatch::generate_public_dispatch,\n        functions::{\n            stub_registry,\n            utils::{check_each_fn_macroified, create_message_discovery_call},\n        },\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_notes` utility function PXE requires in order to discover notes.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_notes = generate_sync_notes();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_notes\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(nonce).into() \n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                nonce: Field,\n            ) -> Option<aztec::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_notes() -> Quoted {\n    let message_discovery_call = create_message_discovery_call();\n\n    // TODO(https://github.com/noir-lang/noir/issues/7912): Doing the following unfortunately doesn't work. Once\n    // the issue is fixed uncomment the following and remove the workaround from TS (look for the issue link in the\n    // codebase).\n    // let utility: fn(FunctionDefinition) -> () = crate::macros::functions::utility;\n    // quote {\n    //     #[$utility]\n    //     unconstrained fn sync_notes() {\n    //         $message_discovery_call\n    //     }\n    // }\n\n    quote {\n        #[aztec::macros::functions::utility]\n        unconstrained fn sync_notes() {\n            $message_discovery_call\n        }\n    }\n}\n"
    },
    "122": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr",
      "source": "use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n"
    },
    "129": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr",
      "source": "use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, &[], false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n"
    },
    "132": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/macros/storage.nr",
      "source": "use std::{collections::umap::UHashMap, hash::{BuildHasherDefault, poseidon2::Poseidon2Hasher}};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\nuse super::utils::is_note;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract. Only a single struct in the entire contract\n/// should have this macro (or `storage_no_init`) applied to it.\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot }, false);\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n/// Only a single struct in the entire contract should have this macro (or `storage`) applied to it.\npub comptime fn storage_no_init(_s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(\n    typ: Type,\n    slot: Quoted,\n    parent_is_map: bool,\n) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot }, true);\n        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)\n    } else {\n        let storage_size = if parent_is_map {\n            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result\n            // in slots very far away from one another.\n            1\n        } else {\n            let (_, container_struct_generics) = typ.as_data_type().unwrap();\n            let stored_struct = container_struct_generics[0];\n\n            if is_note(stored_struct) {\n                // Private notes always occupy a single slot, since the slot is only used as a state variable\n                // identifier.\n                1\n            } else {\n                get_storage_size(typ)\n            }\n        };\n\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        (quote { $struct_name::new(context, $slot)}, storage_size)\n    }\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n"
    },
    "134": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/messaging.nr",
      "source": "use crate::{\n    hash::{compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash},\n    oracle::get_l1_to_l2_membership_witness::get_l1_to_l2_membership_witness,\n};\n\nuse dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    merkle_tree::root::root_from_sibling_path,\n};\n\npub fn process_l1_to_l2_message(\n    l1_to_l2_root: Field,\n    contract_address: AztecAddress,\n    portal_contract_address: EthAddress,\n    chain_id: Field,\n    version: Field,\n    content: Field,\n    secret: Field,\n    leaf_index: Field,\n) -> Field {\n    let secret_hash = compute_secret_hash(secret);\n    let message_hash = compute_l1_to_l2_message_hash(\n        portal_contract_address,\n        chain_id,\n        contract_address,\n        version,\n        content,\n        secret_hash,\n        leaf_index,\n    );\n\n    // We prove that `message_hash` is in the tree by showing the derivation of the tree root, using a merkle path we\n    // get from an oracle.\n    // Safety: The witness is only used as a \"magical value\" that makes the merkle proof below pass. Hence it's safe.\n    let (_leaf_index, sibling_path) =\n        unsafe { get_l1_to_l2_membership_witness(contract_address, message_hash, secret) };\n\n    let root = root_from_sibling_path(message_hash, leaf_index, sibling_path);\n    assert_eq(root, l1_to_l2_root, \"Message not in state\");\n\n    compute_l1_to_l2_message_nullifier(message_hash, secret)\n}\n"
    },
    "151": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr",
      "source": "use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n"
    },
    "152": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(notifyEnqueuedPublicFunctionCall)]\nunconstrained fn notify_enqueued_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_enqueued_public_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_enqueued_public_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_enqueued_public_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a public call has been enqueued, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_enqueued_public_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\n#[oracle(notifySetPublicTeardownFunctionCall)]\nunconstrained fn notify_set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_set_public_teardown_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_set_public_teardown_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_public_teardown_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a teardown call has been set, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_set_public_teardown_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"
    },
    "153": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "154": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr",
      "source": "/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n"
    },
    "156": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/get_l1_to_l2_membership_witness.nr",
      "source": "use dep::protocol_types::{address::AztecAddress, constants::L1_TO_L2_MSG_TREE_HEIGHT};\n\n/// Returns the leaf index and sibling path of an entry in the L1 to L2 messaging tree, which can then be used to prove\n/// its existence.\npub unconstrained fn get_l1_to_l2_membership_witness(\n    contract_address: AztecAddress,\n    message_hash: Field,\n    secret: Field,\n) -> (Field, [Field; L1_TO_L2_MSG_TREE_HEIGHT]) {\n    get_l1_to_l2_membership_witness_oracle(contract_address, message_hash, secret)\n}\n\n// Obtains membership witness (index and sibling path) for a message in the L1 to L2 message tree.\n#[oracle(getL1ToL2MembershipWitness)]\nunconstrained fn get_l1_to_l2_membership_witness_oracle(\n    _contract_address: AztecAddress,\n    _message_hash: Field,\n    _secret: Field,\n) -> (Field, [Field; L1_TO_L2_MSG_TREE_HEIGHT]) {}\n"
    },
    "162": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/logs.nr",
      "source": "use crate::discovery::MAX_LOG_CONTENT_LEN;\nuse protocol_types::{abis::event_selector::EventSelector, address::AztecAddress};\n\n/// The below only exists to broadcast the raw log, so we can provide it to the base rollup later to be constrained.\npub unconstrained fn notify_created_contract_class_log<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {\n    notify_created_contract_class_log_private_oracle(contract_address, message, counter)\n}\n\n#[oracle(notifyCreatedContractClassLog)]\nunconstrained fn notify_created_contract_class_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {}\n\npub unconstrained fn store_private_event_log(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    log_content: BoundedVec<Field, MAX_LOG_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n) {\n    store_private_event_log_oracle(\n        contract_address,\n        recipient,\n        event_selector,\n        log_content,\n        tx_hash,\n        log_index_in_tx,\n    )\n}\n\n#[oracle(storePrivateEventLog)]\nunconstrained fn store_private_event_log_oracle(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    log_content: BoundedVec<Field, MAX_LOG_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n) {}\n"
    },
    "163": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/message_discovery.nr",
      "source": "use crate::discovery::private_notes::MAX_NOTE_PACKED_LEN;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PUBLIC_LOG_DATA_SIZE_IN_FIELDS},\n};\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn sync_notes(pending_tagged_log_array_base_slot: Field) {\n    sync_notes_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n/// Informs PXE of a note's existence so that it can later be retrieved by the `getNotes` oracle. The note will be\n/// scoped to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The packed note is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was successfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        packed_note,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n/// The contents of a public log, plus contextual information about the transaction in which the log was emitted. This\n/// is the data required in order to discover notes that are being delivered in a log.\n// TODO(#11639): this could also be used to fetch private logs, but the `BoundedVec` maximum length is that of a public\n// log.\npub struct LogWithTxData {\n    pub log_content: BoundedVec<Field, PUBLIC_LOG_DATA_SIZE_IN_FIELDS>,\n    pub tx_hash: Field,\n    /// The array of new note hashes created by `tx_hash`\n    pub unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    /// The first nullifier created by `tx_hash`\n    pub first_nullifier_in_tx: Field,\n}\n\n/// Fetches a log from the node that has the corresponding `tag`. The log can be either a public or a private log, and\n/// the tag is the first field in the log's content. Returns `Option::none` if no such log exists. Throws if more than\n/// one log with that tag exists.\n/// Public logs have an extra field included at the beginning with the address of the contract that emitted them.\n// TODO(#11627): handle multiple logs with the same tag.\n// TODO(#10273): improve contract siloing of logs, don't introduce an extra field.\npub unconstrained fn get_log_by_tag(tag: Field) -> Option<LogWithTxData> {\n    get_log_by_tag_oracle(tag)\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n\n#[oracle(getLogByTag)]\nunconstrained fn get_log_by_tag_oracle(tag: Field) -> Option<LogWithTxData> {}\n"
    },
    "165": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/notes.nr",
      "source": "use crate::{\n    note::{note_interface::NoteType, note_metadata::NoteMetadata, retrieved_note::RetrievedNote},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::IndexedTaggingSecret,\n    traits::{FromField, Packable},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_created_note_oracle(storage_slot, note_type_id, packed_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {\n    // This wrapper exists to extract the ORACLE_RETURN_FIELD_LENGTH generic numeric param into a value and pass it to\n    // the oracle, so that it knows how big the return array must be.\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        ORACLE_RETURN_FIELD_LENGTH,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let MAX_NOTES: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    _placeholder_fields: [Field; ORACLE_RETURN_FIELD_LENGTH], // TODO: Compute this value automatically from MAX_NOTES\n) -> [Option<RetrievedNote<Note>>; MAX_NOTES]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let fields: [_; ORACLE_RETURN_FIELD_LENGTH] = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n\n    let mut opt_notes = [Option::none(); MAX_NOTES];\n    for i in 0..opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let maybe_nonce = fields[read_offset];\n            let maybe_note_hash_counter = fields[read_offset + 1] as u32;\n            let packed_note = array::subarray(fields, read_offset + 2);\n\n            let note = Note::unpack(packed_note);\n            let retrieved_note = RetrievedNote {\n                note,\n                contract_address,\n                metadata: NoteMetadata::from_raw_data(maybe_note_hash_counter != 0, maybe_nonce),\n            };\n\n            opt_notes[i] = Option::some(retrieved_note);\n        };\n    }\n    opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier)\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> bool {}\n\n/// Returns the derived app tagging secret ready to be included in a log for a given sender and recipient pair,\n/// siloed for the current contract address.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender_oracle(sender, recipient).compute_tag(recipient)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> IndexedTaggingSecret {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n"
    },
    "167": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr",
      "source": "use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n"
    },
    "17": {
      "path": "std/field/bn254.nr",
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
    },
    "170": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/state_vars/map.nr",
      "source": "use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"
    },
    "179": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr",
      "source": "use crate::context::{PublicContext, UtilityContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    // docs:start:public_mutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"
    },
    "18": {
      "path": "std/field/mod.nr",
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
    },
    "193": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/utils/array/append.nr",
      "source": "/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n"
    },
    "195": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/utils/array/mod.nr",
      "source": "pub mod append;\npub mod collapse;\npub mod subarray;\npub mod subbvec;\n\npub use append::append;\npub use collapse::collapse;\npub use subarray::subarray;\npub use subbvec::subbvec;\n\n// This will eventually be replaced by `BoundedVec::for_each`, once that's implemented.\npub unconstrained fn for_each_in_bounded_vec<T, let MaxLen: u32, Env>(\n    vec: BoundedVec<T, MaxLen>,\n    f: fn[Env](T, u32) -> (),\n) {\n    for i in 0..vec.len() {\n        f(vec.get_unchecked(i), i);\n    }\n}\n"
    },
    "196": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr",
      "source": "/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n"
    },
    "197": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr",
      "source": "use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n"
    },
    "199": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr",
      "source": "use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n"
    },
    "200": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr",
      "source": "// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n"
    },
    "202": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/utils/field.nr",
      "source": "use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n"
    },
    "204": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/utils/point.nr",
      "source": "use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n"
    },
    "224": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/abis/event_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"
    },
    "24": {
      "path": "std/hash/poseidon2.nr",
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "269": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
      "source": "use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"
    },
    "286": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr",
      "source": "/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"
    },
    "287": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"
    },
    "297": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr",
      "source": "use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"
    },
    "301": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr",
      "source": "use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `omit`: A list of field names (as `Quoted`) to be excluded from the serialized output.\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, &[], false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, &[], false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], &[], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, &[], false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with Omitted Field and packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// Serializing while omitting `value2`:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, MyStruct, &[quote { self.value2 }], true)\n/// // Returns:\n/// // ([`value_packed[0]`], [`let value_packed = self.value.pack()`])\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    omit: [Quoted],\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // Proceed if none of the omit rules omits this name\n    if !omit.any(|to_omit| to_omit == name) {\n        // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n        let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n        let packable_constraint =\n            quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n        if (should_pack & typ.implements(packable_constraint)) {\n            // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n            // method, add the resulting field array to `aux_vars` and each field to `fields`.\n            let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n            // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n            let name_at_one_token = collapse_to_one_token(name);\n            let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n            // We add the individual fields to the fields array\n            let pack_method = get_trait_impl_method(\n                typ,\n                quote { crate::traits::Packable<$packed_len> },\n                quote { pack },\n            );\n            let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n            for i in 0..packed_len {\n                fields = fields.push_back(quote { $packed_struct_name[$i] });\n            }\n\n            // We add the new auxiliary variable to the aux_vars array\n            aux_vars = aux_vars.push_back(packed_struct);\n        } else if typ.is_field() {\n            // For field we just add the value to fields\n            fields = fields.push_back(name);\n        } else if typ.as_integer().is_some() | typ.is_bool() {\n            // For integer and bool we just cast to Field and add the value to fields\n            fields = fields.push_back(quote { $name as Field });\n        } else if typ.as_data_type().is_some() {\n            // For struct we pref\n            let nested_struct = typ.as_data_type().unwrap();\n            let params = nested_struct.0.fields(nested_struct.1);\n            let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {\n                let maybe_prefixed_name = if name == quote {} {\n                    // Triggered when the param name is of a value available in the current scope (e.g. a function\n                    // argument) --> then we don't prefix the name with anything.\n                    param_name\n                } else {\n                    // Triggered when we want to prefix the param name with the `name` from function input. This\n                    // can typically be `self` when implementing a method on a struct.\n                    quote { $name.$param_name }\n                };\n                generate_serialize_to_fields(\n                    quote {$maybe_prefixed_name},\n                    param_type,\n                    omit,\n                    should_pack,\n                )\n            });\n            let struct_flattened_fields = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n            );\n            let struct_flattened_aux_vars = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n            );\n            fields = fields.append(struct_flattened_fields);\n            aux_vars = aux_vars.append(struct_flattened_aux_vars);\n        } else if typ.as_array().is_some() {\n            // For array we recursively call `generate_serialize_to_fields(...)` for each element\n            let (element_type, array_len) = typ.as_array().unwrap();\n            let array_len = array_len.as_constant().unwrap();\n            for i in 0..array_len {\n                let (element_fields, element_aux_vars) = generate_serialize_to_fields(\n                    quote { $name[$i] },\n                    element_type,\n                    omit,\n                    should_pack,\n                );\n                fields = fields.append(element_fields);\n                aux_vars = aux_vars.append(element_aux_vars);\n            }\n        } else if typ.as_str().is_some() {\n            // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n            // then we add each byte to fields as a Field\n            let length_type = typ.as_str().unwrap();\n            let str_len = length_type.as_constant().unwrap();\n            let as_member = name.as_expr().unwrap().as_member_access();\n            let var_name = if as_member.is_some() {\n                as_member.unwrap().1\n            } else {\n                name\n            };\n            let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n            let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n            for i in 0..str_len {\n                fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n            }\n            aux_vars = aux_vars.push_back(as_bytes);\n        } else {\n            panic(\n                f\"Unsupported type for serialization of argument {name} and type {typ}\",\n            )\n        }\n    }\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub(crate) comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    quote {\n        impl Serialize<$serialized_len> for $typ {\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) =\n        generate_serialize_to_fields(quote { self }, typ, &[], packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n"
    },
    "304": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
      "source": "use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
    },
    "324": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr",
      "source": "use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"
    },
    "342": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr",
      "source": "use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"
    },
    "343": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"
    },
    "359": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr",
      "source": "pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n"
    },
    "362": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "368": {
      "path": "/home/aztec-dev/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr",
      "source": "use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n"
    },
    "43": {
      "path": "std/ops/arith.nr",
      "source": "// docs:start:add-trait\npub trait Add {\n    fn add(self, other: Self) -> Self;\n}\n// docs:end:add-trait\n\nimpl Add for Field {\n    fn add(self, other: Field) -> Field {\n        self + other\n    }\n}\n\nimpl Add for u128 {\n    fn add(self, other: u128) -> u128 {\n        self + other\n    }\n}\nimpl Add for u64 {\n    fn add(self, other: u64) -> u64 {\n        self + other\n    }\n}\nimpl Add for u32 {\n    fn add(self, other: u32) -> u32 {\n        self + other\n    }\n}\nimpl Add for u16 {\n    fn add(self, other: u16) -> u16 {\n        self + other\n    }\n}\nimpl Add for u8 {\n    fn add(self, other: u8) -> u8 {\n        self + other\n    }\n}\nimpl Add for u1 {\n    fn add(self, other: u1) -> u1 {\n        self + other\n    }\n}\n\nimpl Add for i8 {\n    fn add(self, other: i8) -> i8 {\n        self + other\n    }\n}\nimpl Add for i16 {\n    fn add(self, other: i16) -> i16 {\n        self + other\n    }\n}\nimpl Add for i32 {\n    fn add(self, other: i32) -> i32 {\n        self + other\n    }\n}\nimpl Add for i64 {\n    fn add(self, other: i64) -> i64 {\n        self + other\n    }\n}\n\n// docs:start:sub-trait\npub trait Sub {\n    fn sub(self, other: Self) -> Self;\n}\n// docs:end:sub-trait\n\nimpl Sub for Field {\n    fn sub(self, other: Field) -> Field {\n        self - other\n    }\n}\n\nimpl Sub for u128 {\n    fn sub(self, other: u128) -> u128 {\n        self - other\n    }\n}\nimpl Sub for u64 {\n    fn sub(self, other: u64) -> u64 {\n        self - other\n    }\n}\nimpl Sub for u32 {\n    fn sub(self, other: u32) -> u32 {\n        self - other\n    }\n}\nimpl Sub for u16 {\n    fn sub(self, other: u16) -> u16 {\n        self - other\n    }\n}\nimpl Sub for u8 {\n    fn sub(self, other: u8) -> u8 {\n        self - other\n    }\n}\nimpl Sub for u1 {\n    fn sub(self, other: u1) -> u1 {\n        self - other\n    }\n}\n\nimpl Sub for i8 {\n    fn sub(self, other: i8) -> i8 {\n        self - other\n    }\n}\nimpl Sub for i16 {\n    fn sub(self, other: i16) -> i16 {\n        self - other\n    }\n}\nimpl Sub for i32 {\n    fn sub(self, other: i32) -> i32 {\n        self - other\n    }\n}\nimpl Sub for i64 {\n    fn sub(self, other: i64) -> i64 {\n        self - other\n    }\n}\n\n// docs:start:mul-trait\npub trait Mul {\n    fn mul(self, other: Self) -> Self;\n}\n// docs:end:mul-trait\n\nimpl Mul for Field {\n    fn mul(self, other: Field) -> Field {\n        self * other\n    }\n}\n\nimpl Mul for u128 {\n    fn mul(self, other: u128) -> u128 {\n        self * other\n    }\n}\nimpl Mul for u64 {\n    fn mul(self, other: u64) -> u64 {\n        self * other\n    }\n}\nimpl Mul for u32 {\n    fn mul(self, other: u32) -> u32 {\n        self * other\n    }\n}\nimpl Mul for u16 {\n    fn mul(self, other: u16) -> u16 {\n        self * other\n    }\n}\nimpl Mul for u8 {\n    fn mul(self, other: u8) -> u8 {\n        self * other\n    }\n}\nimpl Mul for u1 {\n    fn mul(self, other: u1) -> u1 {\n        self * other\n    }\n}\n\nimpl Mul for i8 {\n    fn mul(self, other: i8) -> i8 {\n        self * other\n    }\n}\nimpl Mul for i16 {\n    fn mul(self, other: i16) -> i16 {\n        self * other\n    }\n}\nimpl Mul for i32 {\n    fn mul(self, other: i32) -> i32 {\n        self * other\n    }\n}\nimpl Mul for i64 {\n    fn mul(self, other: i64) -> i64 {\n        self * other\n    }\n}\n\n// docs:start:div-trait\npub trait Div {\n    fn div(self, other: Self) -> Self;\n}\n// docs:end:div-trait\n\nimpl Div for Field {\n    fn div(self, other: Field) -> Field {\n        self / other\n    }\n}\n\nimpl Div for u128 {\n    fn div(self, other: u128) -> u128 {\n        self / other\n    }\n}\nimpl Div for u64 {\n    fn div(self, other: u64) -> u64 {\n        self / other\n    }\n}\nimpl Div for u32 {\n    fn div(self, other: u32) -> u32 {\n        self / other\n    }\n}\nimpl Div for u16 {\n    fn div(self, other: u16) -> u16 {\n        self / other\n    }\n}\nimpl Div for u8 {\n    fn div(self, other: u8) -> u8 {\n        self / other\n    }\n}\nimpl Div for u1 {\n    fn div(self, other: u1) -> u1 {\n        self / other\n    }\n}\n\nimpl Div for i8 {\n    fn div(self, other: i8) -> i8 {\n        self / other\n    }\n}\nimpl Div for i16 {\n    fn div(self, other: i16) -> i16 {\n        self / other\n    }\n}\nimpl Div for i32 {\n    fn div(self, other: i32) -> i32 {\n        self / other\n    }\n}\nimpl Div for i64 {\n    fn div(self, other: i64) -> i64 {\n        self / other\n    }\n}\n\n// docs:start:rem-trait\npub trait Rem {\n    fn rem(self, other: Self) -> Self;\n}\n// docs:end:rem-trait\n\nimpl Rem for u128 {\n    fn rem(self, other: u128) -> u128 {\n        self % other\n    }\n}\nimpl Rem for u64 {\n    fn rem(self, other: u64) -> u64 {\n        self % other\n    }\n}\nimpl Rem for u32 {\n    fn rem(self, other: u32) -> u32 {\n        self % other\n    }\n}\nimpl Rem for u16 {\n    fn rem(self, other: u16) -> u16 {\n        self % other\n    }\n}\nimpl Rem for u8 {\n    fn rem(self, other: u8) -> u8 {\n        self % other\n    }\n}\nimpl Rem for u1 {\n    fn rem(self, other: u1) -> u1 {\n        self % other\n    }\n}\n\nimpl Rem for i8 {\n    fn rem(self, other: i8) -> i8 {\n        self % other\n    }\n}\nimpl Rem for i16 {\n    fn rem(self, other: i16) -> i16 {\n        self % other\n    }\n}\nimpl Rem for i32 {\n    fn rem(self, other: i32) -> i32 {\n        self % other\n    }\n}\nimpl Rem for i64 {\n    fn rem(self, other: i64) -> i64 {\n        self % other\n    }\n}\n\n// docs:start:neg-trait\npub trait Neg {\n    fn neg(self) -> Self;\n}\n// docs:end:neg-trait\n\n// docs:start:neg-trait-impls\nimpl Neg for Field {\n    fn neg(self) -> Field {\n        -self\n    }\n}\n\nimpl Neg for i8 {\n    fn neg(self) -> i8 {\n        -self\n    }\n}\nimpl Neg for i16 {\n    fn neg(self) -> i16 {\n        -self\n    }\n}\nimpl Neg for i32 {\n    fn neg(self) -> i32 {\n        -self\n    }\n}\nimpl Neg for i64 {\n    fn neg(self) -> i64 {\n        -self\n    }\n}\n// docs:end:neg-trait-impls\n"
    },
    "46": {
      "path": "std/option.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"
    },
    "47": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "54": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-contracts/contracts/fee_juice_contract/src/lib.nr",
      "source": "use dep::aztec::context::PublicContext;\nuse dep::aztec::prelude::AztecAddress;\nuse dep::aztec::protocol_types::hash::sha256_to_field;\nuse dep::aztec::protocol_types::traits::ToField;\n\npub fn calculate_fee<TPublicContext>(context: PublicContext) -> Field {\n    context.transaction_fee()\n}\n\npub fn get_bridge_gas_msg_hash(owner: AztecAddress, amount: u128) -> Field {\n    let mut hash_bytes = [0; 68];\n    let recipient_bytes: [u8; 32] = owner.to_field().to_be_bytes();\n    let amount_bytes: [u8; 32] = (amount as Field).to_be_bytes();\n\n    // The purpose of including the following selector is to make the message unique to that specific call. Note that\n    // it has nothing to do with calling the function.\n    let selector = comptime { keccak256::keccak256(\"claim(bytes32,uint256)\".as_bytes(), 22) };\n\n    for i in 0..4 {\n        hash_bytes[i] = selector[i];\n    }\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = recipient_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n    }\n\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n"
    },
    "55": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-contracts/contracts/fee_juice_contract/src/main.nr",
      "source": "mod lib;\n\nuse dep::aztec::macros::aztec;\n\n#[aztec]\npub contract FeeJuice {\n    use dep::aztec::{\n        macros::{functions::{internal, private, public, view}, storage::storage},\n        protocol_types::{\n            address::{AztecAddress, EthAddress},\n            constants::FEE_JUICE_ADDRESS,\n            traits::ToField,\n        },\n        state_vars::{Map, PublicMutable},\n    };\n\n    use crate::lib::get_bridge_gas_msg_hash;\n    use std::ops::Add;\n\n    #[storage]\n    struct Storage<Context> {\n        // This map is accessed directly by protocol circuits to check balances for fee payment.\n        // Do not change this storage layout unless you also update the base rollup circuits.\n        balances: Map<AztecAddress, PublicMutable<u128, Context>, Context>,\n    }\n\n    #[private]\n    fn claim(to: AztecAddress, amount: u128, secret: Field, message_leaf_index: Field) {\n        let content_hash = get_bridge_gas_msg_hash(to, amount);\n        let portal_address = EthAddress::from_field(FEE_JUICE_ADDRESS.to_field());\n        assert(!portal_address.is_zero());\n\n        // Consume message and emit nullifier\n        context.consume_l1_to_l2_message(content_hash, secret, portal_address, message_leaf_index);\n\n        // TODO(palla/gas) Emit an unencrypted log to announce which L1 to L2 message has been claimed\n        // Otherwise, we cannot trace L1 deposits to their corresponding claims on L2\n        FeeJuice::at(context.this_address())._increase_public_balance(to, amount).enqueue(\n            &mut context,\n        );\n    }\n\n    #[public]\n    #[internal]\n    fn _increase_public_balance(to: AztecAddress, amount: u128) {\n        let new_balance = storage.balances.at(to).read().add(amount);\n        storage.balances.at(to).write(new_balance);\n    }\n\n    #[public]\n    #[view]\n    fn check_balance(fee_limit: u128) {\n        assert(storage.balances.at(context.msg_sender()).read() >= fee_limit, \"Balance too low\");\n    }\n\n    // utility function for testing\n    #[public]\n    #[view]\n    fn balance_of_public(owner: AztecAddress) -> pub u128 {\n        storage.balances.at(owner).read()\n    }\n}\n"
    },
    "6": {
      "path": "std/collections/bounded_vec.nr",
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n"
    },
    "65": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/capsules/mod.nr",
      "source": "use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push<let N: u32>(self, value: T)\n    where\n        T: Serialize<N>,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get<let N: u32>(self, index: u32) -> T\n    where\n        T: Deserialize<N>,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().utility().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n}\n"
    },
    "66": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    traits::{Deserialize, ToField},\n};\n\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\n\nuse crate::hash::{hash_args, hash_calldata};\nuse crate::oracle::execution_cache;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\n// PrivateCallInterface\n\npub struct PrivateCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateVoidCallInterface\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticCallInterface\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticVoidCallInterface\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static: true }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicCallInterface\n\npub struct PublicCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            gas_opts: GasOpts::default(),\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicVoidCallInterface\n\npub struct PublicVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n\n    pub fn set_as_teardown(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.set_public_teardown_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            false,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticCallInterface\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticVoidCallInterface\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n"
    },
    "73": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use dep::protocol_types::debug_log::debug_log_format;\n\nuse crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n\n        // WARNING(https://github.com/AztecProtocol/aztec-packages/issues/10558): if you delete this debug_log_format line, some tests fail.\n        debug_log_format(\n            \"Context.note_hashes, after pushing new note hash: {0}\",\n            self.note_hashes.storage().map(|nh: NoteHash| nh.value),\n        );\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request =\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index],\n                },\n            );\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "74": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_opcode(gas, address, args)\n}\n\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "76": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/context/utility_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    },
    "78": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/discovery/mod.nr",
      "source": "use crate::encrypted_logs::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\nuse protocol_types::{address::AztecAddress, debug_log::debug_log};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod pending_tagged_log;\npub mod private_logs;\npub mod private_notes;\n\n/// We reserve two fields in the note private log that are not part of the note content: one for the storage slot, and\n/// one for the combined log and note type ID.\nglobal PRIVATE_LOG_EXPANDED_METADATA_LEN: u32 = 1;\n\n/// The maximum length of the log's content, i.e. after log type ID and metadata extraction.\npub global MAX_LOG_CONTENT_LEN: u32 =\n    PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS - PRIVATE_LOG_EXPANDED_METADATA_LEN;\n\nuse private_notes::MAX_NOTE_PACKED_LEN;\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, nonce, storage slot and note type\n/// ID and attempts to compute its note hash (not siloed by nonce nor address) and inner nullifier (not siloed by\n/// address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    private_logs::fetch_and_process_private_tagged_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    partial_notes::fetch_and_process_public_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n}\n"
    },
    "79": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/discovery/nonce_discovery.nr",
      "source": "use crate::{\n    discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    array::for_each_in_bounded_vec(\n        unique_note_hashes_in_tx,\n        |expected_unique_note_hash, i| {\n            // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n            // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n            let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n            // Given nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n            // the note hash at the array index we're currently processing.\n            // TODO(#11157): handle failed note_hash_and_nullifier computation\n            let hashes = compute_note_hash_and_nullifier(\n                packed_note,\n                storage_slot,\n                note_type_id,\n                contract_address,\n                candidate_nonce,\n            )\n                .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n            let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n            let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n            if unique_note_hash == expected_unique_note_hash {\n                // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n                // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n                // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n                // PXE may fail to realize that a given note has been nullified already, and calls to the application\n                // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n                // application already has more direct means of making a call to it fail the transaction.\n                discovered_notes.push(\n                    DiscoveredNoteInfo {\n                        nonce: candidate_nonce,\n                        note_hash: hashes.note_hash,\n                        inner_nullifier: hashes.inner_nullifier,\n                    },\n                );\n\n                // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n                // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n                // notes containing random values in order to hide their contents.\n            }\n        },\n    );\n\n    debug_log_format(\n        \"Discovered a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n"
    },
    "80": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/discovery/partial_notes.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    discovery::{\n        ComputeNoteHashAndNullifier,\n        MAX_LOG_CONTENT_LEN,\n        nonce_discovery::{attempt_note_nonce_discovery, DiscoveredNoteInfo},\n    },\n    oracle::message_discovery::{deliver_note, get_log_by_tag},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::PUBLIC_LOG_DATA_SIZE_IN_FIELDS,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private log (e.g.\n/// the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_LOG_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// Public logs contain an extra field at the beginning with the address of the contract that emitted them, and partial\n/// notes emit their completion tag in the log, resulting in the first two fields in the public log not being part of\n/// the packed public content.\n// TODO(#10273): improve how contract log siloing is handled\npub global NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG: u32 = 2;\n\n/// The maximum length of the packed representation of public fields in a partial note. This is limited by public log\n/// size and extra fields in the log (e.g. the tag).\npub global MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH: u32 =\n    PUBLIC_LOG_DATA_SIZE_IN_FIELDS - NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG;\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_log(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    log_metadata: u64,\n    log_content: BoundedVec<Field, MAX_LOG_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_log(log_metadata, log_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for public logs that would result in the completion of pending partial notes, ultimately resulting in the\n/// notes being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_public_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    let mut i = 0;\n    while i < pending_partial_notes.len() {\n        let pending_partial_note: DeliveredPendingPartialNote = pending_partial_notes.get(i);\n\n        let maybe_log = get_log_by_tag(pending_partial_note.note_completion_log_tag);\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            i += 1 as u32;\n            // Note that we're not removing the pending partial note from the PXE DB, so we will continue searching\n            // for this tagged log when performing message discovery in the future until we either find it or the\n            // entry is somehow removed from the PXE DB.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public logs have an extra field at the beginning with the contract address, which we use to verify\n            // that we're getting the logs from the expected contract.\n            // TODO(#10273): improve how contract log siloing is handled\n            assert_eq(\n                log.log_content.get(0),\n                contract_address.to_field(),\n                \"Got a public log emitted by a different contract\",\n            );\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the log sans the extra fields) to get the\n            // complete packed content.\n            let packed_public_note_content: BoundedVec<_, MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH> =\n                array::subbvec(log.log_content, NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG);\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                packed_public_note_content,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            array::for_each_in_bounded_vec(\n                discovered_notes,\n                |discovered_note: DiscoveredNoteInfo, _| {\n                    // TODO:(#10728): decide how to handle notes that fail delivery. This could be due to e.g. a\n                    // temporary node connectivity issue - is simply throwing good enough here?\n                    assert(\n                        deliver_note(\n                            contract_address,\n                            pending_partial_note.storage_slot,\n                            discovered_note.nonce,\n                            complete_packed_note,\n                            discovered_note.note_hash,\n                            discovered_note.inner_nullifier,\n                            log.tx_hash,\n                            pending_partial_note.recipient,\n                        ),\n                        \"Failed to deliver note\",\n                    );\n                },\n            );\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            // TODO(#11627): only remove the pending entry if we actually process a log that results in the note\n            // being completed.\n            pending_partial_notes.remove(i);\n\n            // We don't increment `i` here, because CapsuleArray is contiguous and its `remove(...)` function\n            // shifts the elements to the left if the removed element is not the last element.\n        }\n    }\n}\n\nfn decode_partial_note_private_log(\n    log_metadata: u64,\n    log_content: BoundedVec<Field, MAX_LOG_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = log_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        log_content.len() > PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note log: all partial note private logs must have at least {PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private log encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = log_content.get(0);\n    let note_completion_log_tag = log_content.get(1);\n\n    let packed_private_note_content = array::subbvec(log_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n"
    },
    "82": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/discovery/private_logs.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    discovery::{\n        ComputeNoteHashAndNullifier,\n        MAX_LOG_CONTENT_LEN,\n        partial_notes::process_partial_note_private_log,\n        pending_tagged_log::{PENDING_TAGGED_LOG_ARRAY_BASE_SLOT, PendingTaggedLog},\n        PRIVATE_LOG_EXPANDED_METADATA_LEN,\n        private_notes::process_private_note_log,\n    },\n    encrypted_logs::{\n        log_assembly_strategies::default_aes128::aes128::AES128,\n        log_encryption::LogEncryption,\n        log_type::{\n            PARTIAL_NOTE_PRIVATE_LOG_TYPE_ID, PRIVATE_EVENT_LOG_TYPE_ID, PRIVATE_NOTE_LOG_TYPE_ID,\n        },\n        metadata_packing::from_expanded_metadata,\n    },\n    oracle::{logs::store_private_event_log, message_discovery::sync_notes},\n    utils::array,\n};\n\nuse protocol_types::{\n    abis::event_selector::EventSelector,\n    address::AztecAddress,\n    debug_log::{debug_log, debug_log_format},\n    traits::FromField,\n};\n\n// TODO(#12750): don't make these values assume we're using AES.\nuse crate::encrypted_logs::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\n/// Searches for private logs that signal new private notes that are then delivered to PXE, or new partial notes that\n/// are stored in the PXE capsules so that `fetch_and_process_public_partial_note_completion_logs` can later search for\n/// public logs that will complete them.\npub unconstrained fn fetch_and_process_private_tagged_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `syncNotes` oracle.\n    // This makes PXE synchronize tags, download logs and store the pending tagged logs in capsule array which are then\n    // retrieved and processed here.\n    sync_notes(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    // Get logs from capsules\n    let logs =\n        CapsuleArray::<PendingTaggedLog>::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n    let len = logs.len();\n\n    // We iterate over the logs in reverse order to avoid shifting elements.\n    let mut i = len;\n    while i > 0 {\n        i -= 1;\n\n        // Get and process each log\n        let log = logs.get(i);\n        process_log(contract_address, compute_note_hash_and_nullifier, log);\n\n        // Remove the log from the capsule array\n        logs.remove(i);\n    }\n}\n\n/// Processes a log's ciphertext by decrypting it and then searching the plaintext for private notes or partial notes.\n///\n/// Private notes result in nonce discovery being performed prior to delivery, which requires knowledge of the\n/// transaction hash in which the notes would've been created (typically the same transaction in which the log was\n/// emitted), along with the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier`\n/// function.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\nunconstrained fn process_log<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    pending_tagged_log: PendingTaggedLog,\n) {\n    debug_log_format(\n        \"Processing log with tag {0}\",\n        [pending_tagged_log.log.get(0)],\n    );\n\n    // The tag is ignored for now.\n    let ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n    let log_plaintext = AES128::decrypt_log(ciphertext, pending_tagged_log.recipient);\n\n    // The first thing to do after decrypting the log is to determine what type of private log we're processing. We\n    // have 3 log types: private note logs, partial note logs and event logs.\n\n    let (log_type_id, log_metadata, log_content) = decode_log_plaintext(log_plaintext);\n\n    if log_type_id == PRIVATE_NOTE_LOG_TYPE_ID {\n        debug_log(\"Processing private note log\");\n\n        process_private_note_log(\n            contract_address,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.unique_note_hashes_in_tx,\n            pending_tagged_log.first_nullifier_in_tx,\n            pending_tagged_log.recipient,\n            compute_note_hash_and_nullifier,\n            log_metadata,\n            log_content,\n        );\n    } else if log_type_id == PARTIAL_NOTE_PRIVATE_LOG_TYPE_ID {\n        debug_log(\"Processing partial note private log\");\n\n        process_partial_note_private_log(\n            contract_address,\n            pending_tagged_log.recipient,\n            log_metadata,\n            log_content,\n        );\n    } else if log_type_id == PRIVATE_EVENT_LOG_TYPE_ID {\n        debug_log(\"Processing private event log\");\n\n        // In the case of event logs, the log metadata is the event selector.\n        let event_selector = EventSelector::from_field(log_metadata as Field);\n\n        store_private_event_log(\n            contract_address,\n            pending_tagged_log.recipient,\n            event_selector,\n            log_content,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.log_index_in_tx,\n        );\n    } else {\n        debug_log_format(\n            \"Unknown log type id {0} (probably belonging to an event log)\",\n            [log_type_id as Field],\n        );\n    }\n}\n\n/// Decodes a log's plaintext following aztec-nr's standard log encoding.\n///\n/// The standard private log layout is composed of:\n///  - an initial field called the 'expanded metadata'\n///  - an arbitrary number of fields following that called the 'log content'\n///\n/// ```\n/// log_plaintext: [ log_expanded_metadata, ...log_content ]\n/// ```\n///\n/// The expanded metadata itself is (currently) interpreted as a u128, of which:\n///  - the upper 64 bits are the log type id\n///  - the lower 64 bits are called the 'log metadata'\n///\n/// ```\n/// log_expanded_metadata: [  log_type_id    |  log_metadata  ]\n///                        <---  64 bits --->|<--- 64 bits --->\n/// ```\n///\n/// The meaning of the log metadata and log content depend on the value of the log type id. Note that there is\n/// nothing special about the log metadata, it _can_ be considered part of the content. It just has a different name\n/// to make it distinct from the log content given that it is not a full field.\nunconstrained fn decode_log_plaintext(\n    log_plaintext: BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>,\n) -> (u64, u64, BoundedVec<Field, MAX_LOG_CONTENT_LEN>) {\n    assert(\n        log_plaintext.len() >= PRIVATE_LOG_EXPANDED_METADATA_LEN,\n        f\"Invalid log plaintext: all logs must be decrypted into at least {PRIVATE_LOG_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If PRIVATE_LOG_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the log encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_LOG_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for PRIVATE_LOG_EXPANDED_METADATA_LEN\",\n    );\n\n    // See the documentation of this function for a description of the log layout\n    let expanded_log_metadata = log_plaintext.get(0);\n    let (log_metadata, log_type_id) = from_expanded_metadata(expanded_log_metadata);\n    let log_content = array::subbvec(log_plaintext, PRIVATE_LOG_EXPANDED_METADATA_LEN);\n\n    (log_type_id, log_metadata, log_content)\n}\n"
    },
    "83": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/discovery/private_notes.nr",
      "source": "use crate::{\n    discovery::{\n        ComputeNoteHashAndNullifier,\n        MAX_LOG_CONTENT_LEN,\n        nonce_discovery::{attempt_note_nonce_discovery, DiscoveredNoteInfo},\n    },\n    oracle,\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note log content that are not the note's packed representation.\nglobal PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the log (e.g. log type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_LOG_CONTENT_LEN - PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_log<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    log_metadata: u64,\n    log_content: BoundedVec<Field, MAX_LOG_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_log(log_metadata, log_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private log\",\n        [discovered_notes.len() as Field],\n    );\n\n    array::for_each_in_bounded_vec(\n        discovered_notes,\n        |discovered_note: DiscoveredNoteInfo, _| {\n            // TODO:(#10728): handle notes that fail delivery. This could be due to e.g. a temporary node connectivity\n            // issue, and we should perhaps not have marked the tag index as taken.\n            assert(\n                oracle::message_discovery::deliver_note(\n                    contract_address,\n                    storage_slot,\n                    discovered_note.nonce,\n                    packed_note,\n                    discovered_note.note_hash,\n                    discovered_note.inner_nullifier,\n                    tx_hash,\n                    recipient,\n                ),\n                \"Failed to deliver note\",\n            );\n        },\n    );\n}\n\nfn decode_private_note_log(\n    log_metadata: u64,\n    log_content: BoundedVec<Field, MAX_LOG_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = log_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        log_content.len() > PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note log: all private note logs must have at least {PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the private note log encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = log_content.get(0);\n    let packed_note = array::subbvec(log_content, PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n"
    },
    "84": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypt/aes128.nr",
      "source": "use dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::utils::point::point_to_bytes;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n"
    },
    "87": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/encrypted_logs/log_assembly_strategies/default_aes128/aes128.nr",
      "source": "use crate::{\n    encrypted_logs::{\n        encrypt::aes128::derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256,\n        log_assembly_strategies::default_aes128::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n        log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_CIPHERTEXT_LEN,\n            PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n    },\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign},\n        random::get_random_bytes,\n    },\n};\nuse std::aes128::aes128_encrypt;\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) as bool;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        encrypted_logs::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n"
    },
    "96": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/encrypted_logs/metadata_packing.nr",
      "source": "global U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\npub fn to_expanded_metadata(log_metadata: u64, log_type: u64) -> Field {\n    let metadata_field = log_metadata as Field;\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (log_type as Field) * U64_SHIFT_MULTIPLIER;\n    type_field + metadata_field\n}\n\npub fn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let metadata = (input as u64);\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    let log_type = ((input - (metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    (metadata, log_type)\n}\n\nmod tests {\n    use super::{from_expanded_metadata, to_expanded_metadata};\n\n    global U64_MAX: Field = 2.pow_32(64) - 1;\n    global U128_MAX: Field = 2.pow_32(128) - 1;\n\n    #[test]\n    fn packing_metadata() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX as u64, U64_MAX as u64);\n        let (metadata, log_type) = from_expanded_metadata(packed);\n        assert(metadata == U64_MAX as u64, \"Metadata bits should be all 1s\");\n        assert(log_type == U64_MAX as u64, \"Log type bits should be all 1s\");\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(0, U64_MAX as u64);\n        let (metadata, log_type) = from_expanded_metadata(packed);\n        assert(metadata == 0, \"Metadata bits should be 0\");\n        assert(log_type == U64_MAX as u64, \"Log type bits should be all 1s\");\n\n        // Test case 3: Only metadata bits set\n        let packed = to_expanded_metadata(U64_MAX as u64, 0);\n        let (metadata, log_type) = from_expanded_metadata(packed);\n        assert(metadata == U64_MAX as u64, \"Metadata bits should be all 1s\");\n        assert(log_type == 0, \"Log type bits should be 0\");\n\n        // Test case 4: Zero\n        let packed = to_expanded_metadata(0, 0);\n        let (metadata, log_type) = from_expanded_metadata(packed);\n        assert(metadata == 0, \"Metadata bits should be 0\");\n        assert(log_type == 0, \"Log type bits should be 0\");\n    }\n\n    #[test]\n    fn unpacking_metadata() {\n        // Test case 1: All bits set\n        let input = U128_MAX;\n        let (metadata, log_type) = from_expanded_metadata(input);\n        assert(metadata == U64_MAX as u64, \"Metadata bits should be all 1s\");\n        assert(log_type == U64_MAX as u64, \"Log type bits should be all 1s\");\n\n        // Test case 2: Only log type bits set\n        let input = U128_MAX - U64_MAX;\n        let (metadata, log_type) = from_expanded_metadata(input);\n        assert(metadata == 0, \"Metadata bits should be 0\");\n        assert(log_type == U64_MAX as u64, \"Log type bits should be all 1s\");\n\n        // Test case 3: Only metadata bits set\n        let input = U64_MAX;\n        let (metadata, log_type) = from_expanded_metadata(input);\n        assert(metadata == U64_MAX as u64, \"Metadata bits should be all 1s\");\n        assert(log_type == 0, \"Log type bits should be 0\");\n\n        // Test case 4: Zero\n        let input = 0;\n        let (metadata, log_type) = from_expanded_metadata(input);\n        assert(metadata == 0, \"Metadata bits should be 0\");\n        assert(log_type == 0, \"Log type bits should be 0\");\n    }\n\n    #[test]\n    fn roundtrip_metadata(original_metadata: u64, original_type: u64) {\n        let packed = to_expanded_metadata(original_metadata, original_type);\n        let (unpacked_metadata, unpacked_type) = from_expanded_metadata(packed);\n        assert(original_type == unpacked_type, \"Log type bits should match after roundtrip\");\n        assert(\n            original_metadata == unpacked_metadata,\n            \"Metadata bits should match after roundtrip\",\n        );\n    }\n}\n"
    }
  }
}
