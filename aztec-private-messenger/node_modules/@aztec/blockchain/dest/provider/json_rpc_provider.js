import { retry } from '@aztec/barretenberg/retry';
import { createDebugLogger } from '@aztec/barretenberg/log';
const log = createDebugLogger('json_rpc_provider');
export class JsonRpcProvider {
    constructor(host, netMustSucceed = false) {
        this.host = host;
        this.netMustSucceed = netMustSucceed;
        this.id = 0;
    }
    async request({ method, params }) {
        const body = {
            jsonrpc: '2.0',
            id: this.id++,
            method,
            params,
        };
        log(`->`, body);
        const res = await this.fetch(body);
        log(`<-`, res);
        if (res.error) {
            throw res.error;
        }
        return res.result;
    }
    on() {
        throw new Error('Events not supported.');
    }
    removeListener() {
        throw new Error('Events not supported.');
    }
    async fetch(body) {
        const fn = async () => {
            const resp = await fetch(this.host, {
                method: 'POST',
                body: JSON.stringify(body),
                headers: { 'content-type': 'application/json' },
            });
            if (!resp.ok) {
                throw new Error(resp.statusText);
            }
            const text = await resp.text();
            try {
                return JSON.parse(text);
            }
            catch (err) {
                throw new Error(`Failed to parse body as JSON: ${text}`);
            }
        };
        if (this.netMustSucceed) {
            return await retry(fn, 'JsonRpcProvider request');
        }
        return await fn();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbl9ycGNfcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcHJvdmlkZXIvanNvbl9ycGNfcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRTVELE1BQU0sR0FBRyxHQUFHLGlCQUFpQixDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFFbkQsTUFBTSxPQUFPLGVBQWU7SUFHMUIsWUFBb0IsSUFBWSxFQUFVLGlCQUFpQixLQUFLO1FBQTVDLFNBQUksR0FBSixJQUFJLENBQVE7UUFBVSxtQkFBYyxHQUFkLGNBQWMsQ0FBUTtRQUZ4RCxPQUFFLEdBQUcsQ0FBQyxDQUFDO0lBRW9ELENBQUM7SUFFN0QsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQW9CO1FBQ3ZELE1BQU0sSUFBSSxHQUFHO1lBQ1gsT0FBTyxFQUFFLEtBQUs7WUFDZCxFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUNiLE1BQU07WUFDTixNQUFNO1NBQ1AsQ0FBQztRQUNGLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDaEIsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25DLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDZixJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUU7WUFDYixNQUFNLEdBQUcsQ0FBQyxLQUFLLENBQUM7U0FDakI7UUFDRCxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUM7SUFDcEIsQ0FBQztJQUVELEVBQUU7UUFDQSxNQUFNLElBQUksS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELGNBQWM7UUFDWixNQUFNLElBQUksS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVPLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBUztRQUMzQixNQUFNLEVBQUUsR0FBRyxLQUFLLElBQUksRUFBRTtZQUNwQixNQUFNLElBQUksR0FBRyxNQUFNLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNsQyxNQUFNLEVBQUUsTUFBTTtnQkFDZCxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7Z0JBQzFCLE9BQU8sRUFBRSxFQUFFLGNBQWMsRUFBRSxrQkFBa0IsRUFBRTthQUNoRCxDQUFDLENBQUM7WUFFSCxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRTtnQkFDWixNQUFNLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQzthQUNsQztZQUVELE1BQU0sSUFBSSxHQUFHLE1BQU0sSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQy9CLElBQUk7Z0JBQ0YsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ3pCO1lBQUMsT0FBTyxHQUFHLEVBQUU7Z0JBQ1osTUFBTSxJQUFJLEtBQUssQ0FBQyxpQ0FBaUMsSUFBSSxFQUFFLENBQUMsQ0FBQzthQUMxRDtRQUNILENBQUMsQ0FBQztRQUVGLElBQUksSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUN2QixPQUFPLE1BQU0sS0FBSyxDQUFDLEVBQUUsRUFBRSx5QkFBeUIsQ0FBQyxDQUFDO1NBQ25EO1FBRUQsT0FBTyxNQUFNLEVBQUUsRUFBRSxDQUFDO0lBQ3BCLENBQUM7Q0FDRiJ9