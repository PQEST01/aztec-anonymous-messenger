/* eslint-disable @typescript-eslint/no-unused-vars */
import { EthAddress } from '@aztec/barretenberg/address';
import { TxHash } from '@aztec/barretenberg/blockchain';
import { Web3Provider } from '@ethersproject/providers';
import { fromBaseUnits, toBaseUnits } from '../../units.js';
const fixEthersStackTrace = (err) => {
    err.stack += new Error().stack;
    throw err;
};
export class EthAsset {
    constructor(provider, minConfirmations = 1) {
        this.minConfirmations = minConfirmations;
        this.provider = new Web3Provider(provider);
    }
    getStaticInfo() {
        return {
            address: EthAddress.ZERO,
            name: 'Eth',
            symbol: 'ETH',
            decimals: 18,
            gasLimit: 30000,
        };
    }
    getUserNonce(account) {
        return Promise.resolve(BigInt(0));
    }
    async balanceOf(account) {
        const balance = await this.provider.getBalance(account.toString());
        return BigInt(balance.toString());
    }
    allowance(owner, receiver) {
        throw new Error('Allowance unsupported for ETH.');
    }
    approve(value, owner, receiver) {
        throw new Error('Approve unsupported for ETH.');
    }
    mint(value, account) {
        throw new Error('Mint unsupported for ETH.');
    }
    async transfer(value, from, to, options = {}) {
        const provider = options.provider ? new Web3Provider(options.provider) : this.provider;
        const signer = provider.getSigner(from.toString());
        const tx = await signer
            .sendTransaction({
            to: to.toString(),
            value: `0x${value.toString(16)}`,
            gasLimit: options.gasLimit,
            nonce: options.nonce,
        })
            .catch(fixEthersStackTrace);
        const receipt = await tx.wait(this.minConfirmations);
        return TxHash.fromString(receipt.transactionHash);
    }
    fromBaseUnits(value, precision) {
        return fromBaseUnits(value, 18, precision);
    }
    toBaseUnits(value) {
        return toBaseUnits(value, 18);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXRoX2Fzc2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbnRyYWN0cy9hc3NldC9ldGhfYXNzZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0RBQXNEO0FBQ3RELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUN6RCxPQUFPLEVBQTBDLE1BQU0sRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ2hHLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsYUFBYSxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTVELE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxHQUFVLEVBQUUsRUFBRTtJQUN6QyxHQUFHLENBQUMsS0FBTSxJQUFJLElBQUksS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDO0lBQ2hDLE1BQU0sR0FBRyxDQUFDO0FBQ1osQ0FBQyxDQUFDO0FBRUYsTUFBTSxPQUFPLFFBQVE7SUFHbkIsWUFBWSxRQUEwQixFQUFVLG1CQUFtQixDQUFDO1FBQXBCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBSTtRQUNsRSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRCxhQUFhO1FBQ1gsT0FBTztZQUNMLE9BQU8sRUFBRSxVQUFVLENBQUMsSUFBSTtZQUN4QixJQUFJLEVBQUUsS0FBSztZQUNYLE1BQU0sRUFBRSxLQUFLO1lBQ2IsUUFBUSxFQUFFLEVBQUU7WUFDWixRQUFRLEVBQUUsS0FBSztTQUNoQixDQUFDO0lBQ0osQ0FBQztJQUVELFlBQVksQ0FBQyxPQUFtQjtRQUM5QixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELEtBQUssQ0FBQyxTQUFTLENBQUMsT0FBbUI7UUFDakMsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNuRSxPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQsU0FBUyxDQUFDLEtBQWlCLEVBQUUsUUFBb0I7UUFDL0MsTUFBTSxJQUFJLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFRCxPQUFPLENBQUMsS0FBYSxFQUFFLEtBQWlCLEVBQUUsUUFBb0I7UUFDNUQsTUFBTSxJQUFJLEtBQUssQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFRCxJQUFJLENBQUMsS0FBYSxFQUFFLE9BQW1CO1FBQ3JDLE1BQU0sSUFBSSxLQUFLLENBQUMsMkJBQTJCLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFhLEVBQUUsSUFBZ0IsRUFBRSxFQUFjLEVBQUUsVUFBeUIsRUFBRTtRQUN6RixNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLFlBQVksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDdkYsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNuRCxNQUFNLEVBQUUsR0FBRyxNQUFNLE1BQU07YUFDcEIsZUFBZSxDQUFDO1lBQ2YsRUFBRSxFQUFFLEVBQUUsQ0FBQyxRQUFRLEVBQUU7WUFDakIsS0FBSyxFQUFFLEtBQUssS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUNoQyxRQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVE7WUFDMUIsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLO1NBQ3JCLENBQUM7YUFDRCxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUM5QixNQUFNLE9BQU8sR0FBRyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDckQsT0FBTyxNQUFNLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRU0sYUFBYSxDQUFDLEtBQWEsRUFBRSxTQUFrQjtRQUNwRCxPQUFPLGFBQWEsQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFTSxXQUFXLENBQUMsS0FBYTtRQUM5QixPQUFPLFdBQVcsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDaEMsQ0FBQztDQUNGIn0=