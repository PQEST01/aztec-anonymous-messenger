import { EthAddress } from '@aztec/barretenberg/address';
import { Contract, ContractFactory } from 'ethers';
import { formatBytes32String } from 'ethers/lib/utils.js';
import { ProxyAdminContract, ProxyContract, ProxyDeployer } from '../../abis.js';
/**
 * Thin wrapper around the Proxy Admin contract.
 */
export class ProxyAdmin {
    constructor(signer) {
        this.signer = signer;
        this.vanitySalt = formatBytes32String('Aztec Connect');
        this.proxyAdmin = new Contract(EthAddress.ZERO.toString(), ProxyAdminContract.abi, this.signer);
        this.proxyDeployer = new Contract(EthAddress.ZERO.toString(), ProxyDeployer.abi, this.signer);
    }
    connectNewSigner(signer) {
        this.signer = signer;
        this.connectToInstance(this.address);
    }
    connectToInstance(address) {
        this.proxyAdmin = new Contract(address.toString(), ProxyAdminContract.abi, this.signer);
    }
    async deployInstance() {
        const factory = new ContractFactory(ProxyAdminContract.abi, ProxyAdminContract.bytecode, this.signer);
        this.proxyAdmin = await (await factory.deploy()).deployed();
        const deployerFactory = new ContractFactory(ProxyDeployer.abi, ProxyDeployer.bytecode, this.signer);
        this.proxyDeployer = await (await deployerFactory.deploy()).deployed();
    }
    get address() {
        return EthAddress.fromString(this.proxyAdmin.address);
    }
    get contract() {
        return this.proxyAdmin;
    }
    async owner() {
        return EthAddress.fromString(await this.proxyAdmin.owner());
    }
    async getProxyAdmin(proxy) {
        return await this.proxyAdmin.getProxyAdmin(proxy.toString());
    }
    async getProxyImplementation(proxy) {
        return await this.proxyAdmin.getProxyImplementation(proxy.toString());
    }
    async changeProxyAdmin(proxy, newAdmin) {
        await this.proxyAdmin.changeProxyAdmin(proxy.toString(), newAdmin.toString());
    }
    async transferProxyAdminOwnership(newOwner) {
        await this.proxyAdmin.transferOwnership(newOwner.toString());
    }
    async upgradeUNSAFE(proxy, implementationFactory, constructorArgs) {
        const implementation = await (await implementationFactory.deploy(...constructorArgs)).deployed();
        await this.proxyAdmin.upgrade(proxy.toString(), implementation.address);
        return implementation.attach(proxy.toString());
    }
    async upgradeAndInitializeWithConstructor(proxy, implementationFactory, initializeArgs, constructorArgs) {
        const implementation = await (await implementationFactory.deploy(...constructorArgs)).deployed();
        const calldata = implementation.interface.encodeFunctionData('initialize', initializeArgs);
        await this.proxyAdmin.upgradeAndCall(proxy.toString(), implementation.address, calldata);
        return implementation.attach(proxy.toString());
    }
    async deployProxyUNSAFE(implementationFactory, constructorArgs) {
        const implementation = await (await implementationFactory.deploy(...constructorArgs)).deployed();
        const proxyFactory = new ContractFactory(ProxyContract.abi, ProxyContract.bytecode, this.signer);
        const calldata = '0x';
        const proxy = await (await proxyFactory.deploy(implementation.address, this.proxyAdmin.address, calldata)).deployed();
        return implementation.attach(proxy.address);
    }
    async deployProxyAndInitializeWithConstructor(implementationFactory, initializeArgs, constructorArgs) {
        const implementation = await (await implementationFactory.deploy(...constructorArgs)).deployed();
        const calldata = implementation.interface.encodeFunctionData('initialize', initializeArgs);
        const tx = await (await this.proxyDeployer.deployProxy(implementation.address, this.proxyAdmin.address, calldata, this.vanitySalt)).wait();
        const events = tx.events;
        const proxyDeployedEvent = events[events.length - 1];
        const proxyAddress = proxyDeployedEvent.args['proxy'];
        const proxy = new Contract(proxyAddress, ProxyContract.abi, this.signer);
        return implementation.attach(proxy.address);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJveHlfYWRtaW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29udHJhY3RzL3JvbGx1cF9wcm9jZXNzb3IvcHJveHlfYWRtaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3pELE9BQU8sRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFVLE1BQU0sUUFBUSxDQUFDO0FBQzNELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzFELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWpGOztHQUVHO0FBQ0gsTUFBTSxPQUFPLFVBQVU7SUFNckIsWUFBb0IsTUFBYztRQUFkLFdBQU0sR0FBTixNQUFNLENBQVE7UUFGbEMsZUFBVSxHQUFXLG1CQUFtQixDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBR3hELElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxRQUFRLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2hHLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxRQUFRLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxhQUFhLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNoRyxDQUFDO0lBRUQsZ0JBQWdCLENBQUMsTUFBYztRQUM3QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxpQkFBaUIsQ0FBQyxPQUFtQjtRQUNuQyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksUUFBUSxD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