import { EthAddress } from '@aztec/barretenberg/address';
import { EthereumRpc, } from '@aztec/barretenberg/blockchain';
import { createLogger } from '@aztec/barretenberg/log';
import { Web3Provider } from '@ethersproject/providers';
import { Web3Signer } from '../signer/index.js';
import { EthAsset, TokenAsset } from './asset/index.js';
import { BridgeDataProvider } from './bridge_data_provider/bridge_data_provider.js';
import { EthPriceFeed, GasPriceFeed, TokenPriceFeed } from './price_feed/index.js';
import { RollupProcessor } from './rollup_processor/index.js';
/**
 * Facade around all Aztec smart contract classes.
 * Provides a factory function `fromAddresses` to simplify construction of all contract classes.
 * Exposes a more holistic interface to clients, than having to deal with individual contract classes.
 */
export class Contracts {
    constructor(rollupProcessor, assets, gasPriceFeed, priceFeeds, bridgeDataProvider, ethereumProvider, confirmations) {
        this.rollupProcessor = rollupProcessor;
        this.assets = assets;
        this.gasPriceFeed = gasPriceFeed;
        this.priceFeeds = priceFeeds;
        this.bridgeDataProvider = bridgeDataProvider;
        this.ethereumProvider = ethereumProvider;
        this.confirmations = confirmations;
        this.log = createLogger('Contracts');
        this.provider = new Web3Provider(ethereumProvider);
        this.ethereumRpc = new EthereumRpc(ethereumProvider);
    }
    static async fromAddresses(rollupContractAddress, permitHelperContractAddress, priceFeedContractAddresses, bridgeDataProviderAddress, ethereumProvider, confirmations) {
        const rollupProcessor = new RollupProcessor(rollupContractAddress, ethereumProvider, permitHelperContractAddress);
        const bridgeDataProvider = new BridgeDataProvider(bridgeDataProviderAddress, ethereumProvider);
        const assets = [new EthAsset(ethereumProvider)];
        const [gasPriceFeedAddress, ...tokenPriceFeedAddresses] = priceFeedContractAddresses;
        const gasPriceFeed = new GasPriceFeed(gasPriceFeedAddress, ethereumProvider);
        const priceFeeds = [
            new EthPriceFeed(),
            ...tokenPriceFeedAddresses.map(a => new TokenPriceFeed(a, ethereumProvider)),
        ];
        const contracts = new Contracts(rollupProcessor, assets, gasPriceFeed, priceFeeds, bridgeDataProvider, ethereumProvider, confirmations);
        await contracts.updateAssets();
        return contracts;
    }
    getProvider() {
        return this.ethereumProvider;
    }
    async updateAssets() {
        if ((await this.rollupProcessor.getSupportedAssetsLength()) === this.assets.length - 1) {
            return;
        }
        this.log('Initialising supported assets...');
        const supportedAssets = await this.rollupProcessor.getSupportedAssets();
        const newAssets = await Promise.all(supportedAssets
            .slice(this.assets.length - 1)
            .map(({ address, gasLimit }) => TokenAsset.fromAddress(address, this.ethereumProvider, gasLimit, this.confirmations)));
        this.assets = [...this.assets, ...newAssets];
        this.log(`Supported assets: ${this.assets.map(a => a.getStaticInfo().symbol)}`);
    }
    async getPerRollupState() {
        const defiInteractionHashes = await this.rollupProcessor.defiInteractionHashes();
        return {
            defiInteractionHashes,
        };
    }
    async getPerBlockState() {
        const { escapeOpen, blocksRemaining } = await this.rollupProcessor.getEscapeHatchStatus();
        const allowThirdPartyContracts = await this.rollupProcessor.getThirdPartyContractStatus();
        return {
            escapeOpen,
            numEscapeBlocksRemaining: blocksRemaining,
            allowThirdPartyContracts,
        };
    }
    async updatePerEthBlockState() {
        await this.updateAssets();
        this.bridgeDataProvider.updatePerEthBlockState();
    }
    getRollupBalance(assetId) {
        return this.assets[assetId].balanceOf(this.rollupProcessor.address);
    }
    getRollupContractAddress() {
        return this.rollupProcessor.address;
    }
    getBridgeDataProviderAddress() {
        return this.bridgeDataProvider.address;
    }
    getPermitHelperContractAddress() {
        return EthAddress.fromString(this.rollupProcessor.permitHelper.address);
    }
    async getVerifierContractAddress() {
        return await this.rollupProcessor.verifier();
    }
    async createRollupTxs(dataBuf, signatures, offchainTxData, txCallDataLimit) {
        return await this.rollupProcessor.createRollupTxs(dataBuf, signatures, offchainTxData, txCallDataLimit);
    }
    async sendTx(data, options = {}) {
        return await this.rollupProcessor.sendTx(data, options);
    }
    async estimateGas(data) {
        return await this.rollupProcessor.estimateGas(data);
    }
    async getRollupBlocksFrom(rollupId, minConfirmations) {
        return await this.rollupProcessor.getRollupBlocksFrom(rollupId, minConfirmations);
    }
    async callbackRollupBlocksFrom(rollupId, minConfirmations, cb) {
        return await this.rollupProcessor.callbackRollupBlocksFrom(rollupId, minConfirmations, cb);
    }
    async getRollupBlock(rollupId, minConfirmations) {
        return await this.rollupProcessor.getRollupBlock(rollupId, minConfirmations);
    }
    async getUserPendingDeposit(assetId, account) {
        return await this.rollupProcessor.getUserPendingDeposit(assetId, account);
    }
    async getTransactionByHash(txHash) {
        return await this.ethereumRpc.getTransactionByHash(txHash);
    }
    async getTransactionReceipt(txHash) {
        return await this.provider.getTransactionReceipt(txHash.toString());
    }
    async getChainId() {
        const { chainId } = await this.provider.getNetwork();
        return chainId;
    }
    async getBlockNumber() {
        return await this.ethereumRpc.blockNumber();
    }
    async signPersonalMessage(message, address) {
        const signer = new Web3Signer(this.ethereumProvider);
        return await signer.signPersonalMessage(message, address);
    }
    async signMessage(message, address) {
        const signer = new Web3Signer(this.ethereumProvider);
        return await signer.signMessage(message, address);
    }
    async signTypedData(data, address) {
        const signer = new Web3Signer(this.ethereumProvider);
        return await signer.signTypedData(data, address);
    }
    getAsset(assetId) {
        return this.assets[assetId];
    }
    async getAssetPrice(assetId) {
        return await this.priceFeeds[assetId].price();
    }
    getPriceFeed(assetId) {
        if (!this.priceFeeds[assetId]) {
            throw new Error(`Unknown assetId: ${assetId}`);
        }
        return this.priceFeeds[assetId];
    }
    getGasPriceFeed() {
        return this.gasPriceFeed;
    }
    async getUserProofApprovalStatus(address, txId) {
        return await this.rollupProcessor.getProofApprovalStatus(address, txId);
    }
    async isContract(address) {
        return (await this.provider.getCode(address.toString())) !== '0x';
    }
    async isEmpty(address) {
        return (!(await this.isContract(address)) &&
            (await this.provider.getBalance(address.toString())).toBigInt() == BigInt(0) &&
            (await this.provider.getTransactionCount(address.toString())) == 0);
    }
    async getFeeData() {
        const { maxFeePerGas, maxPriorityFeePerGas, gasPrice } = await this.provider.getFeeData();
        return {
            maxFeePerGas: maxFeePerGas !== null ? BigInt(maxFeePerGas.toString()) : BigInt(0),
            maxPriorityFeePerGas: maxPriorityFeePerGas !== null ? BigInt(maxPriorityFeePerGas.toString()) : BigInt(0),
            gasPrice: gasPrice !== null ? BigInt(gasPrice.toString()) : BigInt(0),
        };
    }
    getAssets() {
        return this.assets.map(a => a.getStaticInfo());
    }
    async getSupportedBridges() {
        return await this.rollupProcessor.getSupportedBridges();
    }
    async getRevertError(txHash) {
        return await this.rollupProcessor.getRevertError(txHash);
    }
    async getBridgeSubsidy(bridgeCallData) {
        return await this.bridgeDataProvider.getBridgeSubsidy(bridgeCallData);
    }
    async getBridgeData(bridgeAddressId) {
        return await this.bridgeDataProvider.getBridgeData(bridgeAddressId);
    }
}
//# sourceMappingURL=data:application/json;base64,