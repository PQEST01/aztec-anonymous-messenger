import { EthAddress } from '@aztec/barretenberg/address';
import { Web3Provider } from '@ethersproject/providers';
import { IBridgeDataProvider, MockBridgeDataProvider } from '../../abis.js';
import { Contract } from 'ethers';
import { BridgeCallData } from '@aztec/barretenberg/bridge_call_data';
// helper function to set the subsidy for a specified bridge on the mock data provider used in tests
export async function setMockBridgeSubsidy(provider, bridgeDataProviderAddress, bridgeAddressId, subsidy, signingAddress) {
    const web3Provider = new Web3Provider(provider);
    const signer = web3Provider.getSigner(signingAddress ? signingAddress.toString() : 0);
    const dataProviderContract = new Contract(bridgeDataProviderAddress.toString(), MockBridgeDataProvider.abi, signer);
    await dataProviderContract.updateSubsidy(bridgeAddressId, subsidy);
}
const createContract = (bridgeDataProviderAddress, provider) => {
    return new Contract(bridgeDataProviderAddress, IBridgeDataProvider.abi, new Web3Provider(provider));
};
// Class that acts as a wrapper for the on-chain contract
// Caches returned bridge data to reduce requests
// Resets cached bridge subsidy values requiring a refresh from chain
export class BridgeDataProvider {
    constructor(bridgeDataProviderAddress, ethereumProvider, contractCreation = () => createContract(bridgeDataProviderAddress.toString(), ethereumProvider)) {
        this.bridgeDataProviderAddress = bridgeDataProviderAddress;
        this.subsidyCache = {};
        this.bridgeDataCache = {};
        this.contract = contractCreation();
    }
    get address() {
        return this.bridgeDataProviderAddress;
    }
    async getBridgeSubsidy(bridgeCallData) {
        const bd = BridgeCallData.fromBigInt(bridgeCallData);
        const bridgeCallDataAsString = bd.toString();
        if (this.subsidyCache[bridgeCallDataAsString] === undefined) {
            const [criteria, subsidyInWei, subsidyInGas] = await this.contract.getAccumulatedSubsidyAmount(bridgeCallData);
            this.subsidyCache[bridgeCallDataAsString] = {
                addressId: bd.bridgeAddressId,
                subsidyInGas: subsidyInGas.toNumber(),
                subsidyInWei: subsidyInWei.toBigInt(),
                criteria: criteria.toBigInt(),
            };
        }
        return this.subsidyCache[bridgeCallDataAsString];
    }
    async getBridgeData(bridgeAddressId) {
        if (this.bridgeDataCache[bridgeAddressId] === undefined) {
            const data = await this.contract.getBridge(bridgeAddressId);
            const bridgeData = {
                address: EthAddress.fromString(data.bridgeAddress),
                addressId: data.bridgeAddressId.toNumber(),
                description: data.label,
            };
            this.bridgeDataCache[bridgeAddressId] = bridgeData;
        }
        return this.bridgeDataCache[bridgeAddressId];
    }
    updatePerEthBlockState() {
        // clear the subsidy cache with each eth block as this will continuosly change
        this.subsidyCache = {};
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJpZGdlX2RhdGFfcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29udHJhY3RzL2JyaWRnZV9kYXRhX3Byb3ZpZGVyL2JyaWRnZV9kYXRhX3Byb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUV6RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDeEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLHNCQUFzQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzVFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbEMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBR3RFLG9HQUFvRztBQUNwRyxNQUFNLENBQUMsS0FBSyxVQUFVLG9CQUFvQixDQUN4QyxRQUF3QixFQUN4Qix5QkFBcUMsRUFDckMsZUFBdUIsRUFDdkIsT0FBZSxFQUNmLGNBQTJCO0lBRTNCLE1BQU0sWUFBWSxHQUFHLElBQUksWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2hELE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3RGLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxRQUFRLENBQUMseUJBQXlCLENBQUMsUUFBUSxFQUFFLEVBQUUsc0JBQXNCLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3BILE1BQU0sb0JBQW9CLENBQUMsYUFBYSxDQUFDLGVBQWUsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNyRSxDQUFDO0FBRUQsTUFBTSxjQUFjLEdBQUcsQ0FBQyx5QkFBaUMsRUFBRSxRQUEwQixFQUFFLEVBQUU7SUFDdkYsT0FBTyxJQUFJLFFB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