import { utils } from 'ethers';
function extractFragmentsBySelector(contract, filter) {
    const errorMappings = {};
    const fragments = filter ? contract.interface.fragments.filter(f => f.type === filter) : contract.interface.fragments;
    for (const frag of fragments) {
        const sig = `${frag.name}(${frag.inputs.map(f => f.type).join(',')})`;
        const fullHash = utils.keccak256(utils.toUtf8Bytes(sig));
        const selector = fullHash.slice(2, 10);
        errorMappings[selector] = {
            name: frag.name,
            type: frag.type,
            fullHash,
            inputs: frag.inputs.map(f => f.type),
        };
    }
    return errorMappings;
}
export function decodeSelector(contract, selector) {
    const mappings = extractFragmentsBySelector(contract);
    return mappings[selector];
}
export function retrieveContractSelectors(contract, type) {
    return extractFragmentsBySelector(contract, type);
}
export function decodeErrorFromContract(contract, data) {
    const errorMappings = extractFragmentsBySelector(contract, 'error');
    const fullData = data.slice(2);
    const sigHash = fullData.slice(0, 8);
    // the rest of the data is any arguments given to the revert
    const args = fullData.slice(8);
    // look to see if we have the signature hash
    if (!errorMappings[sigHash]) {
        return;
    }
    const errorMapping = errorMappings[sigHash];
    // now try and decode the params based on their input type
    let result = [];
    if (errorMapping && errorMapping.inputs.length) {
        const abiDecodeString = errorMapping.inputs;
        result = contract.interface._abiCoder.decode(abiDecodeString, `0x${args}`).map(x => x.toString());
    }
    const errorValue = {
        name: errorMapping.name,
        params: result,
    };
    return errorValue;
}
export async function decodeErrorFromContractByTxHash(contract, txHash, provider) {
    const { to, from, gas, maxFeePerGas, maxPriorityFeePerGas, input, value, nonce, blockNumber } = await provider.request({
        method: 'eth_getTransactionByHash',
        params: [txHash.toString()],
    });
    const req = {
        to,
        from,
        gas,
        maxFeePerGas,
        maxPriorityFeePerGas,
        data: input,
        value,
        nonce,
    };
    const rep = await provider.request({ method: 'eth_call', params: [req, blockNumber] }).catch(err => err);
    if (!rep.data) {
        return;
    }
    return decodeErrorFromContract(contract, rep.data);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb2RlX2Vycm9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbnRyYWN0cy9kZWNvZGVfZXJyb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFZLEtBQUssRUFBRSxNQUFNLFFBQVEsQ0FBQztBQVN6QyxTQUFTLDBCQUEwQixDQUFDLFFBQWtCLEVBQUUsTUFBZTtJQUNyRSxNQUFNLGFBQWEsR0FBZ0MsRUFBRSxDQUFDO0lBQ3RELE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7SUFDdEgsS0FBSyxNQUFNLElBQUksSUFBSSxTQUFTLEVBQUU7UUFDNUIsTUFBTSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1FBQ3RFLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3pELE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZDLGFBQWEsQ0FBQyxRQUFRLENBQUMsR0FBRztZQUN4QixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDZixRQUFRO1lBQ1IsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMs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