import { EthAddress } from '@aztec/barretenberg/address';
import { sleep } from '@aztec/barretenberg/sleep';
import { Timer } from '@aztec/barretenberg/timer';
import { Web3Provider } from '@ethersproject/providers';
import { EthAsset, RollupProcessor, TokenAsset } from './contracts/index.js';
export class ClientEthereumBlockchain {
    constructor(rollupContractAddress, permitHelperContractAddress, assets, bridges, ethereumProvider, minConfirmations, permitSupportAssetIds = []) {
        this.bridges = bridges;
        this.ethereumProvider = ethereumProvider;
        this.minConfirmations = minConfirmations;
        this.permitSupportAssetIds = permitSupportAssetIds;
        this.rollupProcessor = new RollupProcessor(rollupContractAddress, ethereumProvider, permitHelperContractAddress);
        this.provider = new Web3Provider(this.ethereumProvider);
        this.assets = assets.map(asset => {
            if (asset.address.equals(EthAddress.ZERO)) {
                return new EthAsset(this.ethereumProvider);
            }
            else {
                return TokenAsset.new(asset, this.ethereumProvider);
            }
        });
    }
    async getChainId() {
        return (await this.provider.getNetwork()).chainId;
    }
    getAsset(assetId) {
        return this.assets[assetId];
    }
    getAssetIdByAddress(address, gasLimit) {
        const assetId = this.assets.findIndex(a => a.getStaticInfo().address.equals(address) &&
            (gasLimit === undefined || a.getStaticInfo().gasLimit === gasLimit));
        if (assetId < 0) {
            throw new Error(`Unknown asset. Address: ${address}. Gas limit: ${gasLimit}.`);
        }
        return assetId;
    }
    getAssetIdBySymbol(symbol, gasLimit) {
        const assetId = this.assets.findIndex(a => a.getStaticInfo().symbol.toLowerCase() === symbol.toLowerCase() &&
            (gasLimit === undefined || a.getStaticInfo().gasLimit === gasLimit));
        if (assetId < 0) {
            throw new Error(`Unknown asset. Symbol: ${symbol}. Gas limit: ${gasLimit}.`);
        }
        return assetId;
    }
    getBridgeAddressId(address, gasLimit) {
        const index = this.bridges.findIndex(b => b.address.equals(address) && (gasLimit === undefined || b.gasLimit === gasLimit));
        if (index < 0) {
            throw new Error(`Unknown bridge. Address: ${address}. Gas limit: ${gasLimit}.`);
        }
        return index + 1;
    }
    hasPermitSupport(assetId) {
        return this.permitSupportAssetIds.includes(assetId);
    }
    async getUserPendingDeposit(assetId, account) {
        return await this.rollupProcessor.getUserPendingDeposit(assetId, account);
    }
    async getUserProofApprovalStatus(account, txId) {
        return await this.rollupProcessor.getProofApprovalStatus(account, txId);
    }
    async depositPendingFunds(assetId, amount, proofHash, options) {
        return await this.rollupProcessor.depositPendingFunds(assetId, amount, proofHash, options);
    }
    async depositPendingFundsPermit(assetId, amount, deadline, signature, options) {
        return await this.rollupProcessor.depositPendingFundsPermit(assetId, amount, deadline, signature, options);
    }
    async depositPendingFundsPermitNonStandard(assetId, amount, nonce, deadline, signature, options) {
        return await this.rollupProcessor.depositPendingFundsPermitNonStandard(assetId, amount, nonce, deadline, signature, options);
    }
    async approveProof(txId, options) {
        return await this.rollupProcessor.approveProof(txId, options);
    }
    async processAsyncDefiInteraction(interactionNonce, options) {
        return await this.rollupProcessor.processAsyncDefiInteraction(interactionNonce, options);
    }
    async isContract(address) {
        return (await this.provider.getCode(address.toString())) !== '0x';
    }
    async isEmpty(address) {
        return (!(await this.isContract(address)) &&
            (await this.provider.getBalance(address.toString())).toBigInt() == BigInt(0) &&
            (await this.provider.getTransactionCount(address.toString())) == 0);
    }
    async setSupportedAsset(assetAddress, assetGasLimit, options) {
        const txHash = await this.rollupProcessor.setSupportedAsset(assetAddress, assetGasLimit, options);
        return txHash;
    }
    async setSupportedBridge(bridgeAddress, bridgeGasLimit, options) {
        const txHash = await this.rollupProcessor.setSupportedBridge(bridgeAddress, bridgeGasLimit, options);
        return txHash;
    }
    /**
     * Wait for given transaction to be mined, and return receipt.
     */
    async getTransactionReceipt(txHash, timeout = 300, interval = 1, minConfirmations = this.minConfirmations) {
        const timer = new Timer();
        while (true) {
            const txReceipt = await this.provider.getTransactionReceipt(txHash.toString());
            if (!minConfirmations || (txReceipt && txReceipt.confirmations >= minConfirmations)) {
                return txReceipt
                    ? { status: !!txReceipt.status, blockNum: txReceipt.blockNumber }
                    : { status: false, blockNum: 0 };
            }
            await sleep(interval * 1000);
            if (timeout && timer.s() > timeout) {
                throw new Error(`Timeout awaiting tx confirmation: ${txHash}`);
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50X2V0aGVyZXVtX2Jsb2NrY2hhaW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvY2xpZW50X2V0aGVyZXVtX2Jsb2NrY2hhaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBV3pELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNsRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRTdFLE1BQU0sT0FBTyx3QkFBd0I7SUFLbkMsWUFDRSxxQkFBaUMsRUFDakMsMkJBQXVDLEVBQ3ZDLE1BQXlCLEVBQ1IsT0FBMkIsRUFDM0IsZ0JBQWtDLEVBQ25DLGdCQUF3QixFQUN2Qix3QkFBa0MsRUFBRTtRQUhwQyxZQUFPLEdBQVAsT0FBTyxDQUFvQjtRQUMzQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ25DLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBUTtRQUN2QiwwQkFBcUIsR0FBckIscUJBQXFCLENBQWU7UUFFckQsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLGVBQWUsQ0FBQyxxQkFBcUIsRUFBRSxnQkFBZ0IsRUFBRSwyQkFBMkIsQ0FBQyxDQUFDO1FBQ2pILElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQy9CLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUN6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