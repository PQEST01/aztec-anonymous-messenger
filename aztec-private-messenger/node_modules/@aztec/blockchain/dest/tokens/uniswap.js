import { depositToWeth, approveWeth, getTokenBalance } from './index.js';
import { Contract } from 'ethers';
import { Web3Provider } from '@ethersproject/providers';
import { MainnetAddresses } from './mainnet_addresses.js';
import { EthAddress } from '@aztec/barretenberg/address';
import { ISwapRouter } from '../abis.js';
const supportedAssets = [
    MainnetAddresses.Tokens['DAI'],
    MainnetAddresses.Tokens['USDC'],
    MainnetAddresses.Tokens['WBTC'],
    MainnetAddresses.Tokens['WETH'],
];
export const addressesAreSame = (a, b) => a.toLowerCase() === b.toLowerCase();
export const fixEthersStackTrace = (err) => {
    err.stack += new Error().stack;
    throw err;
};
export class Uniswap {
    constructor(provider) {
        this.provider = provider;
        this.ethersProvider = new Web3Provider(provider);
        this.contract = new Contract(MainnetAddresses.Contracts['UNISWAP'], ISwapRouter.abi, this.ethersProvider);
    }
    static isSupportedAsset(assetAddress) {
        return supportedAssets.some(asset => addressesAreSame(assetAddress.toString(), asset));
    }
    getAddress() {
        return this.contract.address;
    }
    async swapFromEth(spender, recipient, token, amountInMaximum) {
        if (!Uniswap.isSupportedAsset(token.erc20Address)) {
            throw new Error('Asset not supported');
        }
        await depositToWeth(spender, amountInMaximum, this.provider);
        if (addressesAreSame(token.erc20Address.toString(), MainnetAddresses.Tokens['WETH'])) {
            return BigInt(0);
        }
        const params = {
            tokenIn: MainnetAddresses.Tokens['WETH'],
            tokenOut: token.erc20Address.toString(),
            fee: BigInt(3000),
            recipient: recipient.toString(),
            deadline: `0x${BigInt(Date.now() + 36000000).toString(16)}`,
            amountOut: token.amount,
            amountInMaximum,
            sqrtPriceLimitX96: BigInt(0),
        };
        await approveWeth(spender, EthAddress.fromString(this.contract.address), params.amountInMaximum, this.provider);
        const amountBefore = await getTokenBalance(token.erc20Address, recipient, this.provider);
        const swapTx = await this.contract
            .connect(this.ethersProvider.getSigner(spender.toString()))
            .exactOutputSingle(params)
            .catch(fixEthersStackTrace);
        await swapTx.wait();
        const amountAfter = await getTokenBalance(token.erc20Address, recipient, this.provider);
        const amountReceived = BigInt(amountAfter) - BigInt(amountBefore);
        return amountReceived;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pc3dhcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90b2tlbnMvdW5pc3dhcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLFdBQVcsRUFBRSxlQUFlLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDekUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNsQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFMUQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3pELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFekMsTUFBTSxlQUFlLEdBQUc7SUFDdEIsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztJQUM5QixnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQy9CLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDL0IsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztDQUNoQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxDQUFTLEVBQUUsQ0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBRTlGLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLENBQUMsR0FBVSxFQUFFLEVBQUU7SUFDaEQsR0FBRyxDQUFDLEtBQU0sSUFBSSxJQUFJLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQztJQUNoQyxNQUFNLEdBQUcsQ0FBQztBQUNaLENBQUMsQ0FBQztBQUNGLE1BQU0sT0FBTyxPQUFPO0lBSWxCLFlBQW9CLFFBQTBCO1FBQTFCLGFBQVEsR0FBUixRQUFRLENBQWtCO1FB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