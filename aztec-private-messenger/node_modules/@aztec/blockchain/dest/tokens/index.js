export * from './token_store.js';
export * from './mainnet_addresses.js';
import { TokenStore } from './token_store.js';
import { Web3Provider } from '@ethersproject/providers';
import { Contract } from 'ethers';
import { MainnetAddresses } from './mainnet_addresses.js';
import { ERC20, WETH9 } from '../abis.js';
const getSigner = (ethereumProvider, spender) => {
    return new Web3Provider(ethereumProvider).getSigner(spender.toString());
};
export async function purchaseTokens(tokenAddress, quantityToPurchase, maximumAmountToSpend, provider, spender, recipient) {
    const tokenStore = await TokenStore.create(provider);
    const token = {
        amount: quantityToPurchase,
        erc20Address: tokenAddress,
    };
    try {
        return await tokenStore.purchase(spender, recipient ? recipient : spender, token, maximumAmountToSpend);
    }
    catch (e) {
        console.log(e);
    }
}
export async function getTokenBalance(tokenAddress, owner, ethereumProvider) {
    const tokenContract = new Contract(tokenAddress.toString(), ERC20.abi, new Web3Provider(ethereumProvider));
    const currentBalance = await tokenContract.balanceOf(owner.toString());
    return currentBalance.toBigInt();
}
export async function getTokenAllowance(tokenAddress, owner, spender, ethereumProvider) {
    const tokenContract = new Contract(tokenAddress.toString(), ERC20.abi, new Web3Provider(ethereumProvider));
    const currentBalance = await tokenContract.allowance(owner.toString(), spender.toString());
    return currentBalance.toBigInt();
}
export async function approveToken(tokenAddress, owner, spender, ethereumProvider, amount) {
    const signer = getSigner(ethereumProvider, owner);
    const tokenContract = new Contract(tokenAddress.toString(), ERC20.abi, signer);
    const approved = await tokenContract.approve(spender.toString(), amount);
    await approved.wait();
}
export async function transferToken(tokenAddress, spender, recipient, ethereumProvider, amount) {
    const signer = getSigner(ethereumProvider, spender);
    const tokenContract = new Contract(tokenAddress.toString(), ERC20.abi, signer);
    const approved = await tokenContract.transfer(recipient.toString(), amount);
    await approved.wait();
}
export async function approveWeth(owner, spender, amount, ethereumProvider) {
    const signer = getSigner(ethereumProvider, owner);
    const wethContract = new Contract(MainnetAddresses.Tokens['WETH'], WETH9.abi, signer);
    const approveTx = await wethContract.approve(spender.toString(), amount);
    await approveTx.wait();
}
export async function getWethBalance(owner, ethereumProvider) {
    const wethContract = new Contract(MainnetAddresses.Tokens['WETH'], WETH9.abi, new Web3Provider(ethereumProvider));
    const currentBalance = await wethContract.balanceOf(owner.toString());
    return currentBalance.toBigInt();
}
export async function depositToWeth(spender, amount, ethereumProvider) {
    const signer = getSigner(ethereumProvider, spender);
    const wethContract = new Contract(MainnetAddresses.Tokens['WETH'], WETH9.abi, signer);
    const balance = (await wethContract.balanceOf(spender.toString())).toBigInt();
    if (balance < amount) {
        const amountToAdd = amount - balance;
        const depositTx = await wethContract.deposit({ value: amountToAdd });
        await depositTx.wait();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdG9rZW5zL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWMsa0JBQWtCLENBQUM7QUFDakMsY0FBYyx3QkFBd0IsQ0FBQztBQUV2QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFOUMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbEMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFMUQsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFMUMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxnQkFBa0MsRUFBRSxPQUFtQixFQUFFLEVBQUU7SUFDNUUsT0FBTyxJQUFJLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUMxRSxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsS0FBSyxVQUFVLGNBQWMsQ0FDbEMsWUFBd0IsRUFDeEIsa0JBQTBCLEVBQzFCLG9CQUE0QixFQUM1QixRQUEwQixFQUMxQixPQUFtQixFQUNuQixTQUFzQjtJQUV0QixNQUFNLFVBQVUsR0FBRyxNQUFNLFVBQVUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFckQsTUFBTSxLQUFLLEdBQUc7UUFDWixNQUFNLEVBQUUsa0JBQWtCO1FBQzFCLFlBQVksRUFBRSxZQUFZO0tBQzNCLENBQUM7SUFDRixJQUFJO1FBQ0YsT0FBTyxNQUFNLFVBQVUsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLG9CQUFvQixDQUFDLENB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