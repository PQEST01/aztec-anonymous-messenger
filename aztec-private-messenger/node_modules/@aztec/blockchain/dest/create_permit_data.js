const types = {
    EIP712Domain: [
        { name: 'name', type: 'string' },
        { name: 'version', type: 'string' },
        { name: 'chainId', type: 'uint256' },
        { name: 'verifyingContract', type: 'address' },
    ],
    Permit: [
        {
            name: 'owner',
            type: 'address',
        },
        {
            name: 'spender',
            type: 'address',
        },
        {
            name: 'value',
            type: 'uint256',
        },
        {
            name: 'nonce',
            type: 'uint256',
        },
        {
            name: 'deadline',
            type: 'uint256',
        },
    ],
};
const noneStandardTypes = {
    EIP712Domain: [
        { name: 'name', type: 'string' },
        { name: 'version', type: 'string' },
        { name: 'chainId', type: 'uint256' },
        { name: 'verifyingContract', type: 'address' },
    ],
    Permit: [
        {
            name: 'holder',
            type: 'address',
        },
        {
            name: 'spender',
            type: 'address',
        },
        {
            name: 'nonce',
            type: 'uint256',
        },
        {
            name: 'expiry',
            type: 'uint256',
        },
        {
            name: 'allowed',
            type: 'bool',
        },
    ],
};
export function createPermitData(name, owner, spender, value, nonce, deadline, verifyingContract, chainId, version = '1') {
    const domain = {
        name,
        version,
        chainId: chainId.toString(),
        verifyingContract: verifyingContract.toString(),
    };
    const message = {
        owner: owner.toString(),
        spender: spender.toString(),
        value: value.toString(),
        nonce: nonce.toString(),
        deadline: deadline.toString(),
    };
    return { types, domain, message, primaryType: 'Permit' };
}
export function createPermitDataNonStandard(name, owner, spender, nonce, deadline, verifyingContract, chainId, version = '1') {
    const domain = {
        name,
        version,
        chainId: chainId.toString(),
        verifyingContract: verifyingContract.toString(),
    };
    const message = {
        holder: owner.toString(),
        spender: spender.toString(),
        nonce: nonce.toString(),
        expiry: deadline.toString(),
        allowed: true,
    };
    return { types: noneStandardTypes, domain, message, primaryType: 'Permit' };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlX3Blcm1pdF9kYXRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NyZWF0ZV9wZXJtaXRfZGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxNQUFNLEtBQUssR0FBRztJQUNaLFlBQVksRUFBRTtRQUNaLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFO1FBQ2hDLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFO1FBQ25DLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFO1FBQ3BDLEVBQUUsSUFBSSxFQUFFLG1CQUFtQixFQUFFLElBQUksRUFBRSxTQUFTLEVBQUU7S0FDL0M7SUFDRCxNQUFNLEVBQUU7UUFDTjtZQUNFLElBQUksRUFBRSxPQUFPO1lBQ2IsSUFBSSxFQUFFLFNBQVM7U0FDaEI7UUFDRDtZQUNFLElBQUksRUFBRSxTQUFTO1lBQ2YsSUFBSSxFQUFFLFNBQVM7U0FDaEI7UUFDRDtZQUNFLElBQUksRUFBRSxPQUFPO1lBQ2IsSUFBSSxFQUFFLFNBQVM7U0FDaEI7UUFDRDtZQUNFLElBQUksRUFBRSxPQUFPO1lBQ2IsSUFBSSxFQUFFLFNBQVM7U0FDaEI7UUFDRDtZQUNFLElBQUksRUFBRSxVQUFVO1lBQ2hCLElBQUksRUFBRSxTQUFTO1NBQ2hCO0tBQ0Y7Q0FDRixDQUFDO0FBRUYsTUFBTSxpQkFBaUIsR0FBRztJQUN4QixZQUFZLEVBQUU7UUFDWixFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRTtRQUNoQyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRTtRQUNuQyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRTtRQUNwQyxFQUFFLElBQUksRUFBRSxtQkFBbUIsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFO0tBQy9DO0lBQ0QsTUFBTSxFQUFFO1FBQ047WUFDRSxJQUFJLEVBQUUsUUFBUTtZQUNkLElBQUksRUFBRSxTQUFTO1NBQ2hCO1FBQ0Q7WUFDRSxJQUFJLEVBQUUsU0FBUztZQUNmLElBQUksRUFBRSxTQUFTO1NBQ2hCO1FBQ0Q7WUFDRSxJQUFJLEVBQUUsT0FBTztZQUNiLElBQUksRUFBRSxTQUFTO1NBQ2hCO1FBQ0Q7WUFDRSxJQUFJLEVBQUUsUUFBUTtZQUNkLElBQUksRUFBRSxTQUFTO1NBQ2hCO1FBQ0Q7WUFDRSxJQUFJLEVBQUUsU0FBUztZQUNmLElBQUksRUFBRSxNQUFNO1NBQ2I7S0FDRjtDQUNGLENBQUM7QUFFRixNQUFNLFVBQVUsZ0JBQWdCLENBQzlCLElBQVksRUFDWixLQUFpQixFQUNqQixPQUFtQixFQUNuQixLQUFhLEVBQ2IsS0FBYSxFQUNiLFFBQWdCLEVBQ2hCLGlCQUE2QixFQUM3QixPQUFlLEVBQ2YsT0FBTyxHQUFHLEdBQUc7SUFFYixNQUFNLE1BQU0sR0FBRztRQUNiLElBQUk7UUFDSixPQUFPO1FBQ1AsT0FBTyxFQUFFLE9BQU8sQ0FBQyxRQUFRLEVBQUU7UUFDM0IsaUJBQWlCLEVBQUUsaUJBQWlCLENBQUMsUUFBUSxFQUFFO0tBQ2hELENBQUM7SUFDRixNQUFNLE9BQU8sR0FBRztRQUNkLEtBQUssRUFBRSxLQUFLLENBQUMsUUFBUSxFQUFFO1FBQ3ZCLE9BQU8sRUFBRSxPQUFPLENBQUMsUUFBUSxFQUFFO1FBQzNCLEtBQUssRUFBRSxLQUFLLENBQUMsUUFBUSxFQUFFO1FBQ3ZCLEtBQUssRUFBRSxLQUFLLENBQUMsUUFBUSxFQUFFO1FBQ3ZCLFFBQVEsRUFBRSxRQUFRLENBQUMsUUFBUSxFQUFFO0tBQzlCLENBQUM7SUFDRixPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxDQUFDO0FBQzNELENBQUM7QUFFRCxNQUFNLFVBQVUsMkJBQTJCLENBQ3pDLElBQVksRUFDWixLQUFpQixFQUNqQixPQUFtQixFQUNuQixLQUFhLEVBQ2IsUUFBZ0IsRUFDaEIsaUJBQTZCLEVBQzdCLE9BQWUsRUFDZixPQUFPLEdBQUcsR0FBRztJQUViLE1BQU0sTUFBTSxHQUFHO1FBQ2IsSUFBSTtRQUNKLE9BQU87UUFDUCxPQUFPLEVBQUUsT0FBTyxDQUFDLFFBQVEsRUFBRTtRQUMzQixpQkFBaUIsRUFBRSxpQkFBaUIsQ0FBQyxRQUFRLEVBQUU7S0FDaEQsQ0FBQztJQUNGLE1BQU0sT0FBTyxHQUFHO1FBQ2QsTUFBTSxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUU7UUFDeEIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxRQUFRLEVBQUU7UUFDM0IsS0FBSyxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUU7UUFDdkIsTUFBTSxFQUFFLFFBQVEsQ0FBQyxRQUFRLEVBQUU7UUFDM0IsT0FBTyxFQUFFLElBQUk7S0FDZCxDQUFDO0lBQ0YsT0FBTyxFQUFFLEtBQUssRUFBRSxpQkFBaUIsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsQ0FBQztBQUM5RSxDQUFDIn0=