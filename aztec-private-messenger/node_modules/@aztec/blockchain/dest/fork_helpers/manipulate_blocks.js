import { sleep } from '@aztec/barretenberg/sleep';
export async function getCurrentBlockNumber(provider) {
    return parseInt(await provider.request({ method: 'eth_blockNumber', params: [] }));
}
export async function blocksToAdvance(target, accuracy, provider) {
    const blockNumber = await getCurrentBlockNumber(provider);
    const remainder = blockNumber % accuracy;
    if (remainder > target) {
        return accuracy - remainder + target;
    }
    else {
        return target - remainder;
    }
}
export async function advanceBlocks(blocks, provider) {
    for (let i = 0; i < blocks; ++i) {
        await provider.request({ method: 'evm_mine', params: [1] });
    }
    await sleep(1200); // wait for ethereum_blockchain to update its status (it's polling and updating status every second)
    return await getCurrentBlockNumber(provider);
}
export async function getCurrentBlockTime(provider) {
    const block = await provider.request({ method: 'eth_getBlockByNumber', params: ['latest'] });
    return Number(block.timestamp);
}
export async function setBlockchainTime(unixTimestamp, provider) {
    const millisecondTimestamp = unixTimestamp * 1000;
    await provider.request({ method: 'evm_setTime', params: [`0x${millisecondTimestamp.toString(16)}`] });
    await advanceBlocks(1, provider);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFuaXB1bGF0ZV9ibG9ja3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZm9ya19oZWxwZXJzL21hbmlwdWxhdGVfYmxvY2tzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUVsRCxNQUFNLENBQUMsS0FBSyxVQUFVLHFCQUFxQixDQUFDLFFBQTBCO0lBQ3BFLE9BQU8sUUFBUSxDQUFDLE1BQU0sUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLE1BQU0sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3JGLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLGVBQWUsQ0FBQyxNQUFjLEVBQUUsUUFBZ0IsRUFBRSxRQUEwQjtJQUNoRyxNQUFNLFdBQVcsR0FBRyxNQUFNLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzFELE1BQU0sU0FBUyxHQUFHLFdBQVcsR0FBRyxRQUFRLENBQUM7SUFDekMsSUFBSSxTQUFTLEdBQUcsTUFBTSxFQUFFO1FBQ3RCLE9BQU8sUUFBUSxHQUFHLFNBQVMsR0FBRyxNQUFNLENBQUM7S0FDdEM7U0FBTTtRQUNMLE9BQU8sTUFBTSxHQUFHLFNBQVMsQ0FBQztLQUMzQjtBQUNILENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLGFBQWEsQ0FBQyxNQUFjLEVBQUUsUUFBMEI7SUFDNUUsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRTtRQUMvQixNQUFNLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUM3RDtJQUNELE1BQU0sS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsb0dBQW9HO0lBQ3ZILE9BQU8sTUFBTSxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMvQyxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxtQkFBbUIsQ0FBQyxRQUEwQjtJQUNsRSxNQUFNLEtBQUssR0FBRyxNQUFNLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxNQUFNLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzdGLE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNqQyxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxpQkFBaUIsQ0FBQyxhQUFxQixFQUFFLFFBQTBCO0lBQ3ZGLE1BQU0sb0JBQW9CLEdBQUcsYUFBYSxHQUFHLElBQUksQ0FBQztJQUNsRCxNQUFNLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssb0JBQW9CLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdEcsTUFBTSxhQUFhLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ25DLENBQUMifQ==