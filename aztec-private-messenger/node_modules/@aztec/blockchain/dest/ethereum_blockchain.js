import { createLogger } from '@aztec/barretenberg/log';
import { BridgeCallData } from '@aztec/barretenberg/bridge_call_data';
import { InitHelpers } from '@aztec/barretenberg/environment';
import { RollupProofData } from '@aztec/barretenberg/rollup_proof';
import { Timer } from '@aztec/barretenberg/timer';
import { WorldStateConstants } from '@aztec/barretenberg/world_state';
import { EventEmitter } from 'events';
import { Contracts } from './contracts/index.js';
import { validateSignature } from './validate_signature.js';
/**
 * Implementation of primary blockchain interface.
 * Provides higher level functionality above directly interfacing with contracts, e.g.:
 * - An asynchronous interface for subscribing to rollup events.
 * - A status query method for providing a complete snapshot of current rollup blockchain state.
 * - Abstracts away chain re-org concerns by ensuring appropriate confirmations for given situations.
 */
export class EthereumBlockchain extends EventEmitter {
    constructor(config, contracts) {
        super();
        this.config = config;
        this.contracts = contracts;
        this.running = false;
        this.latestEthBlock = -1;
        this.latestRollupId = -1;
        this.log = createLogger('EthereumBlockchain');
        if (config.console === false) {
            this.log = () => { };
        }
    }
    static async new(config, rollupContractAddress, permitHelperContractAddress, bridgeDataProvider, priceFeedContractAddresses, provider) {
        const confirmations = config.minConfirmation || EthereumBlockchain.DEFAULT_MIN_CONFIRMATIONS;
        const contracts = await Contracts.fromAddresses(rollupContractAddress, permitHelperContractAddress, priceFeedContractAddresses, bridgeDataProvider, provider, confirmations);
        const eb = new EthereumBlockchain(config, contracts);
        await eb.init();
        return eb;
    }
    getProvider() {
        return this.contracts.getProvider();
    }
    /**
     * Initialises the status object. Requires querying for the latest rollup block from the blockchain.
     * Once we have the latest block we can populate the correct state variables.
     */
    async init() {
        this.log('Initializing blockchain status...');
        this.status = {
            chainId: await this.contracts.getChainId(),
            rollupContractAddress: this.contracts.getRollupContractAddress(),
            permitHelperContractAddress: this.contracts.getPermitHelperContractAddress(),
            verifierContractAddress: await this.contracts.getVerifierContractAddress(),
            bridgeDataProvider: this.contracts.getBridgeDataProviderAddress(),
            ...(await this.getPerRollupState()),
            ...(await this.getPerEthBlockState()),
        };
        this.log('Seeking latest rollup...');
        const latestBlock = await this.contracts.getRollupBlock(-1, this.getRequiredConfirmations());
        if (latestBlock) {
            this.log(`Found latest rollup id ${latestBlock.rollupId}.`);
            this.latestRollupId = latestBlock.rollupId;
        }
        else {
            this.log('No rollup found, assuming pristine state.');
        }
        this.status = {
            ...this.status,
            ...(await this.getPerRollupState(latestBlock)),
        };
        this.log(`Initialized.`);
    }
    /**
     * Start polling for RollupProcessed events.
     * All historical blocks will have been emitted before this function returns.
     */
    async start(fromRollup = 0) {
        this.log(`Ethereum blockchain starting from rollup: ${fromRollup}`);
        const getBlocks = async (fromRollup) => {
            while (true) {
                try {
                    return await this.getBlocks(fromRollup);
                }
                catch (err) {
                    this.log(`getBlocks failed, will retry: ${err.message}`);
                    await new Promise(resolve => setTimeout(resolve, 5000));
                }
            }
        };
        const emitBlocks = async () => {
            const latestBlock = await this.contracts.getBlockNumber().catch(err => {
                this.log(`getBlockNumber failed: ${err.code}`);
                return this.latestEthBlock;
            });
            if (latestBlock === this.latestEthBlock) {
                return;
            }
            this.latestEthBlock = latestBlock;
            await this.updatePerEthBlockState();
            const blocks = await getBlocks(fromRollup);
            if (blocks.length) {
                await this.updatePerRollupState(blocks[blocks.length - 1]);
            }
            for (const block of blocks) {
                this.log(`Block received: ${block.rollupId}`);
                this.latestRollupId = block.rollupId;
                this.emit('block', block);
                fromRollup = block.rollupId + 1;
            }
        };
        // We must have emitted all historical blocks before returning.
        await emitBlocks();
        // After which, we asynchronously kick off a polling loop for the latest blocks.
        this.running = true;
        this.runningPromise = (async () => {
            while (this.running) {
                await new Promise(resolve => setTimeout(resolve, this.config.pollInterval || 10000));
                await emitBlocks().catch(this.log);
            }
        })();
        this.log('Ethereum blockchain started.');
    }
    /**
     * Stop polling for RollupProcessed events
     */
    async stop() {
        this.running = false;
        this.removeAllListeners();
        await this.runningPromise;
    }
    /**
     * Get the status of the rollup contract
     */
    getBlockchainStatus() {
        return this.status;
    }
    async getPerRollupState(block) {
        const state = await this.contracts.getPerRollupState();
        if (block) {
            const rollupProofData = RollupProofData.decode(block.encodedRollupProofData);
            return {
                ...state,
                nextRollupId: rollupProofData.rollupId + 1,
                dataSize: rollupProofData.dataStartIndex + rollupProofData.rollupSize,
                dataRoot: rollupProofData.newDataRoot,
                nullRoot: rollupProofData.newNullRoot,
                rootRoot: rollupProofData.newDataRootsRoot,
                defiRoot: rollupProofData.newDefiRoot,
            };
        }
        else {
            // No rollups yet.
            const chainId = await this.contracts.getChainId();
            const { dataTreeSize, roots: { dataRoot, nullRoot, rootsRoot }, } = InitHelpers.getInitData(chainId);
            return {
                ...state,
                nextRollupId: 0,
                dataSize: dataTreeSize,
                dataRoot,
                nullRoot,
                rootRoot: rootsRoot,
                defiRoot: WorldStateConstants.EMPTY_DEFI_ROOT,
            };
        }
    }
    async getPerEthBlockState() {
        return {
            ...(await this.contracts.getPerBlockState()),
            assets: this.contracts.getAssets(),
            bridges: await this.contracts.getSupportedBridges(),
        };
    }
    async updatePerRollupState(block) {
        this.status = {
            ...this.status,
            ...(await this.getPerRollupState(block)),
        };
    }
    async updatePerEthBlockState() {
        await this.contracts.updatePerEthBlockState();
        this.status = {
            ...this.status,
            ...(await this.getPerEthBlockState()),
        };
    }
    getLatestRollupId() {
        return Promise.resolve(this.latestRollupId);
    }
    async getUserPendingDeposit(assetId, account) {
        return await this.contracts.getUserPendingDeposit(assetId, account);
    }
    async getUserProofApprovalStatus(account, txId) {
        return await this.contracts.getUserProofApprovalStatus(account, txId);
    }
    async createRollupTxs(dataBuf, signatures, offchainTxData, txCallDataLimit) {
        return await this.contracts.createRollupTxs(dataBuf, signatures, offchainTxData, txCallDataLimit);
    }
    sendTx(tx, options = {}) {
        options = { ...options, gasLimit: options.gasLimit || this.config.gasLimit };
        return this.contracts.sendTx(tx, options);
    }
    getRequiredConfirmations() {
        const { escapeOpen, numEscapeBlocksRemaining } = this.status;
        const { minConfirmation = EthereumBlockchain.DEFAULT_MIN_CONFIRMATIONS, minConfirmationEHW = EthereumBlockchain.DEFAULT_MIN_CONFIRMATIONS_EHW, } = this.config;
        return escapeOpen || numEscapeBlocksRemaining <= minConfirmationEHW ? minConfirmationEHW : minConfirmation;
    }
    /**
     * Get all created rollup blocks from `rollupId`.
     */
    async getBlocks(rollupId) {
        const minConfirmations = this.getRequiredConfirmations();
        return await this.contracts.getRollupBlocksFrom(rollupId, minConfirmations);
    }
    async callbackRollupBlocksFrom(rollupId, cb) {
        const minConfirmations = this.getRequiredConfirmations();
        return await this.contracts.callbackRollupBlocksFrom(rollupId, minConfirmations, cb);
    }
    /**
     * Wait for given transaction to be mined, and return receipt.
     * Timeout is only considered for pending txs. i.e. If there is at least 1 confirmation, the timeout disables.
     * Timeout can be detected because Receipt blockNum will be undefined.
     */
    async getTransactionReceipt(txHash, timeoutSeconds, confs = this.config.minConfirmation || EthereumBlockchain.DEFAULT_MIN_CONFIRMATIONS) {
        const timer = new Timer();
        this.log(`Getting tx receipt for ${txHash}... (${confs} confs)`);
        let tx = await this.contracts.getTransactionByHash(txHash);
        while (!tx) {
            if (timeoutSeconds !== undefined && timer.s() > timeoutSeconds) {
                return { status: false };
            }
            await new Promise(resolve => setTimeout(resolve, 1000));
            tx = await this.contracts.getTransactionByHash(txHash);
        }
        let txReceipt = await this.contracts.getTransactionReceipt(txHash);
        while (!txReceipt || txReceipt.confirmations < confs) {
            await new Promise(resolve => setTimeout(resolve, 1000));
            txReceipt = await this.contracts.getTransactionReceipt(txHash);
        }
        const receipt = { status: !!txReceipt.status, blockNum: txReceipt.blockNumber };
        if (!receipt.status) {
            receipt.revertError = await this.contracts.getRevertError(txHash);
        }
        return receipt;
    }
    async getTransactionReceiptSafe(txHash, timeoutSeconds) {
        const confs = this.getRequiredConfirmations();
        return await this.getTransactionReceipt(txHash, timeoutSeconds, confs);
    }
    /**
     * Validate locally that a signature was produced by a publicOwner
     */
    validateSignature(publicOwner, signature, signingData) {
        return validateSignature(publicOwner, signature, signingData);
    }
    async signPersonalMessage(message, address) {
        return await this.contracts.signPersonalMessage(message, address);
    }
    async signMessage(message, address) {
        return await this.contracts.signMessage(message, address);
    }
    async signTypedData(data, address) {
        return await this.contracts.signTypedData(data, address);
    }
    getAsset(assetId) {
        return this.contracts.getAsset(assetId);
    }
    async getAssetPrice(assetId) {
        return await this.contracts.getAssetPrice(assetId);
    }
    getPriceFeed(assetId) {
        return this.contracts.getPriceFeed(assetId);
    }
    getGasPriceFeed() {
        return this.contracts.getGasPriceFeed();
    }
    async isContract(address) {
        return await this.contracts.isContract(address);
    }
    async isEmpty(address) {
        return await this.contracts.isEmpty(address);
    }
    async estimateGas(data) {
        return await this.contracts.estimateGas(data);
    }
    async getChainId() {
        return await this.contracts.getChainId();
    }
    getRollupBalance(assetId) {
        return this.contracts.getRollupBalance(assetId);
    }
    async getFeeData() {
        return await this.contracts.getFeeData();
    }
    getBridgeGas(bridgeCallData) {
        const { bridgeAddressId } = BridgeCallData.fromBigInt(bridgeCallData);
        const { gasLimit } = this.status.bridges.find(bridge => bridge.id == bridgeAddressId) || {};
        if (!gasLimit) {
            throw new Error(`Failed to retrieve bridge cost for bridge ${bridgeCallData.toString()}`);
        }
        return gasLimit;
    }
    async getBridgeSubsidy(bridgeCallData) {
        return await this.contracts.getBridgeSubsidy(bridgeCallData);
    }
    async getBridgeData(bridgeAddressId) {
        return await this.contracts.getBridgeData(bridgeAddressId);
    }
}
EthereumBlockchain.DEFAULT_MIN_CONFIRMATIONS = 3;
EthereumBlockchain.DEFAULT_MIN_CONFIRMATIONS_EHW = 12;
//# sourceMappingURL=data:application/json;base64,